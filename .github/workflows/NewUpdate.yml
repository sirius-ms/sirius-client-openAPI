name: NewUpdate

on:
  workflow_dispatch:
    inputs:
      target_branch:
        type: string
        required: true
  
jobs:
  UpdateClients:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 90
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs using the runners shell
    - name: checkout repo
      uses: actions/checkout@v3.1.0
    - name: Download latest generators
      run: |
        cd .updater/openapi_generator
        wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.4.0/openapi-generator-cli-7.4.0.jar -O openapi-generator-cli.jar
        wget https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/7.5.0-SNAPSHOT/openapi-generator-cli-7.5.0-20240321.100714-45.jar -O openapi-generator-cli-snapshot.jar
        java -jar openapi-generator-cli.jar version > version
    # - name: Download latest Sirius Release
    #   uses: nick-fields/retry@v2
    #   with:
    #     max_attempts: 5
    #     timeout_minutes: 5
    #     command: |
    #         cd .updater/api
    #         curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
    #         echo "Download Complete"
    #         unzip *.zip
    #         echo "Api Ready"
    # - name: Run Rest Api
    #   run: |
    #     bash .updater/api/sirius/bin/sirius REST -p 8080 -s &
    - name: Update api-docs.json
      run: |
        # while ! nc -z localhost 8080; do sleep 0.1; done
        cd .updater/api
        wget https://upload.uni-jena.de/data/660e49d07f62e6.70412102/s6_api_docs.json
        mv s6_api_docs.json api-docs.json
    - name: Update Clients
      run: |
        # echo "generating Java Code"
        # rm -rf client-api_java/generated/*
        # java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Java/config.json -g java -o client-api_java/generated
        
        echo "generating Python Code"
        rm -rf client-api_python/generated/*
        java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Python/config.json -g python -o client-api_python/generated
        
        # echo "temporarily move R manual folder"
        # mv client-api_r/generated/man/ client-api_r/
        
        echo "generating R Code"
        rm -rf client-api_r/generated/*
        java -jar .updater/openapi_generator/openapi-generator-cli-snapshot.jar generate -i .updater/api/api-docs.json -c .updater/config/R/config.json -g r -o client-api_r/generated -t client-api_r/templates/r
        
        # echo "recover R manual folder"
        # mv client-api_r/man/ client-api_r/generated/
        
        # echo "generating Ruby Code"
        # rm -rf client-api_ruby/generated/*
        # java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Ruby/config.json -g ruby -o client-api_ruby/generated
        echo "generating Finished!"
    - name: Format Python Package
      run: |
         cp client-api_python/sirius_api.py client-api_python/generated/PySirius
         cp client-api_python/Sirius.py client-api_python/generated/PySirius

         echo "from PySirius.sirius_api import PySiriusAPI" >> client-api_python/generated/PySirius/__init__.py
         echo "from PySirius.Sirius import SiriusSDK" >> client-api_python/generated/PySirius/__init__.py

    #      cd client-api_python/generated
    #      sed '/## Installation & Usage/Q' README.md > tempor
    #      echo "## Documentation for API Endpoints" >> tempor
    #      sed '1,/## Documentation for API Endpoints/d' README.md >> tempor
    #      cat tempor > README.md
    #      rm tempor
    - name: Format R package
      run: |
        cp client-api_r/SiriusSDK.R  client-api_r/generated/R/SiriusSDK.R
        echo >> client-api_r/generated/NAMESPACE
        echo "# SDK" >> client-api_r/generated/NAMESPACE
        echo "export(SiriusSDK)" >> client-api_r/generated/NAMESPACE
        
        chmod +x ./client-api_r/patches/list_syntax_fix.sh
        ./client-api_r/patches/list_syntax_fix.sh

    #     cp -r client-api_r/testthat client-api_r/generated/tests

    #     chmod +x ./client-api_r/api_response_fix.sh
    #     ./client-api_r/api_response_fix.sh ./client-api_r/generated/R/api_response.R

    #     chmod +x ./client-api_r/api_client_fix.sh
    #     ./client-api_r/api_client_fix.sh ./client-api_r/generated/R/api_client.R

    #     chmod +x ./client-api_r/compounds_api_fix.sh
    #     ./client-api_r/compounds_api_fix.sh ./client-api_r/generated/R/compounds_api.R

    #     chmod +x ./client-api_r/computations_api_fix.sh
    #     ./client-api_r/computations_api_fix.sh ./client-api_r/generated/R/computations_api.R

    #     chmod +x ./client-api_r/add_to_docu.sh
    #     ./client-api_r/add_to_docu.sh ./client-api_r/generated/docs/CompoundsApi.md
    # - name: Remove Sirius Rest Api
    #   run: |
    #     cd .updater/api
    #     rm -rf *sirius*
    #     echo "Done"
    - name: Remove Openapi Generator Files
      run: |
        rm .updater/openapi_generator/openapi-generator-cli.jar
        rm .updater/openapi_generator/openapi-generator-cli-snapshot.jar
        ls ./.github/workflows
        echo "Done"
    - name: update file and push to remote
      uses: stefanzweifel/git-auto-commit-action@v4.15.2
      with:
        commit_message: Auto-Updated OpenAPI Clients
    # - name: Run RManualGeneration
    #   run: |
    #     gh workflow run RManualGeneration.yml --ref ${GITHUB_REF##*/}
    #     echo "dispatched workflow"
    #     echo "sleeping for 30s to make sure it started"
    #     sleep 30
    #     list=$(gh run list --workflow RManualGeneration --branch ${GITHUB_REF##*/})
    #     id=$(echo $list | grep -oP 'in_progress RManualGeneration RManualGeneration [^ ]* workflow_dispatch \K\d+')
    #     echo "run ID of RManualGeneration is: $id"
    #     gh run watch $id --exit-status --interval 30
    #     echo "generation done!"
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    - name: update file and create pull request
      id: open-pr
      uses: repo-sync/pull-request@v2
      with:
          destination_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.MERGE_REQUEST_TOKEN }}
          pr_label: "Feature"
          pr_title: "AutoUpdated"
          pr_allow_empty: true
    - name: check if request has been created
      run: echo ${{steps.open-pr.outputs.pr_created}}
    - name: lock pull request
      continue-on-error: true
      id: lockpull
      uses: sudo-bot/action-pull-request-lock@v1.1.0
      with:
        github-token: ${{ secrets.MERGE_REQUEST_TOKEN }}
        number: ${{steps.open-pr.outputs.pr_number}}
        lock-reason: resolved
    - name: Run tests if no changes occure
      env:
        GH_TOKEN: ${{ github.token }}
      if: steps.lockpull.outcome == 'failure'
      run: |
        gh workflow run RunTests.yml --ref ${GITHUB_REF##*/}
        echo "sleeping for 30min before temp branch removal"
        sleep 1800
    - name: Delete temp branches if no changes occure
      if: steps.lockpull.outcome == 'failure'
      uses: dawidd6/action-delete-branch@v3
      with:
        github_token: ${{github.token}}
        prefix: temp_
        soft_fail: true
