# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.api.login_and_account_api import LoginAndAccountApi
from PySirius.models.account_info import AccountInfo


class TestLoginAndAccountApi(unittest.TestCase):
    """LoginAndAccountApi unit test stubs"""

    def setUp(self) -> None:
        self.api = LoginAndAccountApi()

    def tearDown(self) -> None:
        pass

    def test_get_account_info(self) -> None:
        """Test case for get_account_info

        Get information about the account currently logged in.
        """
        response = self.api.get_account_info()
        self.assertIsInstance(response, AccountInfo)

    def test_get_sign_up_url(self) -> None:
        """Test case for get_sign_up_url

        Get SignUp URL (For signUp via web browser)
        """
        response = self.api.get_sign_up_url()
        self.assertIn(response, 'https://portal.bright-giant.com/auth/register/')

    def test_get_subscriptions(self) -> None:
        """Test case for get_subscriptions

        Get available subscriptions of the account currently logged in.
        """
        response = self.api.get_subscriptions()
        self.assertIsInstance(response, list)

    def test_is_logged_in(self) -> None:
        """Test case for is_logged_in

        Check if a user is logged in.
        """
        response = self.api.is_logged_in()
        self.assertIsInstance(response, bool)

    def test_login(self) -> None:
        """Test case for login

        Login into SIRIUS web services and activate default subscription if available.
        """
        # # TODO need project secret
        # credentials = AccountCredentials.from_json('{"username": "myUserMail", "password": "myPassword"}')
        # response = self.api.login(True, credentials)
        # self.assertIsInstance(response, AccountInfo)

    def test_logout(self) -> None:
        """Test case for logout

        Logout from SIRIUS web services.
        """
        pass

    def test_open_portal(self) -> None:
        """Test case for open_portal

        Open User portal in browser.
        """
        pass

    def test_select_subscription(self) -> None:
        """Test case for select_subscription

        Select a subscription as active subscription to be used for computations.
        """
        # # TODO need project secret
        # response = self.api.select_subscription("mySubsciption")
        # self.assertIsInstance(response, AccountInfo)

    def test_sign_up(self) -> None:
        """Test case for sign_up

        Open SignUp window in system browser and return signUp link.
        """
        pass


if __name__ == '__main__':
    unittest.main()
