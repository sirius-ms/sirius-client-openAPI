# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import os
import unittest

from PySirius.api.searchable_databases_api import SearchableDatabasesApi
from PySirius.exceptions import ServiceException
from PySirius.models.searchable_database import SearchableDatabase


class TestSearchableDatabasesApi(unittest.TestCase):
    """SearchableDatabasesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SearchableDatabasesApi()
        self.database_id = 'create_database'
        self.create_response = self.api.create_database(self.database_id)

        path_to_demo_data = f"{os.environ.get('HOME')}/sirius-client-openAPI/.updater/clientTests/Data"
        self.test_file = path_to_demo_data + "/Kaempferol.ms"

    def tearDown(self) -> None:
        self.api.remove_database(self.database_id)

    def test_add_databases(self) -> None:
        """Test case for add_databases

        """
        # DEPRECATED
        pass

    def test_create_database(self) -> None:
        """Test case for create_database

        """
        self.assertIsInstance(self.create_response, SearchableDatabase)

    def test_get_custom_databases(self) -> None:
        """Test case for get_custom_databases

        """
        response = self.api.get_custom_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_get_database(self) -> None:
        """Test case for get_database

        """
        response = self.api.get_database(self.database_id)
        self.assertIsInstance(response, SearchableDatabase)

    def test_get_databases(self) -> None:
        """Test case for get_databases

        """
        response = self.api.get_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_get_included_databases(self) -> None:
        """Test case for get_included_databases

        """
        response = self.api.get_included_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_import_into_database(self) -> None:
        """Test case for import_into_database

        Start import of structure and spectra files into the specified database.
        """
        response = self.api.import_into_database(self.database_id, input_files=[self.test_file])
        self.assertIsInstance(response, SearchableDatabase)

    def test_remove_database(self) -> None:
        """Test case for remove_database

        """
        pass

    def test_update_database(self) -> None:
        """Test case for update_database

        """
        try:
            response = self.api.update_database_with_http_info(self.database_id)
            # self.assertIsInstance(response, SearchableDatabase)
        except ServiceException as ex:
            # Updating Custom databases is not yet supported
            self.assertTrue('UnsupportedOperationException' in ex.body, 'UnsupportedOperationException not found!')
            self.assertEqual(ex.status, 500, 'Status is not 500!')

if __name__ == '__main__':
    unittest.main()
