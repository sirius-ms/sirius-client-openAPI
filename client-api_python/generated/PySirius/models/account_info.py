# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.subscription import Subscription
from typing import Optional, Set
from typing_extensions import Self

class AccountInfo(BaseModel):
    """
    AccountInfo
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, alias="userID")
    username: Optional[StrictStr] = None
    user_email: Optional[StrictStr] = Field(default=None, alias="userEmail")
    gravatar_url: Optional[StrictStr] = Field(default=None, alias="gravatarURL")
    subscriptions: Optional[List[Subscription]] = None
    active_subscription_id: Optional[StrictStr] = Field(default=None, alias="activeSubscriptionId")
    __properties: ClassVar[List[str]] = ["userID", "username", "userEmail", "gravatarURL", "subscriptions", "activeSubscriptionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item_subscriptions in self.subscriptions:
                if _item_subscriptions:
                    _items.append(_item_subscriptions.to_dict())
            _dict['subscriptions'] = _items
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if gravatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.gravatar_url is None and "gravatar_url" in self.model_fields_set:
            _dict['gravatarURL'] = None

        # set to None if active_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.active_subscription_id is None and "active_subscription_id" in self.model_fields_set:
            _dict['activeSubscriptionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userID": obj.get("userID"),
            "username": obj.get("username"),
            "userEmail": obj.get("userEmail"),
            "gravatarURL": obj.get("gravatarURL"),
            "subscriptions": [Subscription.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None,
            "activeSubscriptionId": obj.get("activeSubscriptionId")
        })
        return _obj


