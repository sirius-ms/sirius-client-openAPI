# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.bio_transformer_sequence_step import BioTransformerSequenceStep
from PySirius.models.cyp450_mode import Cyp450Mode
from PySirius.models.p2_mode import P2Mode
from typing import Optional, Set
from typing_extensions import Self

class BioTransformerParameters(BaseModel):
    """
    BioTransformerParameters
    """ # noqa: E501
    cyp450_mode: Cyp450Mode = Field(description="Specify the Phase I/Cyp450 mode for all provided BioTransformerSequenceSteps. Will only be applied to Steps that  require the Cyp450 mode as parameter. Can be null in cases where only BioTransformerSequenceSteps are specified  that do not need the Cyp450 mode.", alias="cyp450Mode")
    p2_mode: P2Mode = Field(description="Specify the Phase II mode for all provided BioTransformerSequenceSteps. Will only be applied to Steps that  require the Phase II mode  as parameter. Can be null in cases where only BioTransformerSequenceSteps are specified  that do not need the Phase II mode.", alias="p2Mode")
    use_db: Optional[StrictBool] = Field(default=True, description="\"Specify if you want to enable the retrieving from database (HMDB) feature.\"", alias="useDB")
    bio_transformer_sequence_steps: List[BioTransformerSequenceStep] = Field(description="Specify BioTransformerSequenceSteps to be applied to input structures. MultiStep MetabolicTransformations can  only be used as singletons (list size of one).", alias="bioTransformerSequenceSteps")
    __properties: ClassVar[List[str]] = ["cyp450Mode", "p2Mode", "useDB", "bioTransformerSequenceSteps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BioTransformerParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bio_transformer_sequence_steps (list)
        _items = []
        if self.bio_transformer_sequence_steps:
            for _item_bio_transformer_sequence_steps in self.bio_transformer_sequence_steps:
                if _item_bio_transformer_sequence_steps:
                    _items.append(_item_bio_transformer_sequence_steps.to_dict())
            _dict['bioTransformerSequenceSteps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BioTransformerParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cyp450Mode": obj.get("cyp450Mode"),
            "p2Mode": obj.get("p2Mode"),
            "useDB": obj.get("useDB") if obj.get("useDB") is not None else True,
            "bioTransformerSequenceSteps": [BioTransformerSequenceStep.from_dict(_item) for _item in obj["bioTransformerSequenceSteps"]] if obj.get("bioTransformerSequenceSteps") is not None else None
        })
        return _obj


