# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.compound_class_type import CompoundClassType
from typing import Optional, Set
from typing_extensions import Self

class CompoundClass(BaseModel):
    """
    Predicted compound class with name, probability and id if available.  (ClassyFire and NPC). This can be seen as the set of classes a feature most likely belongs to
    """ # noqa: E501
    type: Optional[CompoundClassType] = Field(default=None, description="Specifies the classification ontology the CompoundClass belongs to.")
    level: Optional[StrictStr] = Field(default=None, description="Name of the level this compound class belongs to")
    level_index: Optional[StrictInt] = Field(default=None, description="Index of the level this compound class belongs to", alias="levelIndex")
    name: Optional[StrictStr] = Field(default=None, description="Name of the compound class.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the compound class.")
    id: Optional[StrictInt] = Field(default=None, description="Unique id of the class. Might be undefined for certain classification ontologies.")
    probability: Optional[float] = Field(default=None, description="prediction probability")
    index: Optional[StrictInt] = Field(default=None, description="Absolute index of this property in the predicted vector/embedding")
    parent_id: Optional[StrictInt] = Field(default=None, description="Unique id of the parent class. Might be undefined for certain classification ontologies.", alias="parentId")
    parent_name: Optional[StrictStr] = Field(default=None, description="Name of the parent compound class.", alias="parentName")
    __properties: ClassVar[List[str]] = ["type", "level", "levelIndex", "name", "description", "id", "probability", "index", "parentId", "parentName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompoundClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompoundClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "level": obj.get("level"),
            "levelIndex": obj.get("levelIndex"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "probability": obj.get("probability"),
            "index": obj.get("index"),
            "parentId": obj.get("parentId"),
            "parentName": obj.get("parentName")
        })
        return _obj


