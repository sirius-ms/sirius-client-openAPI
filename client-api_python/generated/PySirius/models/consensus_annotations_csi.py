# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.compound_classes import CompoundClasses
from PySirius.models.consensus_criterion_csi import ConsensusCriterionCSI
from PySirius.models.structure_candidate import StructureCandidate
from typing import Optional, Set
from typing_extensions import Self

class ConsensusAnnotationsCSI(BaseModel):
    """
    ConsensusAnnotationsCSI
    """ # noqa: E501
    molecular_formula: Optional[StrictStr] = Field(default=None, description="Molecular formula of the consensus annotation  Might be null if no consensus formula is available.", alias="molecularFormula")
    compound_classes: Optional[CompoundClasses] = Field(default=None, alias="compoundClasses")
    supporting_feature_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, description="FeatureIds where the topAnnotation supports this annotation.", alias="supportingFeatureIds")
    selection_criterion: Optional[ConsensusCriterionCSI] = Field(default=None, alias="selectionCriterion")
    csi_finger_id_structure: Optional[StructureCandidate] = Field(default=None, alias="csiFingerIdStructure")
    confidence_exact_match: Optional[float] = Field(default=None, description="Confidence value that represents the certainty that reported consensus structure is exactly the measured one  If multiple features support this consensus structure the maximum confidence is reported", alias="confidenceExactMatch")
    confidence_approx_match: Optional[float] = Field(default=None, description="Confidence value that represents the certainty that the exact consensus structure or a very similar  structure (e.g. measured by Maximum Common Edge Subgraph Distance) is the measured one.  If multiple features support this consensus structure the maximum confidence is reported", alias="confidenceApproxMatch")
    __properties: ClassVar[List[str]] = ["molecularFormula", "compoundClasses", "supportingFeatureIds", "selectionCriterion", "csiFingerIdStructure", "confidenceExactMatch", "confidenceApproxMatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsensusAnnotationsCSI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compound_classes
        if self.compound_classes:
            _dict['compoundClasses'] = self.compound_classes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csi_finger_id_structure
        if self.csi_finger_id_structure:
            _dict['csiFingerIdStructure'] = self.csi_finger_id_structure.to_dict()
        # set to None if molecular_formula (nullable) is None
        # and model_fields_set contains the field
        if self.molecular_formula is None and "molecular_formula" in self.model_fields_set:
            _dict['molecularFormula'] = None

        # set to None if compound_classes (nullable) is None
        # and model_fields_set contains the field
        if self.compound_classes is None and "compound_classes" in self.model_fields_set:
            _dict['compoundClasses'] = None

        # set to None if supporting_feature_ids (nullable) is None
        # and model_fields_set contains the field
        if self.supporting_feature_ids is None and "supporting_feature_ids" in self.model_fields_set:
            _dict['supportingFeatureIds'] = None

        # set to None if selection_criterion (nullable) is None
        # and model_fields_set contains the field
        if self.selection_criterion is None and "selection_criterion" in self.model_fields_set:
            _dict['selectionCriterion'] = None

        # set to None if csi_finger_id_structure (nullable) is None
        # and model_fields_set contains the field
        if self.csi_finger_id_structure is None and "csi_finger_id_structure" in self.model_fields_set:
            _dict['csiFingerIdStructure'] = None

        # set to None if confidence_exact_match (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_exact_match is None and "confidence_exact_match" in self.model_fields_set:
            _dict['confidenceExactMatch'] = None

        # set to None if confidence_approx_match (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_approx_match is None and "confidence_approx_match" in self.model_fields_set:
            _dict['confidenceApproxMatch'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsensusAnnotationsCSI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "molecularFormula": obj.get("molecularFormula"),
            "compoundClasses": CompoundClasses.from_dict(obj["compoundClasses"]) if obj.get("compoundClasses") is not None else None,
            "supportingFeatureIds": obj.get("supportingFeatureIds"),
            "selectionCriterion": obj.get("selectionCriterion"),
            "csiFingerIdStructure": StructureCandidate.from_dict(obj["csiFingerIdStructure"]) if obj.get("csiFingerIdStructure") is not None else None,
            "confidenceExactMatch": obj.get("confidenceExactMatch"),
            "confidenceApproxMatch": obj.get("confidenceApproxMatch")
        })
        return _obj


