# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.compound_classes import CompoundClasses
from PySirius.models.consensus_criterion_de_novo import ConsensusCriterionDeNovo
from typing import Optional, Set
from typing_extensions import Self

class ConsensusAnnotationsDeNovo(BaseModel):
    """
    ConsensusAnnotationsDeNovo
    """ # noqa: E501
    molecular_formula: Optional[StrictStr] = Field(default=None, description="Molecular formula of the consensus annotation  Might be null if no consensus formula is available.", alias="molecularFormula")
    compound_classes: Optional[CompoundClasses] = Field(default=None, description="Compound classes (predicted with CANOPUS) corresponding to the molecularFormula  Might be null if no fingerprints or compound classes are available.", alias="compoundClasses")
    supporting_feature_ids: Optional[List[StrictStr]] = Field(default=None, description="FeatureIds where the topAnnotation supports this annotation.", alias="supportingFeatureIds")
    selection_criterion: Optional[ConsensusCriterionDeNovo] = Field(default=None, description="Criterion that was used to select the consensus annotation.", alias="selectionCriterion")
    __properties: ClassVar[List[str]] = ["molecularFormula", "compoundClasses", "supportingFeatureIds", "selectionCriterion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsensusAnnotationsDeNovo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compound_classes
        if self.compound_classes:
            _dict['compoundClasses'] = self.compound_classes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsensusAnnotationsDeNovo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "molecularFormula": obj.get("molecularFormula"),
            "compoundClasses": CompoundClasses.from_dict(obj["compoundClasses"]) if obj.get("compoundClasses") is not None else None,
            "supportingFeatureIds": obj.get("supportingFeatureIds"),
            "selectionCriterion": obj.get("selectionCriterion")
        })
        return _obj


