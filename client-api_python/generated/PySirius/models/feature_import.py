# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.basic_spectrum import BasicSpectrum
from typing import Optional, Set
from typing_extensions import Self

class FeatureImport(BaseModel):
    """
    Represents an (aligned) feature to be imported into a SIRIUS project.  At least one of the Mass Spec data sources (e.g. mergedMs1, ms1Spectra, ms2Spectra) needs to be given.  Otherwise, the import will fail.
    """ # noqa: E501
    name: Optional[StrictStr] = None
    external_feature_id: Optional[StrictStr] = Field(default=None, description="Externally provided FeatureId (by some preprocessing tool). This FeatureId is NOT used by SIRIUS but is stored to ease mapping information back to the source.", alias="externalFeatureId")
    ion_mass: float = Field(alias="ionMass")
    charge: StrictInt
    detected_adducts: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Detected adducts of this feature. Can be NULL or empty if no adducts are known.", alias="detectedAdducts")
    rt_start_seconds: Optional[float] = Field(default=None, alias="rtStartSeconds")
    rt_end_seconds: Optional[float] = Field(default=None, alias="rtEndSeconds")
    merged_ms1: Optional[BasicSpectrum] = Field(default=None, alias="mergedMs1")
    ms1_spectra: Optional[List[Optional[BasicSpectrum]]] = Field(default=None, description="List of MS1Spectra belonging to this feature. These spectra will be merged an only a representative  mergedMs1 spectrum will be stored in SIRIUS. At least one of these spectra should contain the  isotope pattern of the precursor ion.  Note: Will be ignored if 'mergedMs1' is given.", alias="ms1Spectra")
    ms2_spectra: Optional[List[Optional[BasicSpectrum]]] = Field(default=None, description="List of MS/MS spectra that belong to this feature.", alias="ms2Spectra")
    __properties: ClassVar[List[str]] = ["name", "externalFeatureId", "ionMass", "charge", "detectedAdducts", "rtStartSeconds", "rtEndSeconds", "mergedMs1", "ms1Spectra", "ms2Spectra"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureImport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of merged_ms1
        if self.merged_ms1:
            _dict['mergedMs1'] = self.merged_ms1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ms1_spectra (list)
        _items = []
        if self.ms1_spectra:
            for _item in self.ms1_spectra:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ms1Spectra'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ms2_spectra (list)
        _items = []
        if self.ms2_spectra:
            for _item in self.ms2_spectra:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ms2Spectra'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if external_feature_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_feature_id is None and "external_feature_id" in self.model_fields_set:
            _dict['externalFeatureId'] = None

        # set to None if detected_adducts (nullable) is None
        # and model_fields_set contains the field
        if self.detected_adducts is None and "detected_adducts" in self.model_fields_set:
            _dict['detectedAdducts'] = None

        # set to None if rt_start_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.rt_start_seconds is None and "rt_start_seconds" in self.model_fields_set:
            _dict['rtStartSeconds'] = None

        # set to None if rt_end_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.rt_end_seconds is None and "rt_end_seconds" in self.model_fields_set:
            _dict['rtEndSeconds'] = None

        # set to None if merged_ms1 (nullable) is None
        # and model_fields_set contains the field
        if self.merged_ms1 is None and "merged_ms1" in self.model_fields_set:
            _dict['mergedMs1'] = None

        # set to None if ms1_spectra (nullable) is None
        # and model_fields_set contains the field
        if self.ms1_spectra is None and "ms1_spectra" in self.model_fields_set:
            _dict['ms1Spectra'] = None

        # set to None if ms2_spectra (nullable) is None
        # and model_fields_set contains the field
        if self.ms2_spectra is None and "ms2_spectra" in self.model_fields_set:
            _dict['ms2Spectra'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureImport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "externalFeatureId": obj.get("externalFeatureId"),
            "ionMass": obj.get("ionMass"),
            "charge": obj.get("charge"),
            "detectedAdducts": obj.get("detectedAdducts"),
            "rtStartSeconds": obj.get("rtStartSeconds"),
            "rtEndSeconds": obj.get("rtEndSeconds"),
            "mergedMs1": BasicSpectrum.from_dict(obj["mergedMs1"]) if obj.get("mergedMs1") is not None else None,
            "ms1Spectra": [BasicSpectrum.from_dict(_item) for _item in obj["ms1Spectra"]] if obj.get("ms1Spectra") is not None else None,
            "ms2Spectra": [BasicSpectrum.from_dict(_item) for _item in obj["ms2Spectra"]] if obj.get("ms2Spectra") is not None else None
        })
        return _obj


