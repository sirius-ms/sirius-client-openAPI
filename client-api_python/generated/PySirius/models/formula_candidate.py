# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.annotated_spectrum import AnnotatedSpectrum
from PySirius.models.canopus_prediction import CanopusPrediction
from PySirius.models.compound_classes import CompoundClasses
from PySirius.models.deviation import Deviation
from PySirius.models.fragmentation_tree import FragmentationTree
from PySirius.models.isotope_pattern_annotation import IsotopePatternAnnotation
from PySirius.models.lipid_annotation import LipidAnnotation
from typing import Optional, Set
from typing_extensions import Self

class FormulaCandidate(BaseModel):
    """
    Molecular formula candidate that holds a unique identifier (molecular formula + adduct).  It can be extended with optional scoring metrics and the raw results  such as fragmentation trees and simulated isotope pattern.
    """ # noqa: E501
    formula_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this formula candidate", alias="formulaId")
    molecular_formula: Optional[StrictStr] = Field(default=None, description="molecular formula of this formula candidate", alias="molecularFormula")
    adduct: Optional[StrictStr] = Field(default=None, description="Adduct of this formula candidate")
    rank: Optional[StrictInt] = None
    sirius_score_normalized: Optional[float] = Field(default=None, description="Normalized Sirius Score of the formula candidate.  If NULL result is not available", alias="siriusScoreNormalized")
    sirius_score: Optional[float] = Field(default=None, description="Sirius Score (isotope + tree score) of the formula candidate.  If NULL result is not available", alias="siriusScore")
    isotope_score: Optional[float] = Field(default=None, alias="isotopeScore")
    tree_score: Optional[float] = Field(default=None, alias="treeScore")
    zodiac_score: Optional[float] = Field(default=None, description="Zodiac Score of the formula candidate.  If NULL result is not available", alias="zodiacScore")
    num_of_explained_peaks: Optional[StrictInt] = Field(default=None, alias="numOfExplainedPeaks")
    num_of_explainable_peaks: Optional[StrictInt] = Field(default=None, alias="numOfExplainablePeaks")
    total_explained_intensity: Optional[float] = Field(default=None, alias="totalExplainedIntensity")
    median_mass_deviation: Optional[Deviation] = Field(default=None, alias="medianMassDeviation")
    fragmentation_tree: Optional[FragmentationTree] = Field(default=None, alias="fragmentationTree")
    annotated_spectrum: Optional[AnnotatedSpectrum] = Field(default=None, alias="annotatedSpectrum")
    isotope_pattern_annotation: Optional[IsotopePatternAnnotation] = Field(default=None, alias="isotopePatternAnnotation")
    lipid_annotation: Optional[LipidAnnotation] = Field(default=None, alias="lipidAnnotation")
    predicted_fingerprint: Optional[List[Optional[float]]] = Field(default=None, description="Probabilistic molecular fingerprint predicted by CSI:FingerID", alias="predictedFingerprint")
    compound_classes: Optional[CompoundClasses] = Field(default=None, alias="compoundClasses")
    canopus_prediction: Optional[CanopusPrediction] = Field(default=None, alias="canopusPrediction")
    __properties: ClassVar[List[str]] = ["formulaId", "molecularFormula", "adduct", "rank", "siriusScoreNormalized", "siriusScore", "isotopeScore", "treeScore", "zodiacScore", "numOfExplainedPeaks", "numOfExplainablePeaks", "totalExplainedIntensity", "medianMassDeviation", "fragmentationTree", "annotatedSpectrum", "isotopePatternAnnotation", "lipidAnnotation", "predictedFingerprint", "compoundClasses", "canopusPrediction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormulaCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of median_mass_deviation
        if self.median_mass_deviation:
            _dict['medianMassDeviation'] = self.median_mass_deviation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fragmentation_tree
        if self.fragmentation_tree:
            _dict['fragmentationTree'] = self.fragmentation_tree.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotated_spectrum
        if self.annotated_spectrum:
            _dict['annotatedSpectrum'] = self.annotated_spectrum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of isotope_pattern_annotation
        if self.isotope_pattern_annotation:
            _dict['isotopePatternAnnotation'] = self.isotope_pattern_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lipid_annotation
        if self.lipid_annotation:
            _dict['lipidAnnotation'] = self.lipid_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compound_classes
        if self.compound_classes:
            _dict['compoundClasses'] = self.compound_classes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of canopus_prediction
        if self.canopus_prediction:
            _dict['canopusPrediction'] = self.canopus_prediction.to_dict()
        # set to None if sirius_score_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.sirius_score_normalized is None and "sirius_score_normalized" in self.model_fields_set:
            _dict['siriusScoreNormalized'] = None

        # set to None if sirius_score (nullable) is None
        # and model_fields_set contains the field
        if self.sirius_score is None and "sirius_score" in self.model_fields_set:
            _dict['siriusScore'] = None

        # set to None if isotope_score (nullable) is None
        # and model_fields_set contains the field
        if self.isotope_score is None and "isotope_score" in self.model_fields_set:
            _dict['isotopeScore'] = None

        # set to None if tree_score (nullable) is None
        # and model_fields_set contains the field
        if self.tree_score is None and "tree_score" in self.model_fields_set:
            _dict['treeScore'] = None

        # set to None if zodiac_score (nullable) is None
        # and model_fields_set contains the field
        if self.zodiac_score is None and "zodiac_score" in self.model_fields_set:
            _dict['zodiacScore'] = None

        # set to None if num_of_explained_peaks (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_explained_peaks is None and "num_of_explained_peaks" in self.model_fields_set:
            _dict['numOfExplainedPeaks'] = None

        # set to None if num_of_explainable_peaks (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_explainable_peaks is None and "num_of_explainable_peaks" in self.model_fields_set:
            _dict['numOfExplainablePeaks'] = None

        # set to None if total_explained_intensity (nullable) is None
        # and model_fields_set contains the field
        if self.total_explained_intensity is None and "total_explained_intensity" in self.model_fields_set:
            _dict['totalExplainedIntensity'] = None

        # set to None if median_mass_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.median_mass_deviation is None and "median_mass_deviation" in self.model_fields_set:
            _dict['medianMassDeviation'] = None

        # set to None if fragmentation_tree (nullable) is None
        # and model_fields_set contains the field
        if self.fragmentation_tree is None and "fragmentation_tree" in self.model_fields_set:
            _dict['fragmentationTree'] = None

        # set to None if annotated_spectrum (nullable) is None
        # and model_fields_set contains the field
        if self.annotated_spectrum is None and "annotated_spectrum" in self.model_fields_set:
            _dict['annotatedSpectrum'] = None

        # set to None if isotope_pattern_annotation (nullable) is None
        # and model_fields_set contains the field
        if self.isotope_pattern_annotation is None and "isotope_pattern_annotation" in self.model_fields_set:
            _dict['isotopePatternAnnotation'] = None

        # set to None if lipid_annotation (nullable) is None
        # and model_fields_set contains the field
        if self.lipid_annotation is None and "lipid_annotation" in self.model_fields_set:
            _dict['lipidAnnotation'] = None

        # set to None if predicted_fingerprint (nullable) is None
        # and model_fields_set contains the field
        if self.predicted_fingerprint is None and "predicted_fingerprint" in self.model_fields_set:
            _dict['predictedFingerprint'] = None

        # set to None if compound_classes (nullable) is None
        # and model_fields_set contains the field
        if self.compound_classes is None and "compound_classes" in self.model_fields_set:
            _dict['compoundClasses'] = None

        # set to None if canopus_prediction (nullable) is None
        # and model_fields_set contains the field
        if self.canopus_prediction is None and "canopus_prediction" in self.model_fields_set:
            _dict['canopusPrediction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormulaCandidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formulaId": obj.get("formulaId"),
            "molecularFormula": obj.get("molecularFormula"),
            "adduct": obj.get("adduct"),
            "rank": obj.get("rank"),
            "siriusScoreNormalized": obj.get("siriusScoreNormalized"),
            "siriusScore": obj.get("siriusScore"),
            "isotopeScore": obj.get("isotopeScore"),
            "treeScore": obj.get("treeScore"),
            "zodiacScore": obj.get("zodiacScore"),
            "numOfExplainedPeaks": obj.get("numOfExplainedPeaks"),
            "numOfExplainablePeaks": obj.get("numOfExplainablePeaks"),
            "totalExplainedIntensity": obj.get("totalExplainedIntensity"),
            "medianMassDeviation": Deviation.from_dict(obj["medianMassDeviation"]) if obj.get("medianMassDeviation") is not None else None,
            "fragmentationTree": FragmentationTree.from_dict(obj["fragmentationTree"]) if obj.get("fragmentationTree") is not None else None,
            "annotatedSpectrum": AnnotatedSpectrum.from_dict(obj["annotatedSpectrum"]) if obj.get("annotatedSpectrum") is not None else None,
            "isotopePatternAnnotation": IsotopePatternAnnotation.from_dict(obj["isotopePatternAnnotation"]) if obj.get("isotopePatternAnnotation") is not None else None,
            "lipidAnnotation": LipidAnnotation.from_dict(obj["lipidAnnotation"]) if obj.get("lipidAnnotation") is not None else None,
            "predictedFingerprint": obj.get("predictedFingerprint"),
            "compoundClasses": CompoundClasses.from_dict(obj["compoundClasses"]) if obj.get("compoundClasses") is not None else None,
            "canopusPrediction": CanopusPrediction.from_dict(obj["canopusPrediction"]) if obj.get("canopusPrediction") is not None else None
        })
        return _obj


