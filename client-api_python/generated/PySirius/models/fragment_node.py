# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FragmentNode(BaseModel):
    """
    FragmentNode
    """ # noqa: E501
    fragment_id: Optional[StrictInt] = Field(default=None, alias="fragmentId")
    molecular_formula: Optional[StrictStr] = Field(default=None, description="neutral molecular formula of the fragment without adduct", alias="molecularFormula")
    adduct: Optional[StrictStr] = Field(default=None, description="This combines the ionization plus adduct of the fragment. In contrast to the {@link FragmentationTree FragmentationTree}s adduct,  this adduct may not include any in-source loss.")
    mass_deviation_da: Optional[float] = Field(default=None, alias="massDeviationDa")
    mass_deviation_ppm: Optional[float] = Field(default=None, alias="massDeviationPpm")
    score: Optional[float] = None
    intensity: Optional[float] = None
    mz: Optional[float] = None
    __properties: ClassVar[List[str]] = ["fragmentId", "molecularFormula", "adduct", "massDeviationDa", "massDeviationPpm", "score", "intensity", "mz"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FragmentNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FragmentNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fragmentId": obj.get("fragmentId"),
            "molecularFormula": obj.get("molecularFormula"),
            "adduct": obj.get("adduct"),
            "massDeviationDa": obj.get("massDeviationDa"),
            "massDeviationPpm": obj.get("massDeviationPpm"),
            "score": obj.get("score"),
            "intensity": obj.get("intensity"),
            "mz": obj.get("mz")
        })
        return _obj


