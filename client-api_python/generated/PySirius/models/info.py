# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.solver import Solver
from typing import Optional, Set
from typing_extensions import Self

class Info(BaseModel):
    """
    Info
    """ # noqa: E501
    night_sky_api_version: Optional[StrictStr] = Field(default=None, description="API version of the SIRIUS Nightsky API", alias="nightSkyApiVersion")
    sirius_version: Optional[StrictStr] = Field(default=None, description="Version of the SIRIUS application", alias="siriusVersion")
    latest_sirius_version: Optional[StrictStr] = Field(default=None, description="Latest available Version of the SIRIUS application", alias="latestSiriusVersion")
    latest_sirius_link: Optional[StrictStr] = Field(default=None, description="Link to the latest available Version of the SIRIUS application", alias="latestSiriusLink")
    update_available: Optional[StrictBool] = Field(default=None, description="true if newer SIRIUS version is available", alias="updateAvailable")
    sirius_lib_version: Optional[StrictStr] = Field(default=None, description="Version of the SIRIUS libraries", alias="siriusLibVersion")
    finger_id_lib_version: Optional[StrictStr] = Field(default=None, description="Version of the CSI:FingerID libraries", alias="fingerIdLibVersion")
    chem_db_version: Optional[StrictStr] = Field(default=None, description="Version of the Chemical Database available via SIRIUS web services", alias="chemDbVersion")
    finger_id_model_version: Optional[StrictStr] = Field(default=None, description="Version of the Machine learning models used for Fingerprint, Compound Class and Structure Prediction  Not available if web service is not reachable.", alias="fingerIdModelVersion")
    fingerprint_id: Optional[StrictStr] = Field(default=None, description="Version of the Molecular Fingerprint used by SIRIUS", alias="fingerprintId")
    available_ilp_solvers: List[Solver] = Field(description="Set of solvers that are configured correctly and can be loaded", alias="availableILPSolvers")
    supported_ilp_solvers: Dict[str, StrictStr] = Field(description="Set of ILP Solvers that are Supported and their version information", alias="supportedILPSolvers")
    __properties: ClassVar[List[str]] = ["nightSkyApiVersion", "siriusVersion", "latestSiriusVersion", "latestSiriusLink", "updateAvailable", "siriusLibVersion", "fingerIdLibVersion", "chemDbVersion", "fingerIdModelVersion", "fingerprintId", "availableILPSolvers", "supportedILPSolvers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Info from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Info from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nightSkyApiVersion": obj.get("nightSkyApiVersion"),
            "siriusVersion": obj.get("siriusVersion"),
            "latestSiriusVersion": obj.get("latestSiriusVersion"),
            "latestSiriusLink": obj.get("latestSiriusLink"),
            "updateAvailable": obj.get("updateAvailable"),
            "siriusLibVersion": obj.get("siriusLibVersion"),
            "fingerIdLibVersion": obj.get("fingerIdLibVersion"),
            "chemDbVersion": obj.get("chemDbVersion"),
            "fingerIdModelVersion": obj.get("fingerIdModelVersion"),
            "fingerprintId": obj.get("fingerprintId"),
            "availableILPSolvers": obj.get("availableILPSolvers"),
            "supportedILPSolvers": obj.get("supportedILPSolvers")
        })
        return _obj


