# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from PySirius.models.data_smoothing import DataSmoothing
from typing import Optional, Set
from typing_extensions import Self

class LcmsSubmissionParameters(BaseModel):
    """
    LcmsSubmissionParameters
    """ # noqa: E501
    align_lcms_runs: Optional[StrictBool] = Field(default=True, description="Specifies whether LC/MS runs should be aligned", alias="alignLCMSRuns")
    noise: Optional[Union[StrictFloat, StrictInt]] = Field(default=2.0, description="Features must be larger than <value> * detected noise level.")
    persistence: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Features must have larger persistence (intensity above valley) than <value> * max trace intensity.")
    merge: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.8, description="Merge neighboring features with valley less than <value> * intensity.")
    filter: Optional[DataSmoothing] = None
    gaussian_sigma: Optional[Union[StrictFloat, StrictInt]] = Field(default=3.0, description="Sigma (kernel width) for gaussian filter algorithm.", alias="gaussianSigma")
    wavelet_scale: Optional[StrictInt] = Field(default=20, description="Number of coefficients for wavelet filter algorithm.", alias="waveletScale")
    wavelet_window: Optional[Union[StrictFloat, StrictInt]] = Field(default=11, description="Wavelet window size (%) for wavelet filter algorithm.", alias="waveletWindow")
    __properties: ClassVar[List[str]] = ["alignLCMSRuns", "noise", "persistence", "merge", "filter", "gaussianSigma", "waveletScale", "waveletWindow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LcmsSubmissionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LcmsSubmissionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignLCMSRuns": obj.get("alignLCMSRuns") if obj.get("alignLCMSRuns") is not None else True,
            "noise": obj.get("noise") if obj.get("noise") is not None else 2.0,
            "persistence": obj.get("persistence") if obj.get("persistence") is not None else 0.1,
            "merge": obj.get("merge") if obj.get("merge") is not None else 0.8,
            "filter": obj.get("filter"),
            "gaussianSigma": obj.get("gaussianSigma") if obj.get("gaussianSigma") is not None else 3.0,
            "waveletScale": obj.get("waveletScale") if obj.get("waveletScale") is not None else 20,
            "waveletWindow": obj.get("waveletWindow") if obj.get("waveletWindow") is not None else 11
        })
        return _obj


