# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.subscription import Subscription
from PySirius.models.subscription_consumables import SubscriptionConsumables
from PySirius.models.term import Term
from typing import Optional, Set
from typing_extensions import Self

class LicenseInfo(BaseModel):
    """
    LicenseInfo
    """ # noqa: E501
    user_email: Optional[StrictStr] = Field(default=None, description="Email address of the user account this license information belongs to.", alias="userEmail")
    user_id: Optional[StrictStr] = Field(default=None, description="User ID (uid) of the user account this license information belongs to.", alias="userId")
    subscription: Optional[Subscription] = None
    consumables: Optional[SubscriptionConsumables] = None
    terms: Optional[List[Optional[Term]]] = None
    __properties: ClassVar[List[str]] = ["userEmail", "userId", "subscription", "consumables", "terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicenseInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumables
        if self.consumables:
            _dict['consumables'] = self.consumables.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item in self.terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['terms'] = _items
        # set to None if user_email (nullable) is None
        # and model_fields_set contains the field
        if self.user_email is None and "user_email" in self.model_fields_set:
            _dict['userEmail'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if consumables (nullable) is None
        # and model_fields_set contains the field
        if self.consumables is None and "consumables" in self.model_fields_set:
            _dict['consumables'] = None

        # set to None if terms (nullable) is None
        # and model_fields_set contains the field
        if self.terms is None and "terms" in self.model_fields_set:
            _dict['terms'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicenseInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userEmail": obj.get("userEmail"),
            "userId": obj.get("userId"),
            "subscription": Subscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "consumables": SubscriptionConsumables.from_dict(obj["consumables"]) if obj.get("consumables") is not None else None,
            "terms": [Term.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None
        })
        return _obj


