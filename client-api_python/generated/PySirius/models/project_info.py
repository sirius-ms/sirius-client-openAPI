# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.project_type import ProjectType
from typing import Optional, Set
from typing_extensions import Self

class ProjectInfo(BaseModel):
    """
    ProjectInfo
    """ # noqa: E501
    project_id: Optional[StrictStr] = Field(default=None, description="a user selected unique name of the project for easy access.", alias="projectId")
    location: Optional[StrictStr] = Field(default=None, description="storage location of the project.")
    description: Optional[StrictStr] = Field(default=None, description="Description of this project.")
    type: Optional[ProjectType] = Field(default=None, description="Type of this project.  NULL if project type has not yet been specified by importing data.")
    compatible: Optional[StrictBool] = Field(default=None, description="Indicates whether computed results (e.g. fingerprints, compounds classes) are compatible with the backend.  If true project is up-to-date and there are no restrictions regarding usage.  If false project is incompatible and therefore \"read only\" until the incompatible results have been removed. See updateProject endpoint for further information  If NULL the information has not been requested.")
    num_of_features: Optional[StrictInt] = Field(default=None, description="Number of features (aligned over runs) in this project. If NULL, information has not been requested (See OptField 'sizeInformation').", alias="numOfFeatures")
    num_of_compounds: Optional[StrictInt] = Field(default=None, description="Number of compounds (group of ion identities) in this project. If NULL, Information has not been requested (See OptField 'sizeInformation') or might be unavailable for this project type.", alias="numOfCompounds")
    num_of_bytes: Optional[StrictInt] = Field(default=None, description="Size in Bytes this project consumes on disk If NULL, Information has not been requested (See OptField 'sizeInformation').", alias="numOfBytes")
    __properties: ClassVar[List[str]] = ["projectId", "location", "description", "type", "compatible", "numOfFeatures", "numOfCompounds", "numOfBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "projectId": obj.get("projectId"),
            "location": obj.get("location"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "compatible": obj.get("compatible"),
            "numOfFeatures": obj.get("numOfFeatures"),
            "numOfCompounds": obj.get("numOfCompounds"),
            "numOfBytes": obj.get("numOfBytes")
        })
        return _obj


