# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QuantificationTable(BaseModel):
    """
    QuantificationTable
    """ # noqa: E501
    quantification_type: Optional[StrictStr] = Field(default=None, alias="quantificationType")
    row_type: Optional[StrictStr] = Field(default=None, alias="rowType")
    column_type: Optional[StrictStr] = Field(default=None, alias="columnType")
    row_ids: Optional[List[Optional[StrictInt]]] = Field(default=None, alias="rowIds")
    column_ids: Optional[List[Optional[StrictInt]]] = Field(default=None, alias="columnIds")
    row_names: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="rowNames")
    column_names: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="columnNames")
    values: Optional[List[List[Union[StrictFloat, StrictInt]]]] = None
    __properties: ClassVar[List[str]] = ["quantificationType", "rowType", "columnType", "rowIds", "columnIds", "rowNames", "columnNames", "values"]

    @field_validator('quantification_type')
    def quantification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APEX_HEIGHT']):
            raise ValueError("must be one of enum values ('APEX_HEIGHT')")
        return value

    @field_validator('row_type')
    def row_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEATURES']):
            raise ValueError("must be one of enum values ('FEATURES')")
        return value

    @field_validator('column_type')
    def column_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SAMPLES']):
            raise ValueError("must be one of enum values ('SAMPLES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuantificationTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if row_ids (nullable) is None
        # and model_fields_set contains the field
        if self.row_ids is None and "row_ids" in self.model_fields_set:
            _dict['rowIds'] = None

        # set to None if column_ids (nullable) is None
        # and model_fields_set contains the field
        if self.column_ids is None and "column_ids" in self.model_fields_set:
            _dict['columnIds'] = None

        # set to None if row_names (nullable) is None
        # and model_fields_set contains the field
        if self.row_names is None and "row_names" in self.model_fields_set:
            _dict['rowNames'] = None

        # set to None if column_names (nullable) is None
        # and model_fields_set contains the field
        if self.column_names is None and "column_names" in self.model_fields_set:
            _dict['columnNames'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuantificationTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quantificationType": obj.get("quantificationType"),
            "rowType": obj.get("rowType"),
            "columnType": obj.get("columnType"),
            "rowIds": obj.get("rowIds"),
            "columnIds": obj.get("columnIds"),
            "rowNames": obj.get("rowNames"),
            "columnNames": obj.get("columnNames"),
            "values": obj.get("values")
        })
        return _obj


