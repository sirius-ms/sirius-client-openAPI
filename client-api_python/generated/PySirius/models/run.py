# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class Run(BaseModel):
    """
    Run
    """ # noqa: E501
    run_id: Optional[StrictStr] = Field(default=None, description="Identifier", alias="runId")
    name: Optional[StrictStr] = Field(default=None, description="Informative, human-readable name of this run")
    source: Optional[StrictStr] = Field(default=None, description="Source location")
    chromatography: Optional[StrictStr] = None
    ionization: Optional[StrictStr] = None
    fragmentation: Optional[StrictStr] = None
    mass_analyzers: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="massAnalyzers")
    tags: Optional[Dict[str, Tag]] = Field(default=None, description="Key: tagName, value: tag")
    __properties: ClassVar[List[str]] = ["runId", "name", "source", "chromatography", "ionization", "fragmentation", "massAnalyzers", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Run from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in tags (dict)
        _field_dict = {}
        if self.tags:
            for _key_tags in self.tags:
                if self.tags[_key_tags]:
                    _field_dict[_key_tags] = self.tags[_key_tags].to_dict()
            _dict['tags'] = _field_dict
        # set to None if chromatography (nullable) is None
        # and model_fields_set contains the field
        if self.chromatography is None and "chromatography" in self.model_fields_set:
            _dict['chromatography'] = None

        # set to None if ionization (nullable) is None
        # and model_fields_set contains the field
        if self.ionization is None and "ionization" in self.model_fields_set:
            _dict['ionization'] = None

        # set to None if fragmentation (nullable) is None
        # and model_fields_set contains the field
        if self.fragmentation is None and "fragmentation" in self.model_fields_set:
            _dict['fragmentation'] = None

        # set to None if mass_analyzers (nullable) is None
        # and model_fields_set contains the field
        if self.mass_analyzers is None and "mass_analyzers" in self.model_fields_set:
            _dict['massAnalyzers'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Run from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "runId": obj.get("runId"),
            "name": obj.get("name"),
            "source": obj.get("source"),
            "chromatography": obj.get("chromatography"),
            "ionization": obj.get("ionization"),
            "fragmentation": obj.get("fragmentation"),
            "massAnalyzers": obj.get("massAnalyzers"),
            "tags": dict(
                (_k, Tag.from_dict(_v))
                for _k, _v in obj["tags"].items()
            )
            if obj.get("tags") is not None
            else None
        })
        return _obj


