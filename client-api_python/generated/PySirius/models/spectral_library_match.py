# coding: utf-8

"""
    SIRIUS Nightsky API


    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.basic_spectrum import BasicSpectrum
from PySirius.models.peak_pair import PeakPair
from PySirius.models.spectral_match_type import SpectralMatchType
from PySirius.models.spectrum_type import SpectrumType
from typing import Optional, Set
from typing_extensions import Self

class SpectralLibraryMatch(BaseModel):
    """
    SpectralLibraryMatch
    """ # noqa: E501
    spec_match_id: Optional[StrictStr] = Field(default=None, alias="specMatchId")
    rank: Optional[StrictInt] = None
    similarity: float = Field(description="Similarity between query and reference spectrum")
    shared_peaks: Optional[StrictInt] = Field(default=None, description="Number of shared/matched peaks", alias="sharedPeaks")
    shared_peak_mapping: Optional[List[PeakPair]] = Field(default=None, description="List of paired/matched peak indices.   Maps indices of peaks from the query spectrum (mass sorted)  to indices of matched peaks in the reference spectrum (mass sorted)", alias="sharedPeakMapping")
    query_spectrum_index: StrictInt = Field(alias="querySpectrumIndex")
    db_name: Optional[StrictStr] = Field(default=None, alias="dbName")
    db_id: Optional[StrictStr] = Field(default=None, alias="dbId")
    uuid: StrictInt
    splash: Optional[StrictStr] = None
    molecular_formula: Optional[StrictStr] = Field(default=None, alias="molecularFormula")
    adduct: Optional[StrictStr] = None
    exact_mass: Optional[float] = Field(default=None, alias="exactMass")
    smiles: Optional[StrictStr] = None
    type: Optional[SpectralMatchType] = None
    inchi_key: StrictStr = Field(alias="inchiKey")
    reference_spectrum_type: Optional[SpectrumType] = Field(default=None, alias="referenceSpectrumType")
    reference_spectrum: Optional[BasicSpectrum] = Field(default=None, alias="referenceSpectrum")
    query_spectrum_type: Optional[SpectrumType] = Field(default=None, alias="querySpectrumType")
    __properties: ClassVar[List[str]] = ["specMatchId", "rank", "similarity", "sharedPeaks", "sharedPeakMapping", "querySpectrumIndex", "dbName", "dbId", "uuid", "splash", "molecularFormula", "adduct", "exactMass", "smiles", "type", "inchiKey", "referenceSpectrumType", "referenceSpectrum", "querySpectrumType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpectralLibraryMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shared_peak_mapping (list)
        _items = []
        if self.shared_peak_mapping:
            for _item_shared_peak_mapping in self.shared_peak_mapping:
                if _item_shared_peak_mapping:
                    _items.append(_item_shared_peak_mapping.to_dict())
            _dict['sharedPeakMapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of reference_spectrum
        if self.reference_spectrum:
            _dict['referenceSpectrum'] = self.reference_spectrum.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpectralLibraryMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "specMatchId": obj.get("specMatchId"),
            "rank": obj.get("rank"),
            "similarity": obj.get("similarity"),
            "sharedPeaks": obj.get("sharedPeaks"),
            "sharedPeakMapping": [PeakPair.from_dict(_item) for _item in obj["sharedPeakMapping"]] if obj.get("sharedPeakMapping") is not None else None,
            "querySpectrumIndex": obj.get("querySpectrumIndex"),
            "dbName": obj.get("dbName"),
            "dbId": obj.get("dbId"),
            "uuid": obj.get("uuid"),
            "splash": obj.get("splash"),
            "molecularFormula": obj.get("molecularFormula"),
            "adduct": obj.get("adduct"),
            "exactMass": obj.get("exactMass"),
            "smiles": obj.get("smiles"),
            "type": obj.get("type"),
            "inchiKey": obj.get("inchiKey"),
            "referenceSpectrumType": obj.get("referenceSpectrumType"),
            "referenceSpectrum": BasicSpectrum.from_dict(obj["referenceSpectrum"]) if obj.get("referenceSpectrum") is not None else None,
            "querySpectrumType": obj.get("querySpectrumType")
        })
        return _obj


