# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.annotation import Annotation
from typing import Optional, Set
from typing_extensions import Self

class Trace(BaseModel):
    """
    Trace
    """ # noqa: E501
    id: Optional[StrictInt] = None
    sample_id: Optional[StrictInt] = Field(default=None, alias="sampleId")
    sample_name: Optional[StrictStr] = Field(default=None, alias="sampleName")
    label: Optional[StrictStr] = None
    intensities: Optional[List[float]] = None
    annotations: Optional[List[Annotation]] = None
    mz: Optional[float] = None
    merged: Optional[StrictBool] = None
    normalization_factor: Optional[float] = Field(default=None, description="Traces are stored with raw intensity values. The normalization factor maps them to relative intensities,  such that traces from different samples can be compared.", alias="normalizationFactor")
    noise_level: Optional[float] = Field(default=None, description="The noise level is estimated from the median noise in the surrounding scans. It can be used to  calculate signal-to-noise ratios.", alias="noiseLevel")
    __properties: ClassVar[List[str]] = ["id", "sampleId", "sampleName", "label", "intensities", "annotations", "mz", "merged", "normalizationFactor", "noiseLevel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item in self.annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['annotations'] = _items
        # set to None if sample_id (nullable) is None
        # and model_fields_set contains the field
        if self.sample_id is None and "sample_id" in self.model_fields_set:
            _dict['sampleId'] = None

        # set to None if sample_name (nullable) is None
        # and model_fields_set contains the field
        if self.sample_name is None and "sample_name" in self.model_fields_set:
            _dict['sampleName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "sampleId": obj.get("sampleId"),
            "sampleName": obj.get("sampleName"),
            "label": obj.get("label"),
            "intensities": obj.get("intensities"),
            "annotations": [Annotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "mz": obj.get("mz"),
            "merged": obj.get("merged"),
            "normalizationFactor": obj.get("normalizationFactor"),
            "noiseLevel": obj.get("noiseLevel")
        })
        return _obj


