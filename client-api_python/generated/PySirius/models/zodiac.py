# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.zodiac_edge_filter_thresholds import ZodiacEdgeFilterThresholds
from PySirius.models.zodiac_epochs import ZodiacEpochs
from typing import Optional, Set
from typing_extensions import Self

class Zodiac(BaseModel):
    """
    User/developer friendly parameter subset for the ZODIAC tool (Network base molecular formula re-ranking).  Needs results from Formula/SIRIUS Tool
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="tags whether the tool is enabled")
    considered_candidates_at300_mz: Optional[StrictInt] = Field(default=None, description="Maximum number of candidate molecular formulas (fragmentation trees computed by SIRIUS) per compound which are considered by ZODIAC for compounds below 300 m/z.", alias="consideredCandidatesAt300Mz")
    considered_candidates_at800_mz: Optional[StrictInt] = Field(default=None, description="Maximum number of candidate molecular formulas (fragmentation trees computed by SIRIUS) per compound which are considered by ZODIAC for compounds above 800 m/z.", alias="consideredCandidatesAt800Mz")
    run_in_two_steps: Optional[StrictBool] = Field(default=None, description="As default ZODIAC runs a 2-step approach. First running 'good quality compounds' only, and afterwards including the remaining.", alias="runInTwoSteps")
    edge_filter_thresholds: Optional[ZodiacEdgeFilterThresholds] = Field(default=None, alias="edgeFilterThresholds")
    gibbs_sampler_parameters: Optional[ZodiacEpochs] = Field(default=None, alias="gibbsSamplerParameters")
    __properties: ClassVar[List[str]] = ["enabled", "consideredCandidatesAt300Mz", "consideredCandidatesAt800Mz", "runInTwoSteps", "edgeFilterThresholds", "gibbsSamplerParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Zodiac from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of edge_filter_thresholds
        if self.edge_filter_thresholds:
            _dict['edgeFilterThresholds'] = self.edge_filter_thresholds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gibbs_sampler_parameters
        if self.gibbs_sampler_parameters:
            _dict['gibbsSamplerParameters'] = self.gibbs_sampler_parameters.to_dict()
        # set to None if considered_candidates_at300_mz (nullable) is None
        # and model_fields_set contains the field
        if self.considered_candidates_at300_mz is None and "considered_candidates_at300_mz" in self.model_fields_set:
            _dict['consideredCandidatesAt300Mz'] = None

        # set to None if considered_candidates_at800_mz (nullable) is None
        # and model_fields_set contains the field
        if self.considered_candidates_at800_mz is None and "considered_candidates_at800_mz" in self.model_fields_set:
            _dict['consideredCandidatesAt800Mz'] = None

        # set to None if run_in_two_steps (nullable) is None
        # and model_fields_set contains the field
        if self.run_in_two_steps is None and "run_in_two_steps" in self.model_fields_set:
            _dict['runInTwoSteps'] = None

        # set to None if edge_filter_thresholds (nullable) is None
        # and model_fields_set contains the field
        if self.edge_filter_thresholds is None and "edge_filter_thresholds" in self.model_fields_set:
            _dict['edgeFilterThresholds'] = None

        # set to None if gibbs_sampler_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.gibbs_sampler_parameters is None and "gibbs_sampler_parameters" in self.model_fields_set:
            _dict['gibbsSamplerParameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Zodiac from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "consideredCandidatesAt300Mz": obj.get("consideredCandidatesAt300Mz"),
            "consideredCandidatesAt800Mz": obj.get("consideredCandidatesAt800Mz"),
            "runInTwoSteps": obj.get("runInTwoSteps"),
            "edgeFilterThresholds": ZodiacEdgeFilterThresholds.from_dict(obj["edgeFilterThresholds"]) if obj.get("edgeFilterThresholds") is not None else None,
            "gibbsSamplerParameters": ZodiacEpochs.from_dict(obj["gibbsSamplerParameters"]) if obj.get("gibbsSamplerParameters") is not None else None
        })
        return _obj


