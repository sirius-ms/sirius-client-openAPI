# coding: utf-8

"""
    SIRIUS Nightsky API

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import os
import json
import unittest

import PySirius
from PySirius import PySiriusAPI, SiriusSDK, PagedModelCompound
from PySirius.models.compound import Compound
from PySirius.models.compound_import import CompoundImport


class TestCompoundsApi(unittest.TestCase):
    """CompoundsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SiriusSDK().attach_to_sirius(sirius_port=8080)
        self.project_id = "test_compounds_api"
        self.path_to_project = f"{os.environ.get('HOME')}/test_compounds_api.sirius"
        self.api.projects().create_project(self.project_id, self.path_to_project)

        # equals test_add_compounds
        simple_peak_json = {
            "mz": 1.23,
            "intensity": 1.23
        }

        basic_spectrum_json = {
            "precursorMz": 1.23,
            "peaks": [
                simple_peak_json
            ]
        }

        feature_import_json = {
            "ionMass": 1.23,
            "charge": 1,
            "ms1Spectra": [
                basic_spectrum_json
            ],
            "ms2Spectra": [
                basic_spectrum_json
            ]
        }

        compound_import_json = {
            "features": [
                feature_import_json
            ]
        }

        compound_import_instance = CompoundImport.from_json(json.dumps(compound_import_json))
        compound_import = [compound_import_instance]
        self.add_response = self.api.compounds().add_compounds(self.project_id, compound_import)

    def tearDown(self) -> None:
        self.api.projects().close_project(self.project_id)
        os.remove(self.path_to_project)

    def test_add_compounds(self) -> None:
        """Test case for add_compounds

        Import Compounds and its contained features.
        """
        self.assertIsInstance(self.add_response, list)
        self.assertIsInstance(self.add_response[0], Compound)


    def test_delete_compound(self) -> None:
        """Test case for delete_compound

        Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
        """
        compound_id = self.api.compounds().get_compounds(self.project_id)[0].compound_id
        response_before = self.api.compounds().get_compounds(self.project_id)
        self.api.compounds().delete_compound(self.project_id, compound_id)
        response_after = self.api.compounds().get_compounds(self.project_id)

        self.assertIsInstance(response_before, list)
        self.assertEqual(len(response_before), 1)
        self.assertIsInstance(response_before[0], Compound)

        self.assertIsInstance(response_after, list)
        self.assertEqual(len(response_after), 0)

    def test_get_compound(self) -> None:
        """Test case for get_compound

        Get compound (group of ion identities) with the given identifier from the specified project-space.
        """
        compound_id = self.api.compounds().get_compounds(self.project_id)[0].compound_id
        response = self.api.compounds().get_compound(self.project_id, compound_id)
        self.assertIsInstance(response, Compound)

    def test_get_compounds(self) -> None:
        """Test case for get_compounds

        List of all available compounds (group of ion identities) in the given project-space.
        """
        response = self.api.compounds().get_compounds(self.project_id)
        self.assertIsInstance(response, list)
        self.assertEqual(len(response), 1)
        self.assertIsInstance(response[0], Compound)

    def test_get_compounds_paged(self) -> None:
        """Test case for get_compounds_paged

        Page of available compounds (group of ion identities) in the given project-space.
        """
        response = self.api.compounds().get_compounds_paged(self.project_id)
        self.assertIsInstance(response, PagedModelCompound)

if __name__ == '__main__':
    unittest.main()
