# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.consensus_annotations_csi import ConsensusAnnotationsCSI

class TestConsensusAnnotationsCSI(unittest.TestCase):
    """ConsensusAnnotationsCSI unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsensusAnnotationsCSI:
        """Test ConsensusAnnotationsCSI
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsensusAnnotationsCSI`
        """
        model = ConsensusAnnotationsCSI()
        if include_optional:
            return ConsensusAnnotationsCSI(
                molecular_formula = '',
                compound_classes = PySirius.models.compound_classes.CompoundClasses(
                    npc_pathway = PySirius.models.compound_class.CompoundClass(
                        type = 'ClassyFire', 
                        level = '', 
                        name = '', 
                        description = '', 
                        id = 56, 
                        probability = 1.337, 
                        index = 56, ), 
                    npc_superclass = PySirius.models.compound_class.CompoundClass(
                        level = '', 
                        name = '', 
                        description = '', 
                        id = 56, 
                        probability = 1.337, 
                        index = 56, ), 
                    npc_class = , 
                    classy_fire_lineage = [
                        
                        ], 
                    classy_fire_alternatives = [
                        
                        ], ),
                supporting_feature_ids = [
                    ''
                    ],
                selection_criterion = 'MAJORITY_STRUCTURE',
                csi_finger_id_structure = PySirius.models.structure_candidate.StructureCandidate(
                    inchi_key = '', 
                    smiles = '', 
                    structure_name = '', 
                    xlog_p = 1.337, 
                    db_links = [
                        PySirius.models.db_link.DBLink(
                            name = '', 
                            id = '', )
                        ], 
                    spectral_library_matches = [
                        PySirius.models.spectral_library_match.SpectralLibraryMatch(
                            spec_match_id = '', 
                            rank = 56, 
                            similarity = 1.337, 
                            shared_peaks = 56, 
                            query_spectrum_index = 56, 
                            db_name = '', 
                            db_id = '', 
                            uuid = 56, 
                            splash = '', 
                            molecular_formula = '', 
                            adduct = '', 
                            exact_mass = '', 
                            smiles = '', 
                            candidate_in_chi_key = '', 
                            reference_spectrum = PySirius.models.basic_spectrum.BasicSpectrum(
                                name = '', 
                                ms_level = 56, 
                                collision_energy = '', 
                                precursor_mz = 1.337, 
                                scan_number = 56, 
                                peaks = [
                                    PySirius.models.simple_peak.SimplePeak(
                                        mz = 1.337, 
                                        intensity = 1.337, )
                                    ], 
                                abs_intensity_factor = 1.337, ), )
                        ], ),
                confidence_exact_match = 1.337,
                confidence_approx_match = 1.337
            )
        else:
            return ConsensusAnnotationsCSI(
        )
        """

    def testConsensusAnnotationsCSI(self):
        """Test ConsensusAnnotationsCSI"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
