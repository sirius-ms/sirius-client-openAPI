# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.job_submission import JobSubmission

class TestJobSubmission(unittest.TestCase):
    """JobSubmission unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobSubmission:
        """Test JobSubmission
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobSubmission`
        """
        model = JobSubmission()
        if include_optional:
            return JobSubmission(
                compound_ids = [
                    ''
                    ],
                aligned_feature_ids = [
                    ''
                    ],
                fallback_adducts = [
                    ''
                    ],
                enforced_adducts = [
                    ''
                    ],
                detectable_adducts = [
                    ''
                    ],
                recompute = True,
                spectra_search_params = PySirius.models.spectral_library_search.SpectralLibrarySearch(
                    enabled = True, 
                    spectra_search_dbs = [
                        ''
                        ], 
                    peak_deviation_ppm = 1.337, 
                    precursor_deviation_ppm = 1.337, 
                    scoring = 'INTENSITY', ),
                formula_id_params = PySirius.models.sirius.Sirius(
                    enabled = True, 
                    profile = 'QTOF', 
                    number_of_candidates = 56, 
                    number_of_candidates_per_ionization = 56, 
                    mass_accuracy_ms2ppm = 1.337, 
                    isotope_ms2_settings = 'IGNORE', 
                    filter_by_isotope_pattern = True, 
                    enforce_el_gordo_formula = True, 
                    perform_bottom_up_search = True, 
                    perform_denovo_below_mz = 1.337, 
                    formula_search_dbs = [
                        ''
                        ], 
                    apply_formula_constraints_to_db_and_bottom_up_search = True, 
                    enforced_formula_constraints = '', 
                    fallback_formula_constraints = '', 
                    detectable_elements = [
                        ''
                        ], 
                    ilp_timeout = PySirius.models.timeout.Timeout(
                        number_of_seconds_per_decomposition = 56, 
                        number_of_seconds_per_instance = 56, ), 
                    use_heuristic = PySirius.models.use_heuristic.UseHeuristic(
                        use_heuristic_above_mz = 56, 
                        use_only_heuristic_above_mz = 56, ), 
                    inject_spec_lib_match_formulas = True, 
                    min_score_to_inject_spec_lib_match = 1.337, 
                    min_peaks_to_inject_spec_lib_match = 56, ),
                zodiac_params = PySirius.models.zodiac.Zodiac(
                    enabled = True, 
                    considered_candidates_at300_mz = 56, 
                    considered_candidates_at800_mz = 56, 
                    run_in_two_steps = True, 
                    edge_filter_thresholds = PySirius.models.zodiac_edge_filter_thresholds.ZodiacEdgeFilterThresholds(
                        threshold_filter = 1.337, 
                        min_local_candidates = 56, 
                        min_local_connections = 56, ), 
                    gibbs_sampler_parameters = PySirius.models.zodiac_epochs.ZodiacEpochs(
                        iterations = 56, 
                        burn_in_period = 56, 
                        number_of_markov_chains = 56, ), ),
                fingerprint_prediction_params = PySirius.models.fingerprint_prediction.FingerprintPrediction(
                    enabled = True, 
                    use_score_threshold = True, 
                    always_predict_high_ref_matches = True, ),
                canopus_params = PySirius.models.canopus.Canopus(
                    enabled = True, ),
                structure_db_search_params = PySirius.models.structure_db_search.StructureDbSearch(
                    enabled = True, 
                    structure_search_dbs = [
                        ''
                        ], 
                    tag_structures_with_lipid_class = True, 
                    expansive_search_confidence_mode = 'OFF', ),
                ms_novelist_params = PySirius.models.ms_novelist.MsNovelist(
                    enabled = True, 
                    number_of_candidate_to_predict = 56, ),
                config_map = {
                    'key' : ''
                    }
            )
        else:
            return JobSubmission(
        )
        """

    def testJobSubmission(self):
        """Test JobSubmission"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
