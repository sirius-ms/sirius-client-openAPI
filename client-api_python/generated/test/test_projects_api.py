# coding: utf-8

"""
    SIRIUS Nightsky API

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import os
import unittest

from PySirius import SiriusSDK, JobOptField
from PySirius.models.job import Job
from PySirius.models.project_info import ProjectInfo
from PySirius.models.import_result import ImportResult
from PySirius.models.lcms_submission_parameters import LcmsSubmissionParameters


class TestProjectsApi(unittest.TestCase):
    """ProjectsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SiriusSDK().attach_to_sirius(sirius_port=8080)
        self.projects = self.api.projects()
        path_to_demo_data = f"{os.environ.get('HOME')}/sirius-client-openAPI/.updater/clientTests/Data"
        self.preproc_ms2_file_1 = path_to_demo_data + "/Kaempferol.ms"
        self.preproc_ms2_file_2 = path_to_demo_data + "/laudanosine.mgf"
        self.full_ms_file = path_to_demo_data + "/SPF4_Eso3_GH6_01_22643.mzXML"

        # equals test_create_project
        self.project_id = "test_projects_api"
        self.path_to_project = f"{os.environ.get('HOME')}/test_projects_api.sirius"

        if self.api.projects().get_project_without_preload_content(self.project_id).status == 404:
            if os.path.exists(self.path_to_project):
                os.remove(self.path_to_project)
            self.create_response = self.projects.create_project(self.project_id, self.path_to_project)

    def tearDown(self) -> None:
        # equals test_close_project
        self.projects.close_project(self.project_id)
        os.remove(self.path_to_project)

    def test_close_project(self) -> None:
        """Test case for close_project

        Close project-space and remove it from application
        """
        project_info = self.api.projects().create_project(project_id="test-close-project")
        try:
            before = len(self.projects.get_projects())
            self.api.projects().close_project(project_info.project_id)
            after = len(self.projects.get_projects())
            self.assertEqual(before, after+1)
        finally:
            os.remove(project_info.location)

    def test_create_project(self) -> None:
        """Test case for create_project

        Create and open a new project-space at given location and make it accessible via the given projectId.
        """
        self.assertIsInstance(self.create_response, ProjectInfo)

    def test_get_canopus_classy_fire_data(self) -> None:
        """Test case for get_canopus_classy_fire_data

        Get CANOPUS prediction vector definition for ClassyFire classes
        """
        response = self.projects.get_canopus_classy_fire_data(self.project_id, 0)
        self.assertIsInstance(response, str)

    def test_get_canopus_npc_data(self) -> None:
        """Test case for get_canopus_npc_data

        Get CANOPUS prediction vector definition for NPC classes
        """
        response = self.projects.get_canopus_npc_data(self.project_id, 0)
        self.assertIsInstance(response, str)

    def test_get_finger_id_data(self) -> None:
        """Test case for get_finger_id_data

        Get CSI:FingerID fingerprint (prediction vector) definition
        """
        response = self.projects.get_finger_id_data(self.project_id, 0)
        self.assertIsInstance(response, str)

    def test_get_project(self) -> None:
        """Test case for get_project

        Get project space info by its projectId.
        """
        response = self.projects.get_project(self.project_id)
        self.assertIsInstance(response, ProjectInfo)

    def test_get_projects(self) -> None:
        """Test case for get_projects

        List opened project spaces.
        """
        response = self.projects.get_projects()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], ProjectInfo)

    def test_import_ms_run_data(self) -> None:
        """Test case for import_ms_run_data

        Import and Align full MS-Runs from various formats into the specified project  Possible formats (mzML, mzXML)
        """
        # TODO this still has API side issues
        # input_files = [self.full_ms_file]
        # parameters = LcmsSubmissionParameters(align_lcms_runs=False)
        # response = self.projects.import_ms_run_data(project_id=self.project_id, parameters=parameters, input_files=input_files)
        # self.assertIsInstance(response, ImportResult)
        pass

    def test_import_ms_run_data_as_job(self) -> None:
        """Test case for import_ms_run_data_as_job

        Import and Align full MS-Runs from various formats into the specified project as background job.
        """
        # TODO this still has API side issues
        # input_files = [self.full_ms_file]
        # parameters = LcmsSubmissionParameters(align_lcms_runs=False)
        # response = self.projects.import_ms_run_data_as_job(project_id=self.project_id, parameters=parameters, input_files=input_files)
        # self.assertIsInstance(response, Job)
        pass

    def test_import_preprocessed_data(self) -> None:
        """Test case for import_preprocessed_data

        Import already preprocessed ms/ms data from various formats into the specified project  Possible formats (ms, mgf, cef, msp)
        """
        input_files = [self.preproc_ms2_file_1, self.preproc_ms2_file_2]
        response = self.projects.import_preprocessed_data(self.project_id, input_files=input_files)
        self.assertIsInstance(response, ImportResult)

    def test_import_preprocessed_data_as_job(self) -> None:
        """Test case for import_preprocessed_data_as_job

        Import ms/ms data from the given format into the specified project-space as background job.
        """
        input_files = [self.preproc_ms2_file_1, self.preproc_ms2_file_2]
        response = self.projects.import_preprocessed_data_as_job(self.project_id, input_files=input_files)
        self.assertIsInstance(response, Job)

    def test_open_project(self) -> None:
        """Test case for open_project

        Open an existing project-space and make it accessible via the given projectId.
        """
        response = self.projects.open_project("tomato", f"{os.environ.get('HOME')}/tomato_small.sirius")
        self.projects.close_project("tomato")
        self.assertIsInstance(response, ProjectInfo)

if __name__ == '__main__':
    unittest.main()
