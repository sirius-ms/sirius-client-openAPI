# coding: utf-8

"""
    SIRIUS Nightsky API

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import os
import unittest

from PySirius import SiriusSDK
from PySirius.api.searchable_databases_api import SearchableDatabasesApi
from PySirius.exceptions import ServiceException
from PySirius.models.searchable_database import SearchableDatabase
from PySirius.models.searchable_database_parameters import SearchableDatabaseParameters



class TestSearchableDatabasesApi(unittest.TestCase):
    """SearchableDatabasesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SiriusSDK().attach_or_start_sirius()
        self.dbs = self.api.databases()
        self.database_id = 'create_database'
        self.database_parameters = SearchableDatabaseParameters(display_name="test_db", location=f"{os.environ.get('HOME')}/test_db.siriusdb")
        self.create_response = self.dbs.create_database(self.database_id, self.database_parameters)

        path_to_demo_data = f"{os.environ.get('HOME')}/sirius-client-openAPI/.updater/clientTests/Data"
        self.test_file = path_to_demo_data + "/Kaempferol.ms"

    def tearDown(self) -> None:
        self.dbs.remove_database(self.database_id, True)

    def test_create_database(self) -> None:
        """Test case for create_database

        """
        self.assertIsInstance(self.create_response, SearchableDatabase)

    def test_get_custom_databases(self) -> None:
        """Test case for get_custom_databases

        """
        response = self.dbs.get_custom_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_get_database(self) -> None:
        """Test case for get_database

        """
        response = self.dbs.get_database(self.database_id)
        self.assertIsInstance(response, SearchableDatabase)

    def test_get_databases(self) -> None:
        """Test case for get_databases

        """
        response = self.dbs.get_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_get_included_databases(self) -> None:
        """Test case for get_included_databases

        """
        response = self.dbs.get_included_databases()
        self.assertIsInstance(response, list)
        self.assertIsInstance(response[0], SearchableDatabase)

    def test_import_into_database(self) -> None:
        """Test case for import_into_database

        Start import of structure and spectra files into the specified database.
        """
        response = self.dbs.import_into_database(self.database_id, input_files=[self.test_file])
        self.assertIsInstance(response, SearchableDatabase)

    def test_remove_database(self) -> None:
        """Test case for remove_database

        """
        remove_database_id = 'remove_database'
        database_parameters = SearchableDatabaseParameters(display_name="test_remove_db",
                                                           location=f"{os.environ.get('HOME')}/test_remove_db")
        self.create_response = self.dbs.create_database(remove_database_id, database_parameters)
        before = len(self.dbs.get_databases())
        self.dbs.remove_database(remove_database_id, True)
        after = len(self.dbs.get_databases())
        self.assertEqual(before, after+1)

    def test_update_database(self) -> None:
        """Test case for update_database

        """
        # TODO not yet supported
        # response = self.dbs.update_database(self.database_id)
        # self.assertIsInstance(response, SearchableDatabase)
        pass

if __name__ == '__main__':
    unittest.main()
