# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.trace_set import TraceSet

class TestTraceSet(unittest.TestCase):
    """TraceSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TraceSet:
        """Test TraceSet
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceSet`
        """
        model = TraceSet()
        if include_optional:
            return TraceSet(
                sample_id = 56,
                sample_name = '',
                axes = PySirius.models.axes.Axes(
                    scan_number = [
                        56
                        ], 
                    scan_ids = [
                        ''
                        ], 
                    retention_time_in_seconds = [
                        1.337
                        ], ),
                traces = [
                    PySirius.models.trace.Trace(
                        id = 56, 
                        sample_id = 56, 
                        sample_name = '', 
                        label = '', 
                        intensities = [
                            1.337
                            ], 
                        annotations = [
                            PySirius.models.annotation.Annotation(
                                type = 'FEATURE', 
                                description = '', 
                                index = 56, 
                                from = 56, 
                                to = 56, )
                            ], 
                        mz = 1.337, 
                        merged = True, 
                        normalization_factor = 1.337, 
                        noise_level = 1.337, )
                    ]
            )
        else:
            return TraceSet(
        )
        """

    def testTraceSet(self):
        """Test TraceSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
