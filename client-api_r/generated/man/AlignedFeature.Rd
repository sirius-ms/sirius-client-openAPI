% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aligned_feature.R
\docType{class}
\name{AlignedFeature}
\alias{AlignedFeature}
\title{AlignedFeature}
\format{
An \code{R6Class} generator object
}
\description{
The AlignedFeature contains the ID of a feature (aligned over runs) together with some read-only information  that might be displayed in some summary view.

AlignedFeature Class
}
\details{
Create a new AlignedFeature
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{alignedFeatureId}}{character [optional]}

\item{\code{compoundId}}{character [optional]}

\item{\code{name}}{character [optional]}

\item{\code{externalFeatureId}}{Externally provided FeatureId (e.g. by some preprocessing tool).  This FeatureId is NOT used by SIRIUS but is stored to ease mapping information back to the source. character [optional]}

\item{\code{ionMass}}{numeric [optional]}

\item{\code{charge}}{Ion mode (charge) this feature has been measured in. integer}

\item{\code{detectedAdducts}}{Adducts of this feature that have been detected during preprocessing. list(character)}

\item{\code{rtStartSeconds}}{numeric [optional]}

\item{\code{rtEndSeconds}}{numeric [optional]}

\item{\code{rtApexSeconds}}{numeric [optional]}

\item{\code{quality}}{Quality of this feature. character [optional]}

\item{\code{hasMs1}}{If true, the feature has at lease one MS1 spectrum character [optional]}

\item{\code{hasMsMs}}{If true, the feature has at lease one MS/MS spectrum character [optional]}

\item{\code{msData}}{\link{MsData} [optional]}

\item{\code{topAnnotations}}{\link{FeatureAnnotations} [optional]}

\item{\code{topAnnotationsDeNovo}}{\link{FeatureAnnotations} [optional]}

\item{\code{computing}}{Write lock for this feature. If the feature is locked no write operations are possible.  True if any computation is modifying this feature or its results character [optional]}

\item{\code{computedTools}}{\link{ComputedSubtools} [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AlignedFeature-new}{\code{AlignedFeature$new()}}
\item \href{#method-AlignedFeature-toJSON}{\code{AlignedFeature$toJSON()}}
\item \href{#method-AlignedFeature-fromJSON}{\code{AlignedFeature$fromJSON()}}
\item \href{#method-AlignedFeature-toJSONString}{\code{AlignedFeature$toJSONString()}}
\item \href{#method-AlignedFeature-fromJSONString}{\code{AlignedFeature$fromJSONString()}}
\item \href{#method-AlignedFeature-validateJSON}{\code{AlignedFeature$validateJSON()}}
\item \href{#method-AlignedFeature-toString}{\code{AlignedFeature$toString()}}
\item \href{#method-AlignedFeature-isValid}{\code{AlignedFeature$isValid()}}
\item \href{#method-AlignedFeature-getInvalidFields}{\code{AlignedFeature$getInvalidFields()}}
\item \href{#method-AlignedFeature-print}{\code{AlignedFeature$print()}}
\item \href{#method-AlignedFeature-clone}{\code{AlignedFeature$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-new"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new AlignedFeature class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$new(
  charge,
  detectedAdducts,
  alignedFeatureId = NULL,
  compoundId = NULL,
  name = NULL,
  externalFeatureId = NULL,
  ionMass = NULL,
  rtStartSeconds = NULL,
  rtEndSeconds = NULL,
  rtApexSeconds = NULL,
  quality = NULL,
  hasMs1 = NULL,
  hasMsMs = NULL,
  msData = NULL,
  topAnnotations = NULL,
  topAnnotationsDeNovo = NULL,
  computing = NULL,
  computedTools = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{charge}}{Ion mode (charge) this feature has been measured in.}

\item{\code{detectedAdducts}}{Adducts of this feature that have been detected during preprocessing.}

\item{\code{alignedFeatureId}}{alignedFeatureId}

\item{\code{compoundId}}{compoundId}

\item{\code{name}}{name}

\item{\code{externalFeatureId}}{Externally provided FeatureId (e.g. by some preprocessing tool).  This FeatureId is NOT used by SIRIUS but is stored to ease mapping information back to the source.}

\item{\code{ionMass}}{ionMass}

\item{\code{rtStartSeconds}}{rtStartSeconds}

\item{\code{rtEndSeconds}}{rtEndSeconds}

\item{\code{rtApexSeconds}}{rtApexSeconds}

\item{\code{quality}}{Quality of this feature.}

\item{\code{hasMs1}}{If true, the feature has at lease one MS1 spectrum}

\item{\code{hasMsMs}}{If true, the feature has at lease one MS/MS spectrum}

\item{\code{msData}}{msData}

\item{\code{topAnnotations}}{topAnnotations}

\item{\code{topAnnotationsDeNovo}}{topAnnotationsDeNovo}

\item{\code{computing}}{Write lock for this feature. If the feature is locked no write operations are possible.  True if any computation is modifying this feature or its results}

\item{\code{computedTools}}{computedTools}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
AlignedFeature in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of AlignedFeature
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of AlignedFeature
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
AlignedFeature in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of AlignedFeature
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of AlignedFeature
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to AlignedFeature and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-toString"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of AlignedFeature
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-print"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlignedFeature-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AlignedFeature-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlignedFeature$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
