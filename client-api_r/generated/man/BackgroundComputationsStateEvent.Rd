% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/background_computations_state_event.R
\docType{class}
\name{BackgroundComputationsStateEvent}
\alias{BackgroundComputationsStateEvent}
\title{BackgroundComputationsStateEvent}
\format{
An \code{R6Class} generator object
}
\description{
BackgroundComputationsStateEvent Class

BackgroundComputationsStateEvent Class
}
\details{
Create a new BackgroundComputationsStateEvent
}
\examples{

## ------------------------------------------------
## Method `BackgroundComputationsStateEvent$toList`
## ------------------------------------------------

# convert array of BackgroundComputationsStateEvent (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{affectedJobs}}{list(\link{Job})}

\item{\code{numberOfJobs}}{integer}

\item{\code{numberOfRunningJobs}}{integer}

\item{\code{numberOfFinishedJobs}}{integer}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BackgroundComputationsStateEvent-new}{\code{BackgroundComputationsStateEvent$new()}}
\item \href{#method-BackgroundComputationsStateEvent-toJSON}{\code{BackgroundComputationsStateEvent$toJSON()}}
\item \href{#method-BackgroundComputationsStateEvent-toList}{\code{BackgroundComputationsStateEvent$toList()}}
\item \href{#method-BackgroundComputationsStateEvent-toSimpleType}{\code{BackgroundComputationsStateEvent$toSimpleType()}}
\item \href{#method-BackgroundComputationsStateEvent-fromJSON}{\code{BackgroundComputationsStateEvent$fromJSON()}}
\item \href{#method-BackgroundComputationsStateEvent-toJSONString}{\code{BackgroundComputationsStateEvent$toJSONString()}}
\item \href{#method-BackgroundComputationsStateEvent-fromJSONString}{\code{BackgroundComputationsStateEvent$fromJSONString()}}
\item \href{#method-BackgroundComputationsStateEvent-validateJSON}{\code{BackgroundComputationsStateEvent$validateJSON()}}
\item \href{#method-BackgroundComputationsStateEvent-toString}{\code{BackgroundComputationsStateEvent$toString()}}
\item \href{#method-BackgroundComputationsStateEvent-isValid}{\code{BackgroundComputationsStateEvent$isValid()}}
\item \href{#method-BackgroundComputationsStateEvent-getInvalidFields}{\code{BackgroundComputationsStateEvent$getInvalidFields()}}
\item \href{#method-BackgroundComputationsStateEvent-print}{\code{BackgroundComputationsStateEvent$print()}}
\item \href{#method-BackgroundComputationsStateEvent-clone}{\code{BackgroundComputationsStateEvent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-new"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new BackgroundComputationsStateEvent class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$new(
  affectedJobs,
  numberOfJobs,
  numberOfRunningJobs,
  numberOfFinishedJobs,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{affectedJobs}}{affectedJobs}

\item{\code{numberOfJobs}}{numberOfJobs}

\item{\code{numberOfRunningJobs}}{numberOfRunningJobs}

\item{\code{numberOfFinishedJobs}}{numberOfFinishedJobs}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-toList"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
BackgroundComputationsStateEvent as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of BackgroundComputationsStateEvent (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert BackgroundComputationsStateEvent to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of BackgroundComputationsStateEvent
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of BackgroundComputationsStateEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BackgroundComputationsStateEvent in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of BackgroundComputationsStateEvent
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of BackgroundComputationsStateEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to BackgroundComputationsStateEvent and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-toString"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of BackgroundComputationsStateEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-print"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BackgroundComputationsStateEvent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BackgroundComputationsStateEvent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BackgroundComputationsStateEvent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
