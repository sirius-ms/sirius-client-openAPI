% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/canopus_prediction.R
\docType{class}
\name{CanopusPrediction}
\alias{CanopusPrediction}
\title{CanopusPrediction}
\format{
An \code{R6Class} generator object
}
\description{
Container class that holds the CANOPUS compound class predictions for alle predictable compound classes.  This is the full CANOPUS result.

CanopusPrediction Class
}
\details{
Create a new CanopusPrediction
}
\examples{

## ------------------------------------------------
## Method `CanopusPrediction$toList`
## ------------------------------------------------

# convert array of CanopusPrediction (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{classyFireClasses}}{All predicted ClassyFire classes list(\link{CompoundClass}) [optional]}

\item{\code{npcClasses}}{All predicted NPC classes list(\link{CompoundClass}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CanopusPrediction-new}{\code{CanopusPrediction$new()}}
\item \href{#method-CanopusPrediction-toJSON}{\code{CanopusPrediction$toJSON()}}
\item \href{#method-CanopusPrediction-toList}{\code{CanopusPrediction$toList()}}
\item \href{#method-CanopusPrediction-toSimpleType}{\code{CanopusPrediction$toSimpleType()}}
\item \href{#method-CanopusPrediction-fromJSON}{\code{CanopusPrediction$fromJSON()}}
\item \href{#method-CanopusPrediction-toJSONString}{\code{CanopusPrediction$toJSONString()}}
\item \href{#method-CanopusPrediction-fromJSONString}{\code{CanopusPrediction$fromJSONString()}}
\item \href{#method-CanopusPrediction-validateJSON}{\code{CanopusPrediction$validateJSON()}}
\item \href{#method-CanopusPrediction-toString}{\code{CanopusPrediction$toString()}}
\item \href{#method-CanopusPrediction-isValid}{\code{CanopusPrediction$isValid()}}
\item \href{#method-CanopusPrediction-getInvalidFields}{\code{CanopusPrediction$getInvalidFields()}}
\item \href{#method-CanopusPrediction-print}{\code{CanopusPrediction$print()}}
\item \href{#method-CanopusPrediction-clone}{\code{CanopusPrediction$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-new"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CanopusPrediction class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$new(classyFireClasses = NULL, npcClasses = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{classyFireClasses}}{All predicted ClassyFire classes}

\item{\code{npcClasses}}{All predicted NPC classes}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-toList"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CanopusPrediction as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of CanopusPrediction (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert CanopusPrediction to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of CanopusPrediction
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CanopusPrediction
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CanopusPrediction in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of CanopusPrediction
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CanopusPrediction
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to CanopusPrediction and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-toString"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of CanopusPrediction
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-print"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CanopusPrediction-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CanopusPrediction-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CanopusPrediction$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
