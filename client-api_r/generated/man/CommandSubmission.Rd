% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/command_submission.R
\docType{class}
\name{CommandSubmission}
\alias{CommandSubmission}
\title{CommandSubmission}
\format{
An \code{R6Class} generator object
}
\description{
CommandSubmission Class

CommandSubmission Class
}
\details{
Create a new CommandSubmission
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{compoundIds}}{Compounds that should be the input for this Job  Will be converted to the respective alignedFeatureIds for computation.   At least one compoundId or alignedFeatureId needs to be specified. list(character) [optional]}

\item{\code{alignedFeatureIds}}{Features (aligned over runs) that should be the input for this Job   At least one compoundId or alignedFeatureId needs to be specified. list(character) [optional]}

\item{\code{command}}{list(character)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CommandSubmission-new}{\code{CommandSubmission$new()}}
\item \href{#method-CommandSubmission-toJSON}{\code{CommandSubmission$toJSON()}}
\item \href{#method-CommandSubmission-fromJSON}{\code{CommandSubmission$fromJSON()}}
\item \href{#method-CommandSubmission-toJSONString}{\code{CommandSubmission$toJSONString()}}
\item \href{#method-CommandSubmission-fromJSONString}{\code{CommandSubmission$fromJSONString()}}
\item \href{#method-CommandSubmission-validateJSON}{\code{CommandSubmission$validateJSON()}}
\item \href{#method-CommandSubmission-toString}{\code{CommandSubmission$toString()}}
\item \href{#method-CommandSubmission-isValid}{\code{CommandSubmission$isValid()}}
\item \href{#method-CommandSubmission-getInvalidFields}{\code{CommandSubmission$getInvalidFields()}}
\item \href{#method-CommandSubmission-print}{\code{CommandSubmission$print()}}
\item \href{#method-CommandSubmission-clone}{\code{CommandSubmission$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-new"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CommandSubmission class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$new(
  command,
  compoundIds = NULL,
  alignedFeatureIds = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{command}}{command}

\item{\code{compoundIds}}{Compounds that should be the input for this Job  Will be converted to the respective alignedFeatureIds for computation.   At least one compoundId or alignedFeatureId needs to be specified.}

\item{\code{alignedFeatureIds}}{Features (aligned over runs) that should be the input for this Job   At least one compoundId or alignedFeatureId needs to be specified.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CommandSubmission in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of CommandSubmission
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CommandSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CommandSubmission in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of CommandSubmission
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CommandSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to CommandSubmission and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-toString"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of CommandSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-print"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandSubmission-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CommandSubmission-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandSubmission$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
