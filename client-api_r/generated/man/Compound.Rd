% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compound.R
\docType{class}
\name{Compound}
\alias{Compound}
\title{Compound}
\format{
An \code{R6Class} generator object
}
\description{
Compound Class

Compound Class
}
\details{
Create a new Compound
}
\examples{

## ------------------------------------------------
## Method `Compound$toList`
## ------------------------------------------------

# convert array of Compound (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{compoundId}}{uid of this compound Entity character [optional]}

\item{\code{name}}{Some (optional) human-readable name character [optional]}

\item{\code{rtStartSeconds}}{The merged/consensus retention time start (earliest rt) of this compound numeric [optional]}

\item{\code{rtEndSeconds}}{The merged/consensus retention time end (latest rt) of this compound numeric [optional]}

\item{\code{neutralMass}}{Neutral mass of this compound. Ion masse minus the mass of the assigned adduct of each feature of  this compound should result in the same neutral mass numeric [optional]}

\item{\code{features}}{List of aligned features (adducts) that belong to the same (this) compound list(\link{AlignedFeature}) [optional]}

\item{\code{consensusAnnotations}}{\link{ConsensusAnnotationsCSI} [optional]}

\item{\code{consensusAnnotationsDeNovo}}{\link{ConsensusAnnotationsDeNovo} [optional]}

\item{\code{customAnnotations}}{\link{ConsensusAnnotationsCSI} [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Compound-new}{\code{Compound$new()}}
\item \href{#method-Compound-toJSON}{\code{Compound$toJSON()}}
\item \href{#method-Compound-toList}{\code{Compound$toList()}}
\item \href{#method-Compound-toSimpleType}{\code{Compound$toSimpleType()}}
\item \href{#method-Compound-fromJSON}{\code{Compound$fromJSON()}}
\item \href{#method-Compound-toJSONString}{\code{Compound$toJSONString()}}
\item \href{#method-Compound-fromJSONString}{\code{Compound$fromJSONString()}}
\item \href{#method-Compound-validateJSON}{\code{Compound$validateJSON()}}
\item \href{#method-Compound-toString}{\code{Compound$toString()}}
\item \href{#method-Compound-isValid}{\code{Compound$isValid()}}
\item \href{#method-Compound-getInvalidFields}{\code{Compound$getInvalidFields()}}
\item \href{#method-Compound-print}{\code{Compound$print()}}
\item \href{#method-Compound-clone}{\code{Compound$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-new"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Compound class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$new(
  compoundId = NULL,
  name = NULL,
  rtStartSeconds = NULL,
  rtEndSeconds = NULL,
  neutralMass = NULL,
  features = NULL,
  consensusAnnotations = NULL,
  consensusAnnotationsDeNovo = NULL,
  customAnnotations = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{compoundId}}{uid of this compound Entity}

\item{\code{name}}{Some (optional) human-readable name}

\item{\code{rtStartSeconds}}{The merged/consensus retention time start (earliest rt) of this compound}

\item{\code{rtEndSeconds}}{The merged/consensus retention time end (latest rt) of this compound}

\item{\code{neutralMass}}{Neutral mass of this compound. Ion masse minus the mass of the assigned adduct of each feature of  this compound should result in the same neutral mass}

\item{\code{features}}{List of aligned features (adducts) that belong to the same (this) compound}

\item{\code{consensusAnnotations}}{consensusAnnotations}

\item{\code{consensusAnnotationsDeNovo}}{consensusAnnotationsDeNovo}

\item{\code{customAnnotations}}{customAnnotations}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Compound as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Compound (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Compound to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Compound
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Compound
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Compound in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Compound
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Compound
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Compound and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Compound
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-print"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Compound-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Compound-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Compound$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
