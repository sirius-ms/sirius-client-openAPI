% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compound_class.R
\docType{class}
\name{CompoundClass}
\alias{CompoundClass}
\title{CompoundClass}
\format{
An \code{R6Class} generator object
}
\description{
Predicted compound class with name, probability and id if available.  (ClassyFire and NPC). This can be seen as the set of classes a feature most likely belongs to

CompoundClass Class
}
\details{
Create a new CompoundClass
}
\examples{

## ------------------------------------------------
## Method `CompoundClass$toList`
## ------------------------------------------------

# convert array of CompoundClass (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{type}}{Specifies the classification ontology the CompoundClass belongs to. character [optional]}

\item{\code{level}}{Name of the level this compound class belongs to character [optional]}

\item{\code{levelIndex}}{Index of the level this compound class belongs to integer [optional]}

\item{\code{name}}{Name of the compound class. character [optional]}

\item{\code{description}}{Description of the compound class. character [optional]}

\item{\code{id}}{Unique id of the class. Might be undefined for certain classification ontologies. integer [optional]}

\item{\code{probability}}{prediction probability numeric [optional]}

\item{\code{index}}{Absolute index of this property in the predicted vector/embedding integer [optional]}

\item{\code{parentId}}{Unique id of the parent class. Might be undefined for certain classification ontologies. integer [optional]}

\item{\code{parentName}}{Name of the parent compound class. character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundClass-new}{\code{CompoundClass$new()}}
\item \href{#method-CompoundClass-toJSON}{\code{CompoundClass$toJSON()}}
\item \href{#method-CompoundClass-toList}{\code{CompoundClass$toList()}}
\item \href{#method-CompoundClass-toSimpleType}{\code{CompoundClass$toSimpleType()}}
\item \href{#method-CompoundClass-fromJSON}{\code{CompoundClass$fromJSON()}}
\item \href{#method-CompoundClass-toJSONString}{\code{CompoundClass$toJSONString()}}
\item \href{#method-CompoundClass-fromJSONString}{\code{CompoundClass$fromJSONString()}}
\item \href{#method-CompoundClass-validateJSON}{\code{CompoundClass$validateJSON()}}
\item \href{#method-CompoundClass-toString}{\code{CompoundClass$toString()}}
\item \href{#method-CompoundClass-isValid}{\code{CompoundClass$isValid()}}
\item \href{#method-CompoundClass-getInvalidFields}{\code{CompoundClass$getInvalidFields()}}
\item \href{#method-CompoundClass-print}{\code{CompoundClass$print()}}
\item \href{#method-CompoundClass-clone}{\code{CompoundClass$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundClass class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$new(
  type = NULL,
  level = NULL,
  levelIndex = NULL,
  name = NULL,
  description = NULL,
  id = NULL,
  probability = NULL,
  index = NULL,
  parentId = NULL,
  parentName = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Specifies the classification ontology the CompoundClass belongs to.}

\item{\code{level}}{Name of the level this compound class belongs to}

\item{\code{levelIndex}}{Index of the level this compound class belongs to}

\item{\code{name}}{Name of the compound class.}

\item{\code{description}}{Description of the compound class.}

\item{\code{id}}{Unique id of the class. Might be undefined for certain classification ontologies.}

\item{\code{probability}}{prediction probability}

\item{\code{index}}{Absolute index of this property in the predicted vector/embedding}

\item{\code{parentId}}{Unique id of the parent class. Might be undefined for certain classification ontologies.}

\item{\code{parentName}}{Name of the parent compound class.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-toList"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CompoundClass as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of CompoundClass (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert CompoundClass to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of CompoundClass
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundClass
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CompoundClass in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of CompoundClass
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundClass
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to CompoundClass and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-toString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of CompoundClass
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-print"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClass-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClass-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClass$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
