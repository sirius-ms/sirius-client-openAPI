% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compound_classes.R
\docType{class}
\name{CompoundClasses}
\alias{CompoundClasses}
\title{CompoundClasses}
\format{
An \code{R6Class} generator object
}
\description{
Container class that holds the most likely compound class for different levels of each ontology for a  certain Compound/Feature/FormulaCandidate/PredictedFingerprint.

CompoundClasses Class
}
\details{
Create a new CompoundClasses
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{npcPathway}}{\link{CompoundClass} [optional]}

\item{\code{npcSuperclass}}{\link{CompoundClass} [optional]}

\item{\code{npcClass}}{\link{CompoundClass} [optional]}

\item{\code{classyFireLineage}}{Most likely ClassyFire lineage from ordered from least specific to most specific class  classyFireLineage.get(classyFireLineage.size() - 1) gives the most specific ClassyFire compound class annotation list(\link{CompoundClass}) [optional]}

\item{\code{classyFireAlternatives}}{Alternative ClassyFire classes with high probability that do not fit into the linage list(\link{CompoundClass}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundClasses-new}{\code{CompoundClasses$new()}}
\item \href{#method-CompoundClasses-toJSON}{\code{CompoundClasses$toJSON()}}
\item \href{#method-CompoundClasses-fromJSON}{\code{CompoundClasses$fromJSON()}}
\item \href{#method-CompoundClasses-toJSONString}{\code{CompoundClasses$toJSONString()}}
\item \href{#method-CompoundClasses-fromJSONString}{\code{CompoundClasses$fromJSONString()}}
\item \href{#method-CompoundClasses-validateJSON}{\code{CompoundClasses$validateJSON()}}
\item \href{#method-CompoundClasses-toString}{\code{CompoundClasses$toString()}}
\item \href{#method-CompoundClasses-isValid}{\code{CompoundClasses$isValid()}}
\item \href{#method-CompoundClasses-getInvalidFields}{\code{CompoundClasses$getInvalidFields()}}
\item \href{#method-CompoundClasses-print}{\code{CompoundClasses$print()}}
\item \href{#method-CompoundClasses-clone}{\code{CompoundClasses$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundClasses class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$new(
  npcPathway = NULL,
  npcSuperclass = NULL,
  npcClass = NULL,
  classyFireLineage = NULL,
  classyFireAlternatives = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{npcPathway}}{npcPathway}

\item{\code{npcSuperclass}}{npcSuperclass}

\item{\code{npcClass}}{npcClass}

\item{\code{classyFireLineage}}{Most likely ClassyFire lineage from ordered from least specific to most specific class  classyFireLineage.get(classyFireLineage.size() - 1) gives the most specific ClassyFire compound class annotation}

\item{\code{classyFireAlternatives}}{Alternative ClassyFire classes with high probability that do not fit into the linage}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CompoundClasses in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of CompoundClasses
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundClasses
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CompoundClasses in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of CompoundClasses
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundClasses
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to CompoundClasses and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-toString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of CompoundClasses
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-print"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundClasses-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundClasses-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundClasses$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
