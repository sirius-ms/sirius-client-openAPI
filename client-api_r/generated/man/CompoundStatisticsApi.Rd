% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compound_statistics_api.R
\docType{class}
\name{CompoundStatisticsApi}
\alias{CompoundStatisticsApi}
\title{CompoundStatistics operations}
\format{
An \code{R6Class} generator object
}
\description{
CompoundStatisticsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.1
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  ComputeCompoundFoldChangesExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to compute the fold change in.
var_left_group_name <- "left_group_name_example" # character | name of the left tag group.
var_right_group_name <- "right_group_name_example" # character | name of the right tag group.
var_aggregation <- "AVG" # character | aggregation type. (Optional)
var_quantification <- "APEX_INTENSITY" # character | quantification type. (Optional)
var_opt_fields <- c("none") # array[character] | job opt fields. (Optional)

#[EXPERIMENTAL] Compute the fold change between two groups of runs
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ComputeCompoundFoldChangesExperimental(var_project_id, var_left_group_name, var_right_group_name, aggregation = var_aggregation, quantification = var_quantification, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$compound_statistics_api$ComputeCompoundFoldChangesExperimental(var_project_id, var_left_group_name, var_right_group_name, aggregation = var_aggregation, quantification = var_quantification, opt_fields = var_opt_fields)
dput(result)


####################  DeleteCompoundFoldChangesExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_left_group_name <- "left_group_name_example" # character | name of the left group.
var_right_group_name <- "right_group_name_example" # character | name of the right group.
var_aggregation <- "AVG" # character |  (Optional)
var_quantification <- "APEX_INTENSITY" # character |  (Optional)

#[EXPERIMENTAL] Delete fold changes
api_instance <- rsirius_api$new()

api_instance$compound_statistics_api$DeleteCompoundFoldChangesExperimental(var_project_id, var_left_group_name, var_right_group_name, aggregation = var_aggregation, quantification = var_quantification)


####################  GetCompoundFoldChangeTableExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aggregation <- "AVG" # character | aggregation type. (Optional)
var_quantification <- "APEX_INTENSITY" # character | quantification type. (Optional)

#[EXPERIMENTAL] Get table of all fold changes in the project space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompoundFoldChangeTableExperimental(var_project_id, aggregation = var_aggregation, quantification = var_quantificationdata_file = "result.txt")
result <- api_instance$compound_statistics_api$GetCompoundFoldChangeTableExperimental(var_project_id, aggregation = var_aggregation, quantification = var_quantification)
dput(result)


####################  GetFoldChangesByCompoundExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_object_id <- "object_id_example" # character | id of the object the fold changes are assigned to.

#[EXPERIMENTAL] List all fold changes that are associated with an object
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFoldChangesByCompoundExperimental(var_project_id, var_object_iddata_file = "result.txt")
result <- api_instance$compound_statistics_api$GetFoldChangesByCompoundExperimental(var_project_id, var_object_id)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundStatisticsApi-new}{\code{CompoundStatisticsApi$new()}}
\item \href{#method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimental}{\code{CompoundStatisticsApi$ComputeCompoundFoldChangesExperimental()}}
\item \href{#method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimentalWithHttpInfo}{\code{CompoundStatisticsApi$ComputeCompoundFoldChangesExperimentalWithHttpInfo()}}
\item \href{#method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimental}{\code{CompoundStatisticsApi$DeleteCompoundFoldChangesExperimental()}}
\item \href{#method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimentalWithHttpInfo}{\code{CompoundStatisticsApi$DeleteCompoundFoldChangesExperimentalWithHttpInfo()}}
\item \href{#method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimental}{\code{CompoundStatisticsApi$GetCompoundFoldChangeTableExperimental()}}
\item \href{#method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimentalWithHttpInfo}{\code{CompoundStatisticsApi$GetCompoundFoldChangeTableExperimentalWithHttpInfo()}}
\item \href{#method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimental}{\code{CompoundStatisticsApi$GetFoldChangesByCompoundExperimental()}}
\item \href{#method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimentalWithHttpInfo}{\code{CompoundStatisticsApi$GetFoldChangesByCompoundExperimentalWithHttpInfo()}}
\item \href{#method-CompoundStatisticsApi-clone}{\code{CompoundStatisticsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundStatisticsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimental}{}}}
\subsection{Method \code{ComputeCompoundFoldChangesExperimental()}}{
[EXPERIMENTAL] Compute the fold change between two groups of runs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$ComputeCompoundFoldChangesExperimental(
  project_id,
  left_group_name,
  right_group_name,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to compute the fold change in.}

\item{\code{left_group_name}}{name of the left tag group.}

\item{\code{right_group_name}}{name of the right tag group.}

\item{\code{aggregation}}{(optional) aggregation type. (default value: "AVG")}

\item{\code{quantification}}{(optional) quantification type. (default value: "APEX_INTENSITY")}

\item{\code{opt_fields}}{(optional) job opt fields. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-ComputeCompoundFoldChangesExperimentalWithHttpInfo}{}}}
\subsection{Method \code{ComputeCompoundFoldChangesExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Compute the fold change between two groups of runs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$ComputeCompoundFoldChangesExperimentalWithHttpInfo(
  project_id,
  left_group_name,
  right_group_name,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to compute the fold change in.}

\item{\code{left_group_name}}{name of the left tag group.}

\item{\code{right_group_name}}{name of the right tag group.}

\item{\code{aggregation}}{(optional) aggregation type. (default value: "AVG")}

\item{\code{quantification}}{(optional) quantification type. (default value: "APEX_INTENSITY")}

\item{\code{opt_fields}}{(optional) job opt fields. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimental}{}}}
\subsection{Method \code{DeleteCompoundFoldChangesExperimental()}}{
[EXPERIMENTAL] Delete fold changes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$DeleteCompoundFoldChangesExperimental(
  project_id,
  left_group_name,
  right_group_name,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{left_group_name}}{name of the left group.}

\item{\code{right_group_name}}{name of the right group.}

\item{\code{aggregation}}{(optional) No description (default value: "AVG")}

\item{\code{quantification}}{(optional) No description (default value: "APEX_INTENSITY")}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-DeleteCompoundFoldChangesExperimentalWithHttpInfo}{}}}
\subsection{Method \code{DeleteCompoundFoldChangesExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Delete fold changes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$DeleteCompoundFoldChangesExperimentalWithHttpInfo(
  project_id,
  left_group_name,
  right_group_name,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{left_group_name}}{name of the left group.}

\item{\code{right_group_name}}{name of the right group.}

\item{\code{aggregation}}{(optional) No description (default value: "AVG")}

\item{\code{quantification}}{(optional) No description (default value: "APEX_INTENSITY")}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimental}{}}}
\subsection{Method \code{GetCompoundFoldChangeTableExperimental()}}{
[EXPERIMENTAL] Get table of all fold changes in the project space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$GetCompoundFoldChangeTableExperimental(
  project_id,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aggregation}}{(optional) aggregation type. (default value: "AVG")}

\item{\code{quantification}}{(optional) quantification type. (default value: "APEX_INTENSITY")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
StatisticsTable
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-GetCompoundFoldChangeTableExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundFoldChangeTableExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get table of all fold changes in the project space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$GetCompoundFoldChangeTableExperimentalWithHttpInfo(
  project_id,
  aggregation = "AVG",
  quantification = "APEX_INTENSITY",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aggregation}}{(optional) aggregation type. (default value: "AVG")}

\item{\code{quantification}}{(optional) quantification type. (default value: "APEX_INTENSITY")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (StatisticsTable) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimental}{}}}
\subsection{Method \code{GetFoldChangesByCompoundExperimental()}}{
[EXPERIMENTAL] List all fold changes that are associated with an object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$GetFoldChangesByCompoundExperimental(
  project_id,
  object_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{object_id}}{id of the object the fold changes are assigned to.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[FoldChange]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-GetFoldChangesByCompoundExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetFoldChangesByCompoundExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] List all fold changes that are associated with an object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$GetFoldChangesByCompoundExperimentalWithHttpInfo(
  project_id,
  object_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{object_id}}{id of the object the fold changes are assigned to.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[FoldChange]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundStatisticsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundStatisticsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundStatisticsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
