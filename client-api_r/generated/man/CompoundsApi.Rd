% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compounds_api.R
\docType{class}
\name{CompoundsApi}
\alias{CompoundsApi}
\title{Compounds operations}
\format{
An \code{R6Class} generator object
}
\description{
CompoundsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 2.1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ AddCompounds } \emph{ Import Compounds and its contained features. }
Import Compounds and its contained features. Compounds and Features must not exist in the project.  Otherwise, they will exist twice.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_import list( \link{CompoundImport} )
\item \emph{ @param } profile \link{InstrumentProfile}
\item \emph{ @param } opt_fields list( \link{CompoundOptField} )
\item \emph{ @param } opt_fields_features list( \link{AlignedFeatureOptField} )
\item \emph{ @returnType } list( \link{Compound} ) \cr


\item status code : 200 | the Compounds that have been imported with specified optional fields

\item return type : array[Compound]
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteCompound } \emph{ Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space. }
Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character


\item status code : 200 | OK


\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompound } \emph{ Get compound (group of ion identities) with the given identifier from the specified project-space. }
Get compound (group of ion identities) with the given identifier from the specified project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } opt_fields list( \link{CompoundOptField} )
\item \emph{ @param } opt_fields_features list( \link{AlignedFeatureOptField} )
\item \emph{ @returnType } \link{Compound} \cr


\item status code : 200 | Compounds with additional optional fields (if specified).

\item return type : Compound
\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompoundTraces } \emph{  }

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } feature_id character
\item \emph{ @returnType } \link{TraceSet} \cr


\item status code : 200 | OK

\item return type : TraceSet
\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompounds } \emph{ List of all available compounds (group of ion identities) in the given project-space. }
List of all available compounds (group of ion identities) in the given project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } opt_fields list( \link{CompoundOptField} )
\item \emph{ @param } opt_fields_features list( \link{AlignedFeatureOptField} )
\item \emph{ @returnType } list( \link{Compound} ) \cr


\item status code : 200 | Compounds with additional optional fields (if specified).

\item return type : array[Compound]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompoundsPaged } \emph{ Page of available compounds (group of ion identities) in the given project-space. }
Page of available compounds (group of ion identities) in the given project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } page integer
\item \emph{ @param } size integer
\item \emph{ @param } sort list( character )
\item \emph{ @param } opt_fields list( \link{CompoundOptField} )
\item \emph{ @param } opt_fields_features list( \link{AlignedFeatureOptField} )
\item \emph{ @returnType } \link{PageCompound} \cr


\item status code : 200 | Compounds with additional optional fields (if specified).

\item return type : PageCompound
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  AddCompounds  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_compound_import <- c(CompoundImport$new(c(FeatureImport$new(123, 123, "name_example", "externalFeatureId_example", c("detectedAdducts_example"), 123, 123, 123, DataQuality$new(), BasicSpectrum$new(c(SimplePeak$new(123, 123)), "name_example", 123, "collisionEnergy_example", 123, 123, 123), c(BasicSpectrum$new(c(SimplePeak$new(..., ...)), "name_example", 123, "collisionEnergy_example", 123, 123, 123)), c(BasicSpectrum$new(c(SimplePeak$new(..., ...)), "name_example", 123, "collisionEnergy_example", 123, 123, 123)))), "name_example")) # array[CompoundImport] | the compound data to be imported
var_profile <- InstrumentProfile$new() # InstrumentProfile | profile describing the instrument used to measure the data. Used to merge spectra. (Optional)
var_opt_fields <- c(CompoundOptField$new()) # array[CompoundOptField] | set of optional fields to be included. Use 'none' to override defaults. (Optional)
var_opt_fields_features <- c(AlignedFeatureOptField$new()) # array[AlignedFeatureOptField] | set of optional fields of the nested features to be included. Use 'none' to override defaults. (Optional)

#Import Compounds and its contained features.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$AddCompounds(var_project_id, var_compound_import, profile = var_profile, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_featuresdata_file = "result.txt")
result <- api_instance$compounds_api$AddCompounds(var_project_id, var_compound_import, profile = var_profile, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_features)
dput(result)


####################  DeleteCompound  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_compound_id <- "compound_id_example" # character | identifier of the compound to delete.

#Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
api_instance <- rsirius_api$new()

api_instance$compounds_api$DeleteCompound(var_project_id, var_compound_id)


####################  GetCompound  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | identifier of the compound (group of ion identities) to access.
var_opt_fields <- c(CompoundOptField$new()) # array[CompoundOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)
var_opt_fields_features <- c(AlignedFeatureOptField$new()) # array[AlignedFeatureOptField] |  (Optional)

#Get compound (group of ion identities) with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompound(var_project_id, var_compound_id, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_featuresdata_file = "result.txt")
result <- api_instance$compounds_api$GetCompound(var_project_id, var_compound_id, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_features)
dput(result)


####################  GetCompoundTraces  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | 
var_compound_id <- "compound_id_example" # character | 
var_feature_id <- "" # character |  (Optional)

api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompoundTraces(var_project_id, var_compound_id, feature_id = var_feature_iddata_file = "result.txt")
result <- api_instance$compounds_api$GetCompoundTraces(var_project_id, var_compound_id, feature_id = var_feature_id)
dput(result)


####################  GetCompounds  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_opt_fields <- c(CompoundOptField$new()) # array[CompoundOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)
var_opt_fields_features <- c(AlignedFeatureOptField$new()) # array[AlignedFeatureOptField] |  (Optional)

#List of all available compounds (group of ion identities) in the given project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompounds(var_project_id, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_featuresdata_file = "result.txt")
result <- api_instance$compounds_api$GetCompounds(var_project_id, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_features)
dput(result)


####################  GetCompoundsPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c(CompoundOptField$new()) # array[CompoundOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)
var_opt_fields_features <- c(AlignedFeatureOptField$new()) # array[AlignedFeatureOptField] |  (Optional)

#Page of available compounds (group of ion identities) in the given project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompoundsPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_featuresdata_file = "result.txt")
result <- api_instance$compounds_api$GetCompoundsPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields, opt_fields_features = var_opt_fields_features)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundsApi-new}{\code{CompoundsApi$new()}}
\item \href{#method-CompoundsApi-AddCompounds}{\code{CompoundsApi$AddCompounds()}}
\item \href{#method-CompoundsApi-AddCompoundsWithHttpInfo}{\code{CompoundsApi$AddCompoundsWithHttpInfo()}}
\item \href{#method-CompoundsApi-DeleteCompound}{\code{CompoundsApi$DeleteCompound()}}
\item \href{#method-CompoundsApi-DeleteCompoundWithHttpInfo}{\code{CompoundsApi$DeleteCompoundWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompound}{\code{CompoundsApi$GetCompound()}}
\item \href{#method-CompoundsApi-GetCompoundWithHttpInfo}{\code{CompoundsApi$GetCompoundWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompoundTraces}{\code{CompoundsApi$GetCompoundTraces()}}
\item \href{#method-CompoundsApi-GetCompoundTracesWithHttpInfo}{\code{CompoundsApi$GetCompoundTracesWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompounds}{\code{CompoundsApi$GetCompounds()}}
\item \href{#method-CompoundsApi-GetCompoundsWithHttpInfo}{\code{CompoundsApi$GetCompoundsWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompoundsPaged}{\code{CompoundsApi$GetCompoundsPaged()}}
\item \href{#method-CompoundsApi-GetCompoundsPagedWithHttpInfo}{\code{CompoundsApi$GetCompoundsPagedWithHttpInfo()}}
\item \href{#method-CompoundsApi-clone}{\code{CompoundsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-AddCompounds"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-AddCompounds}{}}}
\subsection{Method \code{AddCompounds()}}{
Import Compounds and its contained features.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$AddCompounds(
  project_id,
  compound_import,
  profile = NULL,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{compound_import}}{the compound data to be imported}

\item{\code{profile}}{(optional) profile describing the instrument used to measure the data. Used to merge spectra.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) set of optional fields of the nested features to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Compound]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-AddCompoundsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-AddCompoundsWithHttpInfo}{}}}
\subsection{Method \code{AddCompoundsWithHttpInfo()}}{
Import Compounds and its contained features.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$AddCompoundsWithHttpInfo(
  project_id,
  compound_import,
  profile = NULL,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{compound_import}}{the compound data to be imported}

\item{\code{profile}}{(optional) profile describing the instrument used to measure the data. Used to merge spectra.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) set of optional fields of the nested features to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Compound]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-DeleteCompound"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-DeleteCompound}{}}}
\subsection{Method \code{DeleteCompound()}}{
Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$DeleteCompound(project_id, compound_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{compound_id}}{identifier of the compound to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-DeleteCompoundWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-DeleteCompoundWithHttpInfo}{}}}
\subsection{Method \code{DeleteCompoundWithHttpInfo()}}{
Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$DeleteCompoundWithHttpInfo(project_id, compound_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{compound_id}}{identifier of the compound to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompound"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompound}{}}}
\subsection{Method \code{GetCompound()}}{
Get compound (group of ion identities) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompound(
  project_id,
  compound_id,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{identifier of the compound (group of ion identities) to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Compound
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundWithHttpInfo()}}{
Get compound (group of ion identities) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundWithHttpInfo(
  project_id,
  compound_id,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{identifier of the compound (group of ion identities) to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Compound) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundTraces"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundTraces}{}}}
\subsection{Method \code{GetCompoundTraces()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundTraces(
  project_id,
  compound_id,
  feature_id = "",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{compound_id}}{}

\item{\code{feature_id}}{(optional) No description (default value: "")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TraceSet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundTracesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundTracesWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundTracesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundTracesWithHttpInfo(
  project_id,
  compound_id,
  feature_id = "",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{compound_id}}{}

\item{\code{feature_id}}{(optional) No description (default value: "")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TraceSet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompounds"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompounds}{}}}
\subsection{Method \code{GetCompounds()}}{
List of all available compounds (group of ion identities) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompounds(
  project_id,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Compound]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundsWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundsWithHttpInfo()}}{
List of all available compounds (group of ion identities) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundsWithHttpInfo(
  project_id,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Compound]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundsPaged"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundsPaged}{}}}
\subsection{Method \code{GetCompoundsPaged()}}{
Page of available compounds (group of ion identities) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundsPaged(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PageCompound
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundsPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundsPagedWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundsPagedWithHttpInfo()}}{
Page of available compounds (group of ion identities) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundsPagedWithHttpInfo(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  opt_fields_features = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{opt_fields_features}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PageCompound) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
