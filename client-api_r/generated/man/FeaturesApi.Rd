% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/features_api.R
\docType{class}
\name{FeaturesApi}
\alias{FeaturesApi}
\title{Features operations}
\format{
An \code{R6Class} generator object
}
\description{
FeaturesApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.0
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  AddAlignedFeatures  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_feature_import <- c(FeatureImport$new(123, 123, "name_example", "externalFeatureId_example", c("detectedAdducts_example"), 123, 123, 123, "NOT_APPLICABLE", BasicSpectrum$new(c(SimplePeak$new(123, 123)), "name_example", 123, "collisionEnergy_example", "instrument_example", 123, 123, 123), c(BasicSpectrum$new(c(SimplePeak$new(123, 123)), "name_example", 123, "collisionEnergy_example", "instrument_example", 123, 123, 123)), c(BasicSpectrum$new(c(SimplePeak$new(123, 123)), "name_example", 123, "collisionEnergy_example", "instrument_example", 123, 123, 123)))) # array[FeatureImport] | the feature data to be imported
var_profile <- "profile_example" # character | profile describing the instrument used to measure the data. Used to merge spectra. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' to override defaults. (Optional)

#Import (aligned) features into the project.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$AddAlignedFeatures(var_project_id, var_feature_import, profile = var_profile, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$AddAlignedFeatures(var_project_id, var_feature_import, profile = var_profile, opt_fields = var_opt_fields)
dput(result)


####################  DeleteAlignedFeature  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | identifier of feature (aligned over runs) to delete.

#Delete feature (aligned over runs) with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

api_instance$features_api$DeleteAlignedFeature(var_project_id, var_aligned_feature_id)


####################  DeleteAlignedFeatures  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_request_body <- c("property_example") # array[character] | 

#Delete feature (aligned over runs) with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

api_instance$features_api$DeleteAlignedFeatures(var_project_id, var_request_body)


####################  GetAdductNetworkWithMergedTracesExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | one feature that is considered the main feature of the adduct network

#EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetAdductNetworkWithMergedTracesExperimental(var_project_id, var_aligned_feature_iddata_file = "result.txt")
result <- api_instance$features_api$GetAdductNetworkWithMergedTracesExperimental(var_project_id, var_aligned_feature_id)
dput(result)


####################  GetAlignedFeature  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | identifier of feature (aligned over runs) to access.
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get feature (aligned over runs) with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetAlignedFeature(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetAlignedFeature(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fields)
dput(result)


####################  GetAlignedFeatures  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get all available features (aligned over runs) in the given project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetAlignedFeatures(var_project_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetAlignedFeatures(var_project_id, opt_fields = var_opt_fields)
dput(result)


####################  GetAlignedFeaturesPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get all available features (aligned over runs) in the given project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetAlignedFeaturesPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetAlignedFeaturesPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetAlignedFeaturesQualityExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | identifier of feature (aligned over runs) to access.

#EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetAlignedFeaturesQualityExperimental(var_project_id, var_aligned_feature_iddata_file = "result.txt")
result <- api_instance$features_api$GetAlignedFeaturesQualityExperimental(var_project_id, var_aligned_feature_id)
dput(result)


####################  GetBestMatchingCompoundClasses  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Best matching compound classes,  Set of the highest scoring compound classes (CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetBestMatchingCompoundClasses(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetBestMatchingCompoundClasses(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetCanopusPrediction  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCanopusPrediction(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetCanopusPrediction(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetDeNovoStructureCandidates  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDeNovoStructureCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetDeNovoStructureCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fields)
dput(result)


####################  GetDeNovoStructureCandidatesByFormula  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDeNovoStructureCandidatesByFormula(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetDeNovoStructureCandidatesByFormula(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fields)
dput(result)


####################  GetDeNovoStructureCandidatesByFormulaPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDeNovoStructureCandidatesByFormulaPaged(var_project_id, var_aligned_feature_id, var_formula_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetDeNovoStructureCandidatesByFormulaPaged(var_project_id, var_aligned_feature_id, var_formula_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetDeNovoStructureCandidatesPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDeNovoStructureCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetDeNovoStructureCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetFingerprintPrediction  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perform structure database search and predict compound classes.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFingerprintPrediction(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetFingerprintPrediction(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetFormulaAnnotatedMsMsData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns MS/MS Spectrum (Merged MS/MS and measured MS/MS) which is annotated with fragments and losses  for the given formula result identifier  These annotations are only available if a fragmentation tree and the structure candidate are available.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaAnnotatedMsMsData(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetFormulaAnnotatedMsMsData(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetFormulaAnnotatedSpectrum  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_spectrum_index <- -1 # integer | index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (Optional)

#Returns a fragmentation spectrum (e.g. Merged MS/MS) which is annotated with fragments and losses for the given formula result identifier  These annotations are only available if a fragmentation tree is available.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaAnnotatedSpectrum(var_project_id, var_aligned_feature_id, var_formula_id, spectrum_index = var_spectrum_indexdata_file = "result.txt")
result <- api_instance$features_api$GetFormulaAnnotatedSpectrum(var_project_id, var_aligned_feature_id, var_formula_id, spectrum_index = var_spectrum_index)
dput(result)


####################  GetFormulaCandidate  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#FormulaResultContainers for the given 'formulaId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaCandidate(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetFormulaCandidate(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fields)
dput(result)


####################  GetFormulaCandidates  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#List of FormulaResultContainers available for this feature with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetFormulaCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fields)
dput(result)


####################  GetFormulaCandidatesPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Page of FormulaResultContainers available for this feature with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetFormulaCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetFragTree  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFragTree(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetFragTree(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetIsotopePatternAnnotation  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns Isotope pattern information (simulated isotope pattern, measured isotope pattern, isotope pattern highlighting)  for the given formula result identifier.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetIsotopePatternAnnotation(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetIsotopePatternAnnotation(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetLipidAnnotation  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns Lipid annotation (ElGordo) for the given formula result identifier.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetLipidAnnotation(var_project_id, var_aligned_feature_id, var_formula_iddata_file = "result.txt")
result <- api_instance$features_api$GetLipidAnnotation(var_project_id, var_aligned_feature_id, var_formula_id)
dput(result)


####################  GetMsData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the Mass Spec data belong sto.

#Mass Spec data (input data) for the given 'alignedFeatureId' .
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetMsData(var_project_id, var_aligned_feature_iddata_file = "result.txt")
result <- api_instance$features_api$GetMsData(var_project_id, var_aligned_feature_id)
dput(result)


####################  GetQuantificationExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature which intensities should be read out
var_type <- "APEX_HEIGHT" # character | quantification type. Currently, only APEX_HEIGHT is supported, which is the intensity of the feature at its apex. (Optional)

#EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetQuantificationExperimental(var_project_id, var_aligned_feature_id, type = var_typedata_file = "result.txt")
result <- api_instance$features_api$GetQuantificationExperimental(var_project_id, var_aligned_feature_id, type = var_type)
dput(result)


####################  GetSpectralLibraryMatch  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_match_id <- "match_id_example" # character | 
var_opt_fields <- c("none") # array[character] |  (Optional)

#List of spectral library matches for the given 'alignedFeatureId'.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetSpectralLibraryMatch(var_project_id, var_aligned_feature_id, var_match_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetSpectralLibraryMatch(var_project_id, var_aligned_feature_id, var_match_id, opt_fields = var_opt_fields)
dput(result)


####################  GetSpectralLibraryMatches  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_min_shared_peaks <- 1 # integer |  (Optional)
var_min_similarity <- 0.2 # numeric |  (Optional)
var_inchi_key <- "" # character |  (Optional)
var_opt_fields <- c("none") # array[character] |  (Optional)

#List of spectral library matches for the given 'alignedFeatureId'.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetSpectralLibraryMatches(var_project_id, var_aligned_feature_id, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_key, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetSpectralLibraryMatches(var_project_id, var_aligned_feature_id, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_key, opt_fields = var_opt_fields)
dput(result)


####################  GetSpectralLibraryMatchesPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_min_shared_peaks <- 1 # integer |  (Optional)
var_min_similarity <- 0.2 # numeric |  (Optional)
var_inchi_key <- "" # character |  (Optional)
var_opt_fields <- c("none") # array[character] |  (Optional)

#Page of spectral library matches for the given 'alignedFeatureId'.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetSpectralLibraryMatchesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_key, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetSpectralLibraryMatchesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_key, opt_fields = var_opt_fields)
dput(result)


####################  GetSpectralLibraryMatchesSummary  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_min_shared_peaks <- 1 # integer | min threshold of shared peaks. (Optional)
var_min_similarity <- 0.2 # numeric | min spectral similarity threshold. (Optional)
var_inchi_key <- "" # character | 2D inchi key of the compound in the structure database. (Optional)

#Summarize matched reference spectra for the given 'alignedFeatureId'.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetSpectralLibraryMatchesSummary(var_project_id, var_aligned_feature_id, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_keydata_file = "result.txt")
result <- api_instance$features_api$GetSpectralLibraryMatchesSummary(var_project_id, var_aligned_feature_id, min_shared_peaks = var_min_shared_peaks, min_similarity = var_min_similarity, inchi_key = var_inchi_key)
dput(result)


####################  GetStructureAnnotatedMsDataExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_inchi_key <- "inchi_key_example" # character | 2d InChIKey of the structure candidate to be used to annotate the spectrum annotation

#EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureAnnotatedMsDataExperimental(var_project_id, var_aligned_feature_id, var_formula_id, var_inchi_keydata_file = "result.txt")
result <- api_instance$features_api$GetStructureAnnotatedMsDataExperimental(var_project_id, var_aligned_feature_id, var_formula_id, var_inchi_key)
dput(result)


####################  GetStructureAnnotatedSpectrumExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_inchi_key <- "inchi_key_example" # character | 2d InChIKey of the structure candidate to be used to annotate the spectrum annotation
var_spectrum_index <- -1 # integer | index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (Optional)

#EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureAnnotatedSpectrumExperimental(var_project_id, var_aligned_feature_id, var_formula_id, var_inchi_key, spectrum_index = var_spectrum_indexdata_file = "result.txt")
result <- api_instance$features_api$GetStructureAnnotatedSpectrumExperimental(var_project_id, var_aligned_feature_id, var_formula_id, var_inchi_key, spectrum_index = var_spectrum_index)
dput(result)


####################  GetStructureCandidates  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#List of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetStructureCandidates(var_project_id, var_aligned_feature_id, opt_fields = var_opt_fields)
dput(result)


####################  GetStructureCandidatesByFormula  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#List of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureCandidatesByFormula(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetStructureCandidatesByFormula(var_project_id, var_aligned_feature_id, var_formula_id, opt_fields = var_opt_fields)
dput(result)


####################  GetStructureCandidatesByFormulaPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Page of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureCandidatesByFormulaPaged(var_project_id, var_aligned_feature_id, var_formula_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetStructureCandidatesByFormulaPaged(var_project_id, var_aligned_feature_id, var_formula_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetStructureCandidatesPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature (aligned over runs) the structure candidates belong to.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Page of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$features_api$GetStructureCandidatesPaged(var_project_id, var_aligned_feature_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetTracesExperimental  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_aligned_feature_id <- "aligned_feature_id_example" # character | feature which intensities should be read out
var_include_all <- FALSE # character | when true, return all samples that belong to the same merged trace. when false, only return samples which contain the aligned feature. (Optional)

#EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetTracesExperimental(var_project_id, var_aligned_feature_id, include_all = var_include_alldata_file = "result.txt")
result <- api_instance$features_api$GetTracesExperimental(var_project_id, var_aligned_feature_id, include_all = var_include_all)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FeaturesApi-new}{\code{FeaturesApi$new()}}
\item \href{#method-FeaturesApi-AddAlignedFeatures}{\code{FeaturesApi$AddAlignedFeatures()}}
\item \href{#method-FeaturesApi-AddAlignedFeaturesWithHttpInfo}{\code{FeaturesApi$AddAlignedFeaturesWithHttpInfo()}}
\item \href{#method-FeaturesApi-DeleteAlignedFeature}{\code{FeaturesApi$DeleteAlignedFeature()}}
\item \href{#method-FeaturesApi-DeleteAlignedFeatureWithHttpInfo}{\code{FeaturesApi$DeleteAlignedFeatureWithHttpInfo()}}
\item \href{#method-FeaturesApi-DeleteAlignedFeatures}{\code{FeaturesApi$DeleteAlignedFeatures()}}
\item \href{#method-FeaturesApi-DeleteAlignedFeaturesWithHttpInfo}{\code{FeaturesApi$DeleteAlignedFeaturesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimental}{\code{FeaturesApi$GetAdductNetworkWithMergedTracesExperimental()}}
\item \href{#method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo}{\code{FeaturesApi$GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetAlignedFeature}{\code{FeaturesApi$GetAlignedFeature()}}
\item \href{#method-FeaturesApi-GetAlignedFeatureWithHttpInfo}{\code{FeaturesApi$GetAlignedFeatureWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetAlignedFeatures}{\code{FeaturesApi$GetAlignedFeatures()}}
\item \href{#method-FeaturesApi-GetAlignedFeaturesWithHttpInfo}{\code{FeaturesApi$GetAlignedFeaturesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetAlignedFeaturesPaged}{\code{FeaturesApi$GetAlignedFeaturesPaged()}}
\item \href{#method-FeaturesApi-GetAlignedFeaturesPagedWithHttpInfo}{\code{FeaturesApi$GetAlignedFeaturesPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetAlignedFeaturesQualityExperimental}{\code{FeaturesApi$GetAlignedFeaturesQualityExperimental()}}
\item \href{#method-FeaturesApi-GetAlignedFeaturesQualityExperimentalWithHttpInfo}{\code{FeaturesApi$GetAlignedFeaturesQualityExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetBestMatchingCompoundClasses}{\code{FeaturesApi$GetBestMatchingCompoundClasses()}}
\item \href{#method-FeaturesApi-GetBestMatchingCompoundClassesWithHttpInfo}{\code{FeaturesApi$GetBestMatchingCompoundClassesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetCanopusPrediction}{\code{FeaturesApi$GetCanopusPrediction()}}
\item \href{#method-FeaturesApi-GetCanopusPredictionWithHttpInfo}{\code{FeaturesApi$GetCanopusPredictionWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidates}{\code{FeaturesApi$GetDeNovoStructureCandidates()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesWithHttpInfo}{\code{FeaturesApi$GetDeNovoStructureCandidatesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesByFormula}{\code{FeaturesApi$GetDeNovoStructureCandidatesByFormula()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaWithHttpInfo}{\code{FeaturesApi$GetDeNovoStructureCandidatesByFormulaWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPaged}{\code{FeaturesApi$GetDeNovoStructureCandidatesByFormulaPaged()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo}{\code{FeaturesApi$GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesPaged}{\code{FeaturesApi$GetDeNovoStructureCandidatesPaged()}}
\item \href{#method-FeaturesApi-GetDeNovoStructureCandidatesPagedWithHttpInfo}{\code{FeaturesApi$GetDeNovoStructureCandidatesPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFingerprintPrediction}{\code{FeaturesApi$GetFingerprintPrediction()}}
\item \href{#method-FeaturesApi-GetFingerprintPredictionWithHttpInfo}{\code{FeaturesApi$GetFingerprintPredictionWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFormulaAnnotatedMsMsData}{\code{FeaturesApi$GetFormulaAnnotatedMsMsData()}}
\item \href{#method-FeaturesApi-GetFormulaAnnotatedMsMsDataWithHttpInfo}{\code{FeaturesApi$GetFormulaAnnotatedMsMsDataWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFormulaAnnotatedSpectrum}{\code{FeaturesApi$GetFormulaAnnotatedSpectrum()}}
\item \href{#method-FeaturesApi-GetFormulaAnnotatedSpectrumWithHttpInfo}{\code{FeaturesApi$GetFormulaAnnotatedSpectrumWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFormulaCandidate}{\code{FeaturesApi$GetFormulaCandidate()}}
\item \href{#method-FeaturesApi-GetFormulaCandidateWithHttpInfo}{\code{FeaturesApi$GetFormulaCandidateWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFormulaCandidates}{\code{FeaturesApi$GetFormulaCandidates()}}
\item \href{#method-FeaturesApi-GetFormulaCandidatesWithHttpInfo}{\code{FeaturesApi$GetFormulaCandidatesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFormulaCandidatesPaged}{\code{FeaturesApi$GetFormulaCandidatesPaged()}}
\item \href{#method-FeaturesApi-GetFormulaCandidatesPagedWithHttpInfo}{\code{FeaturesApi$GetFormulaCandidatesPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetFragTree}{\code{FeaturesApi$GetFragTree()}}
\item \href{#method-FeaturesApi-GetFragTreeWithHttpInfo}{\code{FeaturesApi$GetFragTreeWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetIsotopePatternAnnotation}{\code{FeaturesApi$GetIsotopePatternAnnotation()}}
\item \href{#method-FeaturesApi-GetIsotopePatternAnnotationWithHttpInfo}{\code{FeaturesApi$GetIsotopePatternAnnotationWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetLipidAnnotation}{\code{FeaturesApi$GetLipidAnnotation()}}
\item \href{#method-FeaturesApi-GetLipidAnnotationWithHttpInfo}{\code{FeaturesApi$GetLipidAnnotationWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetMsData}{\code{FeaturesApi$GetMsData()}}
\item \href{#method-FeaturesApi-GetMsDataWithHttpInfo}{\code{FeaturesApi$GetMsDataWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetQuantificationExperimental}{\code{FeaturesApi$GetQuantificationExperimental()}}
\item \href{#method-FeaturesApi-GetQuantificationExperimentalWithHttpInfo}{\code{FeaturesApi$GetQuantificationExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatch}{\code{FeaturesApi$GetSpectralLibraryMatch()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchWithHttpInfo}{\code{FeaturesApi$GetSpectralLibraryMatchWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatches}{\code{FeaturesApi$GetSpectralLibraryMatches()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchesWithHttpInfo}{\code{FeaturesApi$GetSpectralLibraryMatchesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchesPaged}{\code{FeaturesApi$GetSpectralLibraryMatchesPaged()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchesPagedWithHttpInfo}{\code{FeaturesApi$GetSpectralLibraryMatchesPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchesSummary}{\code{FeaturesApi$GetSpectralLibraryMatchesSummary()}}
\item \href{#method-FeaturesApi-GetSpectralLibraryMatchesSummaryWithHttpInfo}{\code{FeaturesApi$GetSpectralLibraryMatchesSummaryWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureAnnotatedMsDataExperimental}{\code{FeaturesApi$GetStructureAnnotatedMsDataExperimental()}}
\item \href{#method-FeaturesApi-GetStructureAnnotatedMsDataExperimentalWithHttpInfo}{\code{FeaturesApi$GetStructureAnnotatedMsDataExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureAnnotatedSpectrumExperimental}{\code{FeaturesApi$GetStructureAnnotatedSpectrumExperimental()}}
\item \href{#method-FeaturesApi-GetStructureAnnotatedSpectrumExperimentalWithHttpInfo}{\code{FeaturesApi$GetStructureAnnotatedSpectrumExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureCandidates}{\code{FeaturesApi$GetStructureCandidates()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesWithHttpInfo}{\code{FeaturesApi$GetStructureCandidatesWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesByFormula}{\code{FeaturesApi$GetStructureCandidatesByFormula()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesByFormulaWithHttpInfo}{\code{FeaturesApi$GetStructureCandidatesByFormulaWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesByFormulaPaged}{\code{FeaturesApi$GetStructureCandidatesByFormulaPaged()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesByFormulaPagedWithHttpInfo}{\code{FeaturesApi$GetStructureCandidatesByFormulaPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesPaged}{\code{FeaturesApi$GetStructureCandidatesPaged()}}
\item \href{#method-FeaturesApi-GetStructureCandidatesPagedWithHttpInfo}{\code{FeaturesApi$GetStructureCandidatesPagedWithHttpInfo()}}
\item \href{#method-FeaturesApi-GetTracesExperimental}{\code{FeaturesApi$GetTracesExperimental()}}
\item \href{#method-FeaturesApi-GetTracesExperimentalWithHttpInfo}{\code{FeaturesApi$GetTracesExperimentalWithHttpInfo()}}
\item \href{#method-FeaturesApi-clone}{\code{FeaturesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new FeaturesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-AddAlignedFeatures"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-AddAlignedFeatures}{}}}
\subsection{Method \code{AddAlignedFeatures()}}{
Import (aligned) features into the project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$AddAlignedFeatures(
  project_id,
  feature_import,
  profile = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{feature_import}}{the feature data to be imported}

\item{\code{profile}}{(optional) profile describing the instrument used to measure the data. Used to merge spectra.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[AlignedFeature]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-AddAlignedFeaturesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-AddAlignedFeaturesWithHttpInfo}{}}}
\subsection{Method \code{AddAlignedFeaturesWithHttpInfo()}}{
Import (aligned) features into the project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$AddAlignedFeaturesWithHttpInfo(
  project_id,
  feature_import,
  profile = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{feature_import}}{the feature data to be imported}

\item{\code{profile}}{(optional) profile describing the instrument used to measure the data. Used to merge spectra.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[AlignedFeature]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-DeleteAlignedFeature"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-DeleteAlignedFeature}{}}}
\subsection{Method \code{DeleteAlignedFeature()}}{
Delete feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$DeleteAlignedFeature(project_id, aligned_feature_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-DeleteAlignedFeatureWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-DeleteAlignedFeatureWithHttpInfo}{}}}
\subsection{Method \code{DeleteAlignedFeatureWithHttpInfo()}}{
Delete feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$DeleteAlignedFeatureWithHttpInfo(
  project_id,
  aligned_feature_id,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-DeleteAlignedFeatures"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-DeleteAlignedFeatures}{}}}
\subsection{Method \code{DeleteAlignedFeatures()}}{
Delete feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$DeleteAlignedFeatures(project_id, request_body, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{request_body}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-DeleteAlignedFeaturesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-DeleteAlignedFeaturesWithHttpInfo}{}}}
\subsection{Method \code{DeleteAlignedFeaturesWithHttpInfo()}}{
Delete feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$DeleteAlignedFeaturesWithHttpInfo(project_id, request_body, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{request_body}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimental}{}}}
\subsection{Method \code{GetAdductNetworkWithMergedTracesExperimental()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAdductNetworkWithMergedTracesExperimental(
  project_id,
  aligned_feature_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{one feature that is considered the main feature of the adduct network}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TraceSetExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAdductNetworkWithMergedTracesExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{one feature that is considered the main feature of the adduct network}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TraceSetExperimental) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeature"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeature}{}}}
\subsection{Method \code{GetAlignedFeature()}}{
Get feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeature(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AlignedFeature
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeatureWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeatureWithHttpInfo}{}}}
\subsection{Method \code{GetAlignedFeatureWithHttpInfo()}}{
Get feature (aligned over runs) with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeatureWithHttpInfo(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AlignedFeature) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeatures"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeatures}{}}}
\subsection{Method \code{GetAlignedFeatures()}}{
Get all available features (aligned over runs) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeatures(
  project_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[AlignedFeature]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeaturesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeaturesWithHttpInfo}{}}}
\subsection{Method \code{GetAlignedFeaturesWithHttpInfo()}}{
Get all available features (aligned over runs) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeaturesWithHttpInfo(
  project_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[AlignedFeature]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeaturesPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeaturesPaged}{}}}
\subsection{Method \code{GetAlignedFeaturesPaged()}}{
Get all available features (aligned over runs) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeaturesPaged(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelAlignedFeature
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeaturesPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeaturesPagedWithHttpInfo}{}}}
\subsection{Method \code{GetAlignedFeaturesPagedWithHttpInfo()}}{
Get all available features (aligned over runs) in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeaturesPagedWithHttpInfo(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelAlignedFeature) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeaturesQualityExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeaturesQualityExperimental}{}}}
\subsection{Method \code{GetAlignedFeaturesQualityExperimental()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeaturesQualityExperimental(
  project_id,
  aligned_feature_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to access.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AlignedFeatureQualityExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetAlignedFeaturesQualityExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetAlignedFeaturesQualityExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetAlignedFeaturesQualityExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetAlignedFeaturesQualityExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{identifier of feature (aligned over runs) to access.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AlignedFeatureQualityExperimental) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetBestMatchingCompoundClasses"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetBestMatchingCompoundClasses}{}}}
\subsection{Method \code{GetBestMatchingCompoundClasses()}}{
Best matching compound classes,  Set of the highest scoring compound classes (CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetBestMatchingCompoundClasses(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CompoundClasses
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetBestMatchingCompoundClassesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetBestMatchingCompoundClassesWithHttpInfo}{}}}
\subsection{Method \code{GetBestMatchingCompoundClassesWithHttpInfo()}}{
Best matching compound classes,  Set of the highest scoring compound classes (CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetBestMatchingCompoundClassesWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CompoundClasses) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetCanopusPrediction"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetCanopusPrediction}{}}}
\subsection{Method \code{GetCanopusPrediction()}}{
All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetCanopusPrediction(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CanopusPrediction
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetCanopusPredictionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetCanopusPredictionWithHttpInfo}{}}}
\subsection{Method \code{GetCanopusPredictionWithHttpInfo()}}{
All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetCanopusPredictionWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CanopusPrediction) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidates"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidates}{}}}
\subsection{Method \code{GetDeNovoStructureCandidates()}}{
List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidates(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[StructureCandidateFormula]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesWithHttpInfo}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesWithHttpInfo()}}{
List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesWithHttpInfo(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[StructureCandidateFormula]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesByFormula"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesByFormula}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesByFormula()}}{
List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesByFormula(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[StructureCandidateScored]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaWithHttpInfo}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesByFormulaWithHttpInfo()}}{
List of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesByFormulaWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[StructureCandidateScored]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPaged}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesByFormulaPaged()}}{
Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesByFormulaPaged(
  project_id,
  aligned_feature_id,
  formula_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelStructureCandidateScored
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo()}}{
Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesByFormulaPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelStructureCandidateScored) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesPaged}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesPaged()}}{
Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesPaged(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelStructureCandidateFormula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetDeNovoStructureCandidatesPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetDeNovoStructureCandidatesPagedWithHttpInfo}{}}}
\subsection{Method \code{GetDeNovoStructureCandidatesPagedWithHttpInfo()}}{
Page of de novo structure candidates (e.g. generated by MsNovelist) ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetDeNovoStructureCandidatesPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelStructureCandidateFormula) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFingerprintPrediction"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFingerprintPrediction}{}}}
\subsection{Method \code{GetFingerprintPrediction()}}{
Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perform structure database search and predict compound classes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFingerprintPrediction(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[numeric]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFingerprintPredictionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFingerprintPredictionWithHttpInfo}{}}}
\subsection{Method \code{GetFingerprintPredictionWithHttpInfo()}}{
Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perform structure database search and predict compound classes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFingerprintPredictionWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[numeric]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaAnnotatedMsMsData"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaAnnotatedMsMsData}{}}}
\subsection{Method \code{GetFormulaAnnotatedMsMsData()}}{
Returns MS/MS Spectrum (Merged MS/MS and measured MS/MS) which is annotated with fragments and losses  for the given formula result identifier  These annotations are only available if a fragmentation tree and the structure candidate are available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaAnnotatedMsMsData(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnnotatedMsMsData
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaAnnotatedMsMsDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaAnnotatedMsMsDataWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaAnnotatedMsMsDataWithHttpInfo()}}{
Returns MS/MS Spectrum (Merged MS/MS and measured MS/MS) which is annotated with fragments and losses  for the given formula result identifier  These annotations are only available if a fragmentation tree and the structure candidate are available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaAnnotatedMsMsDataWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnnotatedMsMsData) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaAnnotatedSpectrum"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaAnnotatedSpectrum}{}}}
\subsection{Method \code{GetFormulaAnnotatedSpectrum()}}{
Returns a fragmentation spectrum (e.g. Merged MS/MS) which is annotated with fragments and losses for the given formula result identifier  These annotations are only available if a fragmentation tree is available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaAnnotatedSpectrum(
  project_id,
  aligned_feature_id,
  formula_id,
  spectrum_index = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{spectrum_index}}{(optional) index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnnotatedSpectrum
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaAnnotatedSpectrumWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaAnnotatedSpectrumWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaAnnotatedSpectrumWithHttpInfo()}}{
Returns a fragmentation spectrum (e.g. Merged MS/MS) which is annotated with fragments and losses for the given formula result identifier  These annotations are only available if a fragmentation tree is available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaAnnotatedSpectrumWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  spectrum_index = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{spectrum_index}}{(optional) index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnnotatedSpectrum) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidate"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidate}{}}}
\subsection{Method \code{GetFormulaCandidate()}}{
FormulaResultContainers for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidate(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
FormulaCandidate
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidateWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaCandidateWithHttpInfo()}}{
FormulaResultContainers for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidateWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (FormulaCandidate) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidates"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidates}{}}}
\subsection{Method \code{GetFormulaCandidates()}}{
List of FormulaResultContainers available for this feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidates(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[FormulaCandidate]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidatesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidatesWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaCandidatesWithHttpInfo()}}{
List of FormulaResultContainers available for this feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidatesWithHttpInfo(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[FormulaCandidate]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidatesPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidatesPaged}{}}}
\subsection{Method \code{GetFormulaCandidatesPaged()}}{
Page of FormulaResultContainers available for this feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidatesPaged(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelFormulaCandidate
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFormulaCandidatesPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFormulaCandidatesPagedWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaCandidatesPagedWithHttpInfo()}}{
Page of FormulaResultContainers available for this feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFormulaCandidatesPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelFormulaCandidate) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFragTree"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFragTree}{}}}
\subsection{Method \code{GetFragTree()}}{
Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFragTree(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
FragmentationTree
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetFragTreeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetFragTreeWithHttpInfo}{}}}
\subsection{Method \code{GetFragTreeWithHttpInfo()}}{
Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetFragTreeWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (FragmentationTree) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetIsotopePatternAnnotation"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetIsotopePatternAnnotation}{}}}
\subsection{Method \code{GetIsotopePatternAnnotation()}}{
Returns Isotope pattern information (simulated isotope pattern, measured isotope pattern, isotope pattern highlighting)  for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetIsotopePatternAnnotation(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
IsotopePatternAnnotation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetIsotopePatternAnnotationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetIsotopePatternAnnotationWithHttpInfo}{}}}
\subsection{Method \code{GetIsotopePatternAnnotationWithHttpInfo()}}{
Returns Isotope pattern information (simulated isotope pattern, measured isotope pattern, isotope pattern highlighting)  for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetIsotopePatternAnnotationWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (IsotopePatternAnnotation) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetLipidAnnotation"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetLipidAnnotation}{}}}
\subsection{Method \code{GetLipidAnnotation()}}{
Returns Lipid annotation (ElGordo) for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetLipidAnnotation(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LipidAnnotation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetLipidAnnotationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetLipidAnnotationWithHttpInfo}{}}}
\subsection{Method \code{GetLipidAnnotationWithHttpInfo()}}{
Returns Lipid annotation (ElGordo) for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetLipidAnnotationWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (LipidAnnotation) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetMsData"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetMsData}{}}}
\subsection{Method \code{GetMsData()}}{
Mass Spec data (input data) for the given 'alignedFeatureId' .
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetMsData(project_id, aligned_feature_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the Mass Spec data belong sto.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
MsData
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetMsDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetMsDataWithHttpInfo}{}}}
\subsection{Method \code{GetMsDataWithHttpInfo()}}{
Mass Spec data (input data) for the given 'alignedFeatureId' .
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetMsDataWithHttpInfo(
  project_id,
  aligned_feature_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the Mass Spec data belong sto.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (MsData) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetQuantificationExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetQuantificationExperimental}{}}}
\subsection{Method \code{GetQuantificationExperimental()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetQuantificationExperimental(
  project_id,
  aligned_feature_id,
  type = "APEX_HEIGHT",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature which intensities should be read out}

\item{\code{type}}{(optional) quantification type. Currently, only APEX_HEIGHT is supported, which is the intensity of the feature at its apex. (default value: "APEX_HEIGHT")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
QuantificationTableExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetQuantificationExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetQuantificationExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetQuantificationExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetQuantificationExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  type = "APEX_HEIGHT",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature which intensities should be read out}

\item{\code{type}}{(optional) quantification type. Currently, only APEX_HEIGHT is supported, which is the intensity of the feature at its apex. (default value: "APEX_HEIGHT")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (QuantificationTableExperimental) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatch"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatch}{}}}
\subsection{Method \code{GetSpectralLibraryMatch()}}{
List of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatch(
  project_id,
  aligned_feature_id,
  match_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{match_id}}{}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SpectralLibraryMatch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchWithHttpInfo}{}}}
\subsection{Method \code{GetSpectralLibraryMatchWithHttpInfo()}}{
List of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchWithHttpInfo(
  project_id,
  aligned_feature_id,
  match_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{match_id}}{}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (SpectralLibraryMatch) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatches"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatches}{}}}
\subsection{Method \code{GetSpectralLibraryMatches()}}{
List of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatches(
  project_id,
  aligned_feature_id,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{min_shared_peaks}}{(optional) No description (default value: 1)}

\item{\code{min_similarity}}{(optional) No description (default value: 0.2)}

\item{\code{inchi_key}}{(optional) No description (default value: "")}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[SpectralLibraryMatch]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchesWithHttpInfo}{}}}
\subsection{Method \code{GetSpectralLibraryMatchesWithHttpInfo()}}{
List of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchesWithHttpInfo(
  project_id,
  aligned_feature_id,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{min_shared_peaks}}{(optional) No description (default value: 1)}

\item{\code{min_similarity}}{(optional) No description (default value: 0.2)}

\item{\code{inchi_key}}{(optional) No description (default value: "")}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[SpectralLibraryMatch]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchesPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchesPaged}{}}}
\subsection{Method \code{GetSpectralLibraryMatchesPaged()}}{
Page of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchesPaged(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{min_shared_peaks}}{(optional) No description (default value: 1)}

\item{\code{min_similarity}}{(optional) No description (default value: 0.2)}

\item{\code{inchi_key}}{(optional) No description (default value: "")}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelSpectralLibraryMatch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchesPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchesPagedWithHttpInfo}{}}}
\subsection{Method \code{GetSpectralLibraryMatchesPagedWithHttpInfo()}}{
Page of spectral library matches for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchesPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{min_shared_peaks}}{(optional) No description (default value: 1)}

\item{\code{min_similarity}}{(optional) No description (default value: 0.2)}

\item{\code{inchi_key}}{(optional) No description (default value: "")}

\item{\code{opt_fields}}{(optional) No description (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelSpectralLibraryMatch) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchesSummary"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchesSummary}{}}}
\subsection{Method \code{GetSpectralLibraryMatchesSummary()}}{
Summarize matched reference spectra for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchesSummary(
  project_id,
  aligned_feature_id,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{min_shared_peaks}}{(optional) min threshold of shared peaks. (default value: 1)}

\item{\code{min_similarity}}{(optional) min spectral similarity threshold. (default value: 0.2)}

\item{\code{inchi_key}}{(optional) 2D inchi key of the compound in the structure database. (default value: "")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SpectralLibraryMatchSummary
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetSpectralLibraryMatchesSummaryWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetSpectralLibraryMatchesSummaryWithHttpInfo}{}}}
\subsection{Method \code{GetSpectralLibraryMatchesSummaryWithHttpInfo()}}{
Summarize matched reference spectra for the given 'alignedFeatureId'.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetSpectralLibraryMatchesSummaryWithHttpInfo(
  project_id,
  aligned_feature_id,
  min_shared_peaks = 1,
  min_similarity = 0.2,
  inchi_key = "",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{min_shared_peaks}}{(optional) min threshold of shared peaks. (default value: 1)}

\item{\code{min_similarity}}{(optional) min spectral similarity threshold. (default value: 0.2)}

\item{\code{inchi_key}}{(optional) 2D inchi key of the compound in the structure database. (default value: "")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (SpectralLibraryMatchSummary) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureAnnotatedMsDataExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureAnnotatedMsDataExperimental}{}}}
\subsection{Method \code{GetStructureAnnotatedMsDataExperimental()}}{
EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureAnnotatedMsDataExperimental(
  project_id,
  aligned_feature_id,
  formula_id,
  inchi_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{inchi_key}}{2d InChIKey of the structure candidate to be used to annotate the spectrum annotation}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnnotatedMsMsData
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureAnnotatedMsDataExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureAnnotatedMsDataExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetStructureAnnotatedMsDataExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureAnnotatedMsDataExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  inchi_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{inchi_key}}{2d InChIKey of the structure candidate to be used to annotate the spectrum annotation}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnnotatedMsMsData) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureAnnotatedSpectrumExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureAnnotatedSpectrumExperimental}{}}}
\subsection{Method \code{GetStructureAnnotatedSpectrumExperimental()}}{
EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureAnnotatedSpectrumExperimental(
  project_id,
  aligned_feature_id,
  formula_id,
  inchi_key,
  spectrum_index = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{inchi_key}}{2d InChIKey of the structure candidate to be used to annotate the spectrum annotation}

\item{\code{spectrum_index}}{(optional) index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnnotatedSpectrum
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureAnnotatedSpectrumExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureAnnotatedSpectrumExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetStructureAnnotatedSpectrumExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental because it produces return values that are not yet stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureAnnotatedSpectrumExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  inchi_key,
  spectrum_index = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{inchi_key}}{2d InChIKey of the structure candidate to be used to annotate the spectrum annotation}

\item{\code{spectrum_index}}{(optional) index of the spectrum to be annotated. Merged MS/MS will be used if spectrumIndex < 0 (default) (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnnotatedSpectrum) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidates"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidates}{}}}
\subsection{Method \code{GetStructureCandidates()}}{
List of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidates(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[StructureCandidateFormula]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesWithHttpInfo}{}}}
\subsection{Method \code{GetStructureCandidatesWithHttpInfo()}}{
List of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesWithHttpInfo(
  project_id,
  aligned_feature_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[StructureCandidateFormula]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesByFormula"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesByFormula}{}}}
\subsection{Method \code{GetStructureCandidatesByFormula()}}{
List of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesByFormula(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[StructureCandidateScored]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesByFormulaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesByFormulaWithHttpInfo}{}}}
\subsection{Method \code{GetStructureCandidatesByFormulaWithHttpInfo()}}{
List of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesByFormulaWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[StructureCandidateScored]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesByFormulaPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesByFormulaPaged}{}}}
\subsection{Method \code{GetStructureCandidatesByFormulaPaged()}}{
Page of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesByFormulaPaged(
  project_id,
  aligned_feature_id,
  formula_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelStructureCandidateScored
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesByFormulaPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesByFormulaPagedWithHttpInfo}{}}}
\subsection{Method \code{GetStructureCandidatesByFormulaPagedWithHttpInfo()}}{
Page of CSI:FingerID structure database search candidates for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesByFormulaPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  formula_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelStructureCandidateScored) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesPaged"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesPaged}{}}}
\subsection{Method \code{GetStructureCandidatesPaged()}}{
Page of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesPaged(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelStructureCandidateFormula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetStructureCandidatesPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetStructureCandidatesPagedWithHttpInfo}{}}}
\subsection{Method \code{GetStructureCandidatesPagedWithHttpInfo()}}{
Page of structure database search candidates ranked by CSI:FingerID score for the given 'alignedFeatureId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetStructureCandidatesPagedWithHttpInfo(
  project_id,
  aligned_feature_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature (aligned over runs) the structure candidates belong to.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelStructureCandidateFormula) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetTracesExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetTracesExperimental}{}}}
\subsection{Method \code{GetTracesExperimental()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetTracesExperimental(
  project_id,
  aligned_feature_id,
  include_all = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature which intensities should be read out}

\item{\code{include_all}}{(optional) when true, return all samples that belong to the same merged trace. when false, only return samples which contain the aligned feature. (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TraceSetExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-GetTracesExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-GetTracesExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetTracesExperimentalWithHttpInfo()}}{
EXPERIMENTAL: This endpoint is experimental and may be changed (or even removed) without notice until it is declared stable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$GetTracesExperimentalWithHttpInfo(
  project_id,
  aligned_feature_id,
  include_all = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{aligned_feature_id}}{feature which intensities should be read out}

\item{\code{include_all}}{(optional) when true, return all samples that belong to the same merged trace. when false, only return samples which contain the aligned feature. (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TraceSetExperimental) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FeaturesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FeaturesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FeaturesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
