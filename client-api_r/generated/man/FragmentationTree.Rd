% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fragmentation_tree.R
\docType{class}
\name{FragmentationTree}
\alias{FragmentationTree}
\title{FragmentationTree}
\format{
An \code{R6Class} generator object
}
\description{
Simple and easy serializable fragmentation tree model with annotated fragments/nodes abd losses/edges  Root fragment has index 0;  Molecular formula and adduct are identical to the ones of the corresponding molecular formula candidate and SpectrumAnnotation

FragmentationTree Class
}
\details{
Create a new FragmentationTree
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{fragments}}{list(\link{FragmentNode}) [optional]}

\item{\code{losses}}{list(\link{LossEdge}) [optional]}

\item{\code{treeScore}}{numeric [optional]}

\item{\code{molecularFormula}}{character [optional]}

\item{\code{adduct}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FragmentationTree-new}{\code{FragmentationTree$new()}}
\item \href{#method-FragmentationTree-toJSON}{\code{FragmentationTree$toJSON()}}
\item \href{#method-FragmentationTree-fromJSON}{\code{FragmentationTree$fromJSON()}}
\item \href{#method-FragmentationTree-toJSONString}{\code{FragmentationTree$toJSONString()}}
\item \href{#method-FragmentationTree-fromJSONString}{\code{FragmentationTree$fromJSONString()}}
\item \href{#method-FragmentationTree-validateJSON}{\code{FragmentationTree$validateJSON()}}
\item \href{#method-FragmentationTree-toString}{\code{FragmentationTree$toString()}}
\item \href{#method-FragmentationTree-isValid}{\code{FragmentationTree$isValid()}}
\item \href{#method-FragmentationTree-getInvalidFields}{\code{FragmentationTree$getInvalidFields()}}
\item \href{#method-FragmentationTree-print}{\code{FragmentationTree$print()}}
\item \href{#method-FragmentationTree-clone}{\code{FragmentationTree$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-new"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new FragmentationTree class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$new(
  fragments = NULL,
  losses = NULL,
  treeScore = NULL,
  molecularFormula = NULL,
  adduct = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fragments}}{fragments}

\item{\code{losses}}{losses}

\item{\code{treeScore}}{treeScore}

\item{\code{molecularFormula}}{molecularFormula}

\item{\code{adduct}}{adduct}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
FragmentationTree in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of FragmentationTree
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of FragmentationTree
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
FragmentationTree in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of FragmentationTree
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of FragmentationTree
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to FragmentationTree and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-toString"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of FragmentationTree
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-print"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FragmentationTree-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FragmentationTree-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FragmentationTree$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
