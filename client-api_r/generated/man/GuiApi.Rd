% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gui_api.R
\docType{class}
\name{GuiApi}
\alias{GuiApi}
\title{Gui operations}
\format{
An \code{R6Class} generator object
}
\description{
GuiApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.0
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  CloseGui  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | if project-space the GUI instance is connected to.
var_close_project <- "close_project_example" # character |  (Optional)

#Close GUI instance of given project-space if available.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$CloseGui(var_project_id, close_project = var_close_projectdata_file = "result.txt")
result <- api_instance$gui_api$CloseGui(var_project_id, close_project = var_close_project)
dput(result)


####################  GetGuis  ####################

library(Rsirius)

#Get list of currently running gui windows, managed by this SIRIUS instance.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetGuis(data_file = "result.txt")
result <- api_instance$gui_api$GetGuis()
dput(result)


####################  OpenGui  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | of project-space the GUI instance will connect to.

#Open GUI instance on specified project-space and bring the GUI window to foreground.
api_instance <- rsirius_api$new()

api_instance$gui_api$OpenGui(var_project_id)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GuiApi-new}{\code{GuiApi$new()}}
\item \href{#method-GuiApi-CloseGui}{\code{GuiApi$CloseGui()}}
\item \href{#method-GuiApi-CloseGuiWithHttpInfo}{\code{GuiApi$CloseGuiWithHttpInfo()}}
\item \href{#method-GuiApi-GetGuis}{\code{GuiApi$GetGuis()}}
\item \href{#method-GuiApi-GetGuisWithHttpInfo}{\code{GuiApi$GetGuisWithHttpInfo()}}
\item \href{#method-GuiApi-OpenGui}{\code{GuiApi$OpenGui()}}
\item \href{#method-GuiApi-OpenGuiWithHttpInfo}{\code{GuiApi$OpenGuiWithHttpInfo()}}
\item \href{#method-GuiApi-clone}{\code{GuiApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new GuiApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-CloseGui"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-CloseGui}{}}}
\subsection{Method \code{CloseGui()}}{
Close GUI instance of given project-space if available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$CloseGui(project_id, close_project = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{if project-space the GUI instance is connected to.}

\item{\code{close_project}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-CloseGuiWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-CloseGuiWithHttpInfo}{}}}
\subsection{Method \code{CloseGuiWithHttpInfo()}}{
Close GUI instance of given project-space if available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$CloseGuiWithHttpInfo(
  project_id,
  close_project = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{if project-space the GUI instance is connected to.}

\item{\code{close_project}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-GetGuis"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-GetGuis}{}}}
\subsection{Method \code{GetGuis()}}{
Get list of currently running gui windows, managed by this SIRIUS instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$GetGuis(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[GuiInfo]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-GetGuisWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-GetGuisWithHttpInfo}{}}}
\subsection{Method \code{GetGuisWithHttpInfo()}}{
Get list of currently running gui windows, managed by this SIRIUS instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$GetGuisWithHttpInfo(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[GuiInfo]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-OpenGui"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-OpenGui}{}}}
\subsection{Method \code{OpenGui()}}{
Open GUI instance on specified project-space and bring the GUI window to foreground.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$OpenGui(project_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{of project-space the GUI instance will connect to.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-OpenGuiWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-OpenGuiWithHttpInfo}{}}}
\subsection{Method \code{OpenGuiWithHttpInfo()}}{
Open GUI instance on specified project-space and bring the GUI window to foreground.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$OpenGuiWithHttpInfo(project_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{of project-space the GUI instance will connect to.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GuiApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GuiApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GuiApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
