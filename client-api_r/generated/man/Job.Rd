% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/job.R
\docType{class}
\name{Job}
\alias{Job}
\title{Job}
\format{
An \code{R6Class} generator object
}
\description{
Identifier created by the SIRIUS Nightsky API for a newly created Job.  Object can be enriched with Job status/progress information ({@link JobProgress JobProgress}) and/or Job command information.  This is a return value of the API. So nullable values can also be NOT_REQUIRED to allow for easy removal.

Job Class
}
\details{
Create a new Job
}
\examples{

## ------------------------------------------------
## Method `Job$toList`
## ------------------------------------------------

# convert array of Job (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{Unique identifier to access the job via the API character [optional]}

\item{\code{command}}{Command string of the executed Task character [optional]}

\item{\code{progress}}{Optional progress information of this job \link{JobProgress} [optional]}

\item{\code{affectedCompoundIds}}{List of compoundIds that are affected by this job.  This lis will also contain compoundIds where not all features of the compound are affected by the job.  If this job is creating compounds (e.g. data import jobs) this value will be NULL until the jobs has finished list(character) [optional]}

\item{\code{affectedAlignedFeatureIds}}{List of alignedFeatureIds that are affected by this job.  If this job is creating features (e.g. data import jobs) this value will be NULL until the jobs has finished list(character) [optional]}

\item{\code{jobEffect}}{Effect this job has. The affected ids are added, removed or modified.  Null if job does not affect features/compounds  Not available/null if affected Ids are not requested character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Job-new}{\code{Job$new()}}
\item \href{#method-Job-toJSON}{\code{Job$toJSON()}}
\item \href{#method-Job-toList}{\code{Job$toList()}}
\item \href{#method-Job-toSimpleType}{\code{Job$toSimpleType()}}
\item \href{#method-Job-fromJSON}{\code{Job$fromJSON()}}
\item \href{#method-Job-toJSONString}{\code{Job$toJSONString()}}
\item \href{#method-Job-fromJSONString}{\code{Job$fromJSONString()}}
\item \href{#method-Job-validateJSON}{\code{Job$validateJSON()}}
\item \href{#method-Job-toString}{\code{Job$toString()}}
\item \href{#method-Job-isValid}{\code{Job$isValid()}}
\item \href{#method-Job-getInvalidFields}{\code{Job$getInvalidFields()}}
\item \href{#method-Job-print}{\code{Job$print()}}
\item \href{#method-Job-clone}{\code{Job$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-new"></a>}}
\if{latex}{\out{\hypertarget{method-Job-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Job class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$new(
  id = NULL,
  command = NULL,
  progress = NULL,
  affectedCompoundIds = NULL,
  affectedAlignedFeatureIds = NULL,
  jobEffect = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Unique identifier to access the job via the API}

\item{\code{command}}{Command string of the executed Task}

\item{\code{progress}}{Optional progress information of this job}

\item{\code{affectedCompoundIds}}{List of compoundIds that are affected by this job.  This lis will also contain compoundIds where not all features of the compound are affected by the job.  If this job is creating compounds (e.g. data import jobs) this value will be NULL until the jobs has finished}

\item{\code{affectedAlignedFeatureIds}}{List of alignedFeatureIds that are affected by this job.  If this job is creating features (e.g. data import jobs) this value will be NULL until the jobs has finished}

\item{\code{jobEffect}}{Effect this job has. The affected ids are added, removed or modified.  Null if job does not affect features/compounds  Not available/null if affected Ids are not requested}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Job-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Job-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Job as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Job (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Job-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Job to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Job-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Job-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Job-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Job-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Job and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Job-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Job-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Job-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-print"></a>}}
\if{latex}{\out{\hypertarget{method-Job-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Job-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Job-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Job$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
