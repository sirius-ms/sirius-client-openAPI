% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jobs_api.R
\docType{class}
\name{JobsApi}
\alias{JobsApi}
\title{Jobs operations}
\format{
An \code{R6Class} generator object
}
\description{
JobsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 2.1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ DeleteJob } \emph{ Delete job. }
Delete job. Specify how to behave for running jobs.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_id character
\item \emph{ @param } cancel_if_running character
\item \emph{ @param } await_deletion character


\item status code : 202 | Accepted


\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteJobConfig } \emph{ Delete job configuration with given name. }
Delete job configuration with given name.

\itemize{
\item \emph{ @param } name character


\item status code : 202 | Accepted


\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteJobs } \emph{ * Delete ALL jobs. }
* Delete ALL jobs. Specify how to behave for running jobs.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } cancel_if_running character
\item \emph{ @param } await_deletion character


\item status code : 202 | Accepted


\item response headers :

\tabular{ll}{
}
}

\strong{ GetDefaultJobConfig } \emph{ Request default job configuration }
Request default job configuration

\itemize{
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } \link{JobSubmission} \cr


\item status code : 200 | {@link JobSubmission JobSubmission} with all parameters set to default values.

\item return type : JobSubmission
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJob } \emph{ Get job information and its current state and progress (if available). }
Get job information and its current state and progress (if available).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_id character
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } \link{Job} \cr


\item status code : 200 | OK

\item return type : Job
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobConfig } \emph{ Request job configuration with given name. }
Request job configuration with given name.

\itemize{
\item \emph{ @param } name character
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } \link{JobSubmission} \cr


\item status code : 200 | {@link JobSubmission JobSubmission} for given name.

\item return type : JobSubmission
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobConfigs } \emph{ Request all available job configurations }
Request all available job configurations

\itemize{
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } list( \link{JobSubmission} ) \cr


\item status code : 200 | list of available {@link JobSubmission JobSubmission}s

\item return type : array[JobSubmission]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobs } \emph{ Get List of all available jobs with information such as current state and progress (if available). }
Get List of all available jobs with information such as current state and progress (if available).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } list( \link{Job} ) \cr


\item status code : 200 | OK

\item return type : array[Job]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobsPaged } \emph{ Get Page of jobs with information such as current state and progress (if available). }
Get Page of jobs with information such as current state and progress (if available).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } page integer
\item \emph{ @param } size integer
\item \emph{ @param } sort list( character )
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } \link{PageJob} \cr


\item status code : 200 | OK

\item return type : PageJob
\item response headers :

\tabular{ll}{
}
}

\strong{ HasJobs } \emph{  }

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } include_finished character


\item status code : 200 | OK

\item return type : character
\item response headers :

\tabular{ll}{
}
}

\strong{ SaveJobConfig } \emph{ Add new job configuration with given name. }
Add new job configuration with given name.

\itemize{
\item \emph{ @param } name character
\item \emph{ @param } job_submission \link{JobSubmission}
\item \emph{ @param } override_existing character


\item status code : 200 | Probably modified name of the config (to ensure filesystem path compatibility).

\item return type : character
\item response headers :

\tabular{ll}{
}
}

\strong{ StartCommand } \emph{ Start computation for given command and input. }
Start computation for given command and input.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } command_submission \link{CommandSubmission}
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } \link{Job} \cr


\item status code : 200 | Job of the command to be executed.   DEPRECATED: this endpoint is based on local file paths and will likely be removed in future versions of this API.

\item return type : Job
\item response headers :

\tabular{ll}{
}
}

\strong{ StartJob } \emph{ Start computation for given compounds and with given parameters. }
Start computation for given compounds and with given parameters.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_submission \link{JobSubmission}
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } \link{Job} \cr


\item status code : 202 | Accepted

\item return type : Job
\item response headers :

\tabular{ll}{
}
}

\strong{ StartJobFromConfig } \emph{ Start computation for given compounds and with parameters from a stored job-config. }
Start computation for given compounds and with parameters from a stored job-config.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_config_name character
\item \emph{ @param } request_body list( character )
\item \emph{ @param } recompute character
\item \emph{ @param } opt_fields list( \link{JobOptField} )
\item \emph{ @returnType } \link{Job} \cr


\item status code : 202 | Accepted

\item return type : Job
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  DeleteJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete job from
var_job_id <- "job_id_example" # character | of the job to be deleted
var_cancel_if_running <- TRUE # character | If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (Optional)
var_await_deletion <- TRUE # character | If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (Optional)

#Delete job.
api_instance <- rsirius_api$new()

api_instance$jobs_api$DeleteJob(var_project_id, var_job_id, cancel_if_running = var_cancel_if_running, await_deletion = var_await_deletion)


####################  DeleteJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to delete

#Delete job configuration with given name.
api_instance <- rsirius_api$new()

api_instance$jobs_api$DeleteJobConfig(var_name)


####################  DeleteJobs  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete jobs from
var_cancel_if_running <- TRUE # character | If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (Optional)
var_await_deletion <- TRUE # character | If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (Optional)

#* Delete ALL jobs.
api_instance <- rsirius_api$new()

api_instance$jobs_api$DeleteJobs(var_project_id, cancel_if_running = var_cancel_if_running, await_deletion = var_await_deletion)


####################  GetDefaultJobConfig  ####################

library(Rsirius)
var_include_config_map <- FALSE # character | if true, generic configmap with-defaults will be included (Optional)

#Request default job configuration
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDefaultJobConfig(include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$jobs_api$GetDefaultJobConfig(include_config_map = var_include_config_map)
dput(result)


####################  GetJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_id <- "job_id_example" # character | of the job to be returned
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get job information and its current state and progress (if available).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJob(var_project_id, var_job_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$GetJob(var_project_id, var_job_id, opt_fields = var_opt_fields)
dput(result)


####################  GetJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to return
var_include_config_map <- FALSE # character | if true the generic configmap will be part of the output (Optional)

#Request job configuration with given name.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobConfig(var_name, include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$jobs_api$GetJobConfig(var_name, include_config_map = var_include_config_map)
dput(result)


####################  GetJobConfigs  ####################

library(Rsirius)
var_include_config_map <- FALSE # character | if true the generic configmap will be part of the output (Optional)

#Request all available job configurations
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobConfigs(include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$jobs_api$GetJobConfigs(include_config_map = var_include_config_map)
dput(result)


####################  GetJobs  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get List of all available jobs with information such as current state and progress (if available).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobs(var_project_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$GetJobs(var_project_id, opt_fields = var_opt_fields)
dput(result)


####################  GetJobsPaged  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Get Page of jobs with information such as current state and progress (if available).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobsPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$GetJobsPaged(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  HasJobs  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | 
var_include_finished <- FALSE # character |  (Optional)

api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$HasJobs(var_project_id, include_finished = var_include_finisheddata_file = "result.txt")
result <- api_instance$jobs_api$HasJobs(var_project_id, include_finished = var_include_finished)
dput(result)


####################  SaveJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to add
var_job_submission <- JobSubmission$new(c("compoundIds_example"), c("alignedFeatureIds_example"), c("fallbackAdducts_example"), c("enforcedAdducts_example"), c("detectableAdducts_example"), "recompute_example", SpectralLibrarySearch$new("enabled_example", c("spectraSearchDBs_example"), 123, 123, SpectralMatchingType$new()), Sirius$new("enabled_example", Instrument$new(), 123, 123, 123, "IGNORE", "filterByIsotopePattern_example", "enforceElGordoFormula_example", "performBottomUpSearch_example", 123, c("formulaSearchDBs_example"), "applyFormulaConstraintsToDBAndBottomUpSearch_example", "enforcedFormulaConstraints_example", "fallbackFormulaConstraints_example", c("detectableElements_example"), Timeout$new(123, 123), UseHeuristic$new(123, 123), "injectSpecLibMatchFormulas_example", 123, 123), Zodiac$new("enabled_example", 123, 123, "runInTwoSteps_example", ZodiacEdgeFilterThresholds$new(123, 123, 123), ZodiacEpochs$new(123, 123, 123)), FingerprintPrediction$new("enabled_example", "useScoreThreshold_example", "alwaysPredictHighRefMatches_example"), Canopus$new("enabled_example"), StructureDbSearch$new("enabled_example", c("structureSearchDBs_example"), "tagStructuresWithLipidClass_example", ConfidenceMode$new()), MsNovelist$new("enabled_example", 123), c(key = "inner_example")) # JobSubmission | to add
var_override_existing <- FALSE # character |  (Optional)

#Add new job configuration with given name.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$SaveJobConfig(var_name, var_job_submission, override_existing = var_override_existingdata_file = "result.txt")
result <- api_instance$jobs_api$SaveJobConfig(var_name, var_job_submission, override_existing = var_override_existing)
dput(result)


####################  StartCommand  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to perform the command for.
var_command_submission <- CommandSubmission$new(c("command_example"), c("compoundIds_example"), c("alignedFeatureIds_example")) # CommandSubmission | the command and the input to be executed
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Start computation for given command and input.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$StartCommand(var_project_id, var_command_submission, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$StartCommand(var_project_id, var_command_submission, opt_fields = var_opt_fields)
dput(result)


####################  StartJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_submission <- JobSubmission$new(c("compoundIds_example"), c("alignedFeatureIds_example"), c("fallbackAdducts_example"), c("enforcedAdducts_example"), c("detectableAdducts_example"), "recompute_example", SpectralLibrarySearch$new("enabled_example", c("spectraSearchDBs_example"), 123, 123, SpectralMatchingType$new()), Sirius$new("enabled_example", Instrument$new(), 123, 123, 123, "IGNORE", "filterByIsotopePattern_example", "enforceElGordoFormula_example", "performBottomUpSearch_example", 123, c("formulaSearchDBs_example"), "applyFormulaConstraintsToDBAndBottomUpSearch_example", "enforcedFormulaConstraints_example", "fallbackFormulaConstraints_example", c("detectableElements_example"), Timeout$new(123, 123), UseHeuristic$new(123, 123), "injectSpecLibMatchFormulas_example", 123, 123), Zodiac$new("enabled_example", 123, 123, "runInTwoSteps_example", ZodiacEdgeFilterThresholds$new(123, 123, 123), ZodiacEpochs$new(123, 123, 123)), FingerprintPrediction$new("enabled_example", "useScoreThreshold_example", "alwaysPredictHighRefMatches_example"), Canopus$new("enabled_example"), StructureDbSearch$new("enabled_example", c("structureSearchDBs_example"), "tagStructuresWithLipidClass_example", ConfidenceMode$new()), MsNovelist$new("enabled_example", 123), c(key = "inner_example")) # JobSubmission | configuration of the job that will be submitted of the job to be returned
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Start computation for given compounds and with given parameters.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$StartJob(var_project_id, var_job_submission, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$StartJob(var_project_id, var_job_submission, opt_fields = var_opt_fields)
dput(result)


####################  StartJobFromConfig  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_config_name <- "job_config_name_example" # character | name if the config to be used
var_request_body <- c("property_example") # array[character] | List of alignedFeatureIds to be computed
var_recompute <- "recompute_example" # character | enable or disable recompute. If null the stored value will be used. (Optional)
var_opt_fields <- c(JobOptField$new()) # array[JobOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#Start computation for given compounds and with parameters from a stored job-config.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$StartJobFromConfig(var_project_id, var_job_config_name, var_request_body, recompute = var_recompute, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$jobs_api$StartJobFromConfig(var_project_id, var_job_config_name, var_request_body, recompute = var_recompute, opt_fields = var_opt_fields)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-JobsApi-new}{\code{JobsApi$new()}}
\item \href{#method-JobsApi-DeleteJob}{\code{JobsApi$DeleteJob()}}
\item \href{#method-JobsApi-DeleteJobWithHttpInfo}{\code{JobsApi$DeleteJobWithHttpInfo()}}
\item \href{#method-JobsApi-DeleteJobConfig}{\code{JobsApi$DeleteJobConfig()}}
\item \href{#method-JobsApi-DeleteJobConfigWithHttpInfo}{\code{JobsApi$DeleteJobConfigWithHttpInfo()}}
\item \href{#method-JobsApi-DeleteJobs}{\code{JobsApi$DeleteJobs()}}
\item \href{#method-JobsApi-DeleteJobsWithHttpInfo}{\code{JobsApi$DeleteJobsWithHttpInfo()}}
\item \href{#method-JobsApi-GetDefaultJobConfig}{\code{JobsApi$GetDefaultJobConfig()}}
\item \href{#method-JobsApi-GetDefaultJobConfigWithHttpInfo}{\code{JobsApi$GetDefaultJobConfigWithHttpInfo()}}
\item \href{#method-JobsApi-GetJob}{\code{JobsApi$GetJob()}}
\item \href{#method-JobsApi-GetJobWithHttpInfo}{\code{JobsApi$GetJobWithHttpInfo()}}
\item \href{#method-JobsApi-GetJobConfig}{\code{JobsApi$GetJobConfig()}}
\item \href{#method-JobsApi-GetJobConfigWithHttpInfo}{\code{JobsApi$GetJobConfigWithHttpInfo()}}
\item \href{#method-JobsApi-GetJobConfigs}{\code{JobsApi$GetJobConfigs()}}
\item \href{#method-JobsApi-GetJobConfigsWithHttpInfo}{\code{JobsApi$GetJobConfigsWithHttpInfo()}}
\item \href{#method-JobsApi-GetJobs}{\code{JobsApi$GetJobs()}}
\item \href{#method-JobsApi-GetJobsWithHttpInfo}{\code{JobsApi$GetJobsWithHttpInfo()}}
\item \href{#method-JobsApi-GetJobsPaged}{\code{JobsApi$GetJobsPaged()}}
\item \href{#method-JobsApi-GetJobsPagedWithHttpInfo}{\code{JobsApi$GetJobsPagedWithHttpInfo()}}
\item \href{#method-JobsApi-HasJobs}{\code{JobsApi$HasJobs()}}
\item \href{#method-JobsApi-HasJobsWithHttpInfo}{\code{JobsApi$HasJobsWithHttpInfo()}}
\item \href{#method-JobsApi-SaveJobConfig}{\code{JobsApi$SaveJobConfig()}}
\item \href{#method-JobsApi-SaveJobConfigWithHttpInfo}{\code{JobsApi$SaveJobConfigWithHttpInfo()}}
\item \href{#method-JobsApi-StartCommand}{\code{JobsApi$StartCommand()}}
\item \href{#method-JobsApi-StartCommandWithHttpInfo}{\code{JobsApi$StartCommandWithHttpInfo()}}
\item \href{#method-JobsApi-StartJob}{\code{JobsApi$StartJob()}}
\item \href{#method-JobsApi-StartJobWithHttpInfo}{\code{JobsApi$StartJobWithHttpInfo()}}
\item \href{#method-JobsApi-StartJobFromConfig}{\code{JobsApi$StartJobFromConfig()}}
\item \href{#method-JobsApi-StartJobFromConfigWithHttpInfo}{\code{JobsApi$StartJobFromConfigWithHttpInfo()}}
\item \href{#method-JobsApi-clone}{\code{JobsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new JobsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJob"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJob}{}}}
\subsection{Method \code{DeleteJob()}}{
Delete job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJob(
  project_id,
  job_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete job from}

\item{\code{job_id}}{of the job to be deleted}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJobWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobWithHttpInfo()}}{
Delete job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJobWithHttpInfo(
  project_id,
  job_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete job from}

\item{\code{job_id}}{of the job to be deleted}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJobConfig}{}}}
\subsection{Method \code{DeleteJobConfig()}}{
Delete job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJobConfig(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to delete}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJobConfigWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobConfigWithHttpInfo()}}{
Delete job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJobConfigWithHttpInfo(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to delete}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJobs"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJobs}{}}}
\subsection{Method \code{DeleteJobs()}}{
* Delete ALL jobs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJobs(
  project_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete jobs from}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-DeleteJobsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-DeleteJobsWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobsWithHttpInfo()}}{
* Delete ALL jobs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$DeleteJobsWithHttpInfo(
  project_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete jobs from}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetDefaultJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetDefaultJobConfig}{}}}
\subsection{Method \code{GetDefaultJobConfig()}}{
Request default job configuration
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetDefaultJobConfig(include_config_map = FALSE, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true, generic configmap with-defaults will be included (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetDefaultJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetDefaultJobConfigWithHttpInfo}{}}}
\subsection{Method \code{GetDefaultJobConfigWithHttpInfo()}}{
Request default job configuration
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetDefaultJobConfigWithHttpInfo(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true, generic configmap with-defaults will be included (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobSubmission) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJob"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJob}{}}}
\subsection{Method \code{GetJob()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJob(
  project_id,
  job_id,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be returned}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobWithHttpInfo}{}}}
\subsection{Method \code{GetJobWithHttpInfo()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobWithHttpInfo(
  project_id,
  job_id,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be returned}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobConfig}{}}}
\subsection{Method \code{GetJobConfig()}}{
Request job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobConfig(name, include_config_map = FALSE, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to return}

\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobConfigWithHttpInfo}{}}}
\subsection{Method \code{GetJobConfigWithHttpInfo()}}{
Request job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobConfigWithHttpInfo(
  name,
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to return}

\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobSubmission) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobConfigs"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobConfigs}{}}}
\subsection{Method \code{GetJobConfigs()}}{
Request all available job configurations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobConfigs(include_config_map = FALSE, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[JobSubmission]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobConfigsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobConfigsWithHttpInfo}{}}}
\subsection{Method \code{GetJobConfigsWithHttpInfo()}}{
Request all available job configurations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobConfigsWithHttpInfo(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[JobSubmission]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobs"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobs}{}}}
\subsection{Method \code{GetJobs()}}{
Get List of all available jobs with information such as current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobs(project_id, opt_fields = list(), data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Job]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobsWithHttpInfo}{}}}
\subsection{Method \code{GetJobsWithHttpInfo()}}{
Get List of all available jobs with information such as current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobsWithHttpInfo(
  project_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Job]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobsPaged"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobsPaged}{}}}
\subsection{Method \code{GetJobsPaged()}}{
Get Page of jobs with information such as current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobsPaged(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PageJob
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-GetJobsPagedWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-GetJobsPagedWithHttpInfo}{}}}
\subsection{Method \code{GetJobsPagedWithHttpInfo()}}{
Get Page of jobs with information such as current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$GetJobsPagedWithHttpInfo(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PageJob) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-HasJobs"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-HasJobs}{}}}
\subsection{Method \code{HasJobs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$HasJobs(project_id, include_finished = FALSE, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{include_finished}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-HasJobsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-HasJobsWithHttpInfo}{}}}
\subsection{Method \code{HasJobsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$HasJobsWithHttpInfo(
  project_id,
  include_finished = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{include_finished}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-SaveJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-SaveJobConfig}{}}}
\subsection{Method \code{SaveJobConfig()}}{
Add new job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$SaveJobConfig(
  name,
  job_submission,
  override_existing = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to add}

\item{\code{job_submission}}{to add}

\item{\code{override_existing}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-SaveJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-SaveJobConfigWithHttpInfo}{}}}
\subsection{Method \code{SaveJobConfigWithHttpInfo()}}{
Add new job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$SaveJobConfigWithHttpInfo(
  name,
  job_submission,
  override_existing = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to add}

\item{\code{job_submission}}{to add}

\item{\code{override_existing}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartCommand"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartCommand}{}}}
\subsection{Method \code{StartCommand()}}{
Start computation for given command and input.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartCommand(
  project_id,
  command_submission,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to perform the command for.}

\item{\code{command_submission}}{the command and the input to be executed}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartCommandWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartCommandWithHttpInfo}{}}}
\subsection{Method \code{StartCommandWithHttpInfo()}}{
Start computation for given command and input.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartCommandWithHttpInfo(
  project_id,
  command_submission,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to perform the command for.}

\item{\code{command_submission}}{the command and the input to be executed}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartJob"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartJob}{}}}
\subsection{Method \code{StartJob()}}{
Start computation for given compounds and with given parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartJob(
  project_id,
  job_submission,
  opt_fields = list("command", "progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_submission}}{configuration of the job that will be submitted of the job to be returned}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["command","progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartJobWithHttpInfo}{}}}
\subsection{Method \code{StartJobWithHttpInfo()}}{
Start computation for given compounds and with given parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartJobWithHttpInfo(
  project_id,
  job_submission,
  opt_fields = list("command", "progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_submission}}{configuration of the job that will be submitted of the job to be returned}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["command","progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartJobFromConfig"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartJobFromConfig}{}}}
\subsection{Method \code{StartJobFromConfig()}}{
Start computation for given compounds and with parameters from a stored job-config.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartJobFromConfig(
  project_id,
  job_config_name,
  request_body,
  recompute = NULL,
  opt_fields = list("command", "progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_config_name}}{name if the config to be used}

\item{\code{request_body}}{List of alignedFeatureIds to be computed}

\item{\code{recompute}}{(optional) enable or disable recompute. If null the stored value will be used.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["command","progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-StartJobFromConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-StartJobFromConfigWithHttpInfo}{}}}
\subsection{Method \code{StartJobFromConfigWithHttpInfo()}}{
Start computation for given compounds and with parameters from a stored job-config.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$StartJobFromConfigWithHttpInfo(
  project_id,
  job_config_name,
  request_body,
  recompute = NULL,
  opt_fields = list("command", "progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_config_name}}{name if the config to be used}

\item{\code{request_body}}{List of alignedFeatureIds to be computed}

\item{\code{recompute}}{(optional) enable or disable recompute. If null the stored value will be used.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["command","progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JobsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-JobsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JobsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
