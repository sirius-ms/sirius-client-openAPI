% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lcms_submission_parameters.R
\docType{class}
\name{LcmsSubmissionParameters}
\alias{LcmsSubmissionParameters}
\title{LcmsSubmissionParameters}
\format{
An \code{R6Class} generator object
}
\description{
LcmsSubmissionParameters Class

LcmsSubmissionParameters Class
}
\details{
Create a new LcmsSubmissionParameters
}
\examples{

## ------------------------------------------------
## Method `LcmsSubmissionParameters$toList`
## ------------------------------------------------

# convert array of LcmsSubmissionParameters (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{alignLCMSRuns}}{Specifies whether LC/MS runs should be aligned character [optional]}

\item{\code{noiseIntensity}}{Noise level under which all peaks are considered to be likely noise. A peak has to be at least 3x noise level  to be picked as feature. Peaks with MS/MS are still picked even though they might be below noise level.  If not specified, the noise intensity is detected automatically from data. We recommend to NOT specify  this parameter, as the automated detection is usually sufficient. numeric [optional]}

\item{\code{traceMaxMassDeviation}}{Maximal allowed mass deviation for peaks in ms1 to be considered as belonging to the same trace. \link{Deviation} [optional]}

\item{\code{alignMaxMassDeviation}}{Maximal allowed mass deviation for aligning features. If not specified, this parameter is estimated from data. \link{Deviation} [optional]}

\item{\code{alignMaxRetentionTimeDeviation}}{Maximal allowed retention time error in seconds for aligning features. If not specified, this parameter is estimated from data. numeric [optional]}

\item{\code{minSNR}}{Minimum ratio between peak height and noise intensity for detecting features. By default, this value is 3. Features with good MS/MS are always picked independent of their intensity. For picking very low intensive features we recommend a min-snr of 2, but this will increase runtime and storage memory numeric [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LcmsSubmissionParameters-new}{\code{LcmsSubmissionParameters$new()}}
\item \href{#method-LcmsSubmissionParameters-toJSON}{\code{LcmsSubmissionParameters$toJSON()}}
\item \href{#method-LcmsSubmissionParameters-toList}{\code{LcmsSubmissionParameters$toList()}}
\item \href{#method-LcmsSubmissionParameters-toSimpleType}{\code{LcmsSubmissionParameters$toSimpleType()}}
\item \href{#method-LcmsSubmissionParameters-fromJSON}{\code{LcmsSubmissionParameters$fromJSON()}}
\item \href{#method-LcmsSubmissionParameters-toJSONString}{\code{LcmsSubmissionParameters$toJSONString()}}
\item \href{#method-LcmsSubmissionParameters-fromJSONString}{\code{LcmsSubmissionParameters$fromJSONString()}}
\item \href{#method-LcmsSubmissionParameters-validateJSON}{\code{LcmsSubmissionParameters$validateJSON()}}
\item \href{#method-LcmsSubmissionParameters-toString}{\code{LcmsSubmissionParameters$toString()}}
\item \href{#method-LcmsSubmissionParameters-isValid}{\code{LcmsSubmissionParameters$isValid()}}
\item \href{#method-LcmsSubmissionParameters-getInvalidFields}{\code{LcmsSubmissionParameters$getInvalidFields()}}
\item \href{#method-LcmsSubmissionParameters-print}{\code{LcmsSubmissionParameters$print()}}
\item \href{#method-LcmsSubmissionParameters-clone}{\code{LcmsSubmissionParameters$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-new"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new LcmsSubmissionParameters class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$new(
  alignLCMSRuns = TRUE,
  noiseIntensity = -1,
  traceMaxMassDeviation = NULL,
  alignMaxMassDeviation = NULL,
  alignMaxRetentionTimeDeviation = -1,
  minSNR = 3,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{alignLCMSRuns}}{Specifies whether LC/MS runs should be aligned. Default to TRUE.}

\item{\code{noiseIntensity}}{Noise level under which all peaks are considered to be likely noise. A peak has to be at least 3x noise level  to be picked as feature. Peaks with MS/MS are still picked even though they might be below noise level.  If not specified, the noise intensity is detected automatically from data. We recommend to NOT specify  this parameter, as the automated detection is usually sufficient.. Default to -1.}

\item{\code{traceMaxMassDeviation}}{Maximal allowed mass deviation for peaks in ms1 to be considered as belonging to the same trace.}

\item{\code{alignMaxMassDeviation}}{Maximal allowed mass deviation for aligning features. If not specified, this parameter is estimated from data.}

\item{\code{alignMaxRetentionTimeDeviation}}{Maximal allowed retention time error in seconds for aligning features. If not specified, this parameter is estimated from data.. Default to -1.}

\item{\code{minSNR}}{Minimum ratio between peak height and noise intensity for detecting features. By default, this value is 3. Features with good MS/MS are always picked independent of their intensity. For picking very low intensive features we recommend a min-snr of 2, but this will increase runtime and storage memory. Default to 3.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-toList"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
LcmsSubmissionParameters as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of LcmsSubmissionParameters (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert LcmsSubmissionParameters to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of LcmsSubmissionParameters
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of LcmsSubmissionParameters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LcmsSubmissionParameters in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of LcmsSubmissionParameters
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of LcmsSubmissionParameters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to LcmsSubmissionParameters and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-toString"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of LcmsSubmissionParameters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-print"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LcmsSubmissionParameters-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LcmsSubmissionParameters-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LcmsSubmissionParameters$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
