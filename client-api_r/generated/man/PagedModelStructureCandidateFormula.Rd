% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paged_model_structure_candidate_formula.R
\docType{class}
\name{PagedModelStructureCandidateFormula}
\alias{PagedModelStructureCandidateFormula}
\title{PagedModelStructureCandidateFormula}
\format{
An \code{R6Class} generator object
}
\description{
PagedModelStructureCandidateFormula Class

PagedModelStructureCandidateFormula Class
}
\details{
Create a new PagedModelStructureCandidateFormula
}
\examples{

## ------------------------------------------------
## Method `PagedModelStructureCandidateFormula$toList`
## ------------------------------------------------

# convert array of PagedModelStructureCandidateFormula (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{content}}{list(\link{StructureCandidateFormula}) [optional]}

\item{\code{page}}{\link{PageMetadata} [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PagedModelStructureCandidateFormula-new}{\code{PagedModelStructureCandidateFormula$new()}}
\item \href{#method-PagedModelStructureCandidateFormula-toJSON}{\code{PagedModelStructureCandidateFormula$toJSON()}}
\item \href{#method-PagedModelStructureCandidateFormula-toList}{\code{PagedModelStructureCandidateFormula$toList()}}
\item \href{#method-PagedModelStructureCandidateFormula-toSimpleType}{\code{PagedModelStructureCandidateFormula$toSimpleType()}}
\item \href{#method-PagedModelStructureCandidateFormula-fromJSON}{\code{PagedModelStructureCandidateFormula$fromJSON()}}
\item \href{#method-PagedModelStructureCandidateFormula-toJSONString}{\code{PagedModelStructureCandidateFormula$toJSONString()}}
\item \href{#method-PagedModelStructureCandidateFormula-fromJSONString}{\code{PagedModelStructureCandidateFormula$fromJSONString()}}
\item \href{#method-PagedModelStructureCandidateFormula-validateJSON}{\code{PagedModelStructureCandidateFormula$validateJSON()}}
\item \href{#method-PagedModelStructureCandidateFormula-toString}{\code{PagedModelStructureCandidateFormula$toString()}}
\item \href{#method-PagedModelStructureCandidateFormula-isValid}{\code{PagedModelStructureCandidateFormula$isValid()}}
\item \href{#method-PagedModelStructureCandidateFormula-getInvalidFields}{\code{PagedModelStructureCandidateFormula$getInvalidFields()}}
\item \href{#method-PagedModelStructureCandidateFormula-print}{\code{PagedModelStructureCandidateFormula$print()}}
\item \href{#method-PagedModelStructureCandidateFormula-clone}{\code{PagedModelStructureCandidateFormula$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-new"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PagedModelStructureCandidateFormula class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$new(content = NULL, page = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content}}{content}

\item{\code{page}}{page}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-toList"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PagedModelStructureCandidateFormula as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of PagedModelStructureCandidateFormula (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert PagedModelStructureCandidateFormula to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of PagedModelStructureCandidateFormula
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PagedModelStructureCandidateFormula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelStructureCandidateFormula in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of PagedModelStructureCandidateFormula
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PagedModelStructureCandidateFormula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to PagedModelStructureCandidateFormula and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-toString"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of PagedModelStructureCandidateFormula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-print"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PagedModelStructureCandidateFormula-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PagedModelStructureCandidateFormula-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PagedModelStructureCandidateFormula$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
