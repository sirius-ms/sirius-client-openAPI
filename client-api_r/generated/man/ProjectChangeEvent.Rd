% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_change_event.R
\docType{class}
\name{ProjectChangeEvent}
\alias{ProjectChangeEvent}
\title{ProjectChangeEvent}
\format{
An \code{R6Class} generator object
}
\description{
ProjectChangeEvent Class

ProjectChangeEvent Class
}
\details{
Create a new ProjectChangeEvent
}
\examples{

## ------------------------------------------------
## Method `ProjectChangeEvent$toList`
## ------------------------------------------------

# convert array of ProjectChangeEvent (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{eventType}}{character [optional]}

\item{\code{projectId}}{character [optional]}

\item{\code{compoundId}}{character [optional]}

\item{\code{featuredId}}{character [optional]}

\item{\code{formulaId}}{character [optional]}

\item{\code{structureInChIKey}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ProjectChangeEvent-new}{\code{ProjectChangeEvent$new()}}
\item \href{#method-ProjectChangeEvent-toJSON}{\code{ProjectChangeEvent$toJSON()}}
\item \href{#method-ProjectChangeEvent-toList}{\code{ProjectChangeEvent$toList()}}
\item \href{#method-ProjectChangeEvent-toSimpleType}{\code{ProjectChangeEvent$toSimpleType()}}
\item \href{#method-ProjectChangeEvent-fromJSON}{\code{ProjectChangeEvent$fromJSON()}}
\item \href{#method-ProjectChangeEvent-toJSONString}{\code{ProjectChangeEvent$toJSONString()}}
\item \href{#method-ProjectChangeEvent-fromJSONString}{\code{ProjectChangeEvent$fromJSONString()}}
\item \href{#method-ProjectChangeEvent-validateJSON}{\code{ProjectChangeEvent$validateJSON()}}
\item \href{#method-ProjectChangeEvent-toString}{\code{ProjectChangeEvent$toString()}}
\item \href{#method-ProjectChangeEvent-isValid}{\code{ProjectChangeEvent$isValid()}}
\item \href{#method-ProjectChangeEvent-getInvalidFields}{\code{ProjectChangeEvent$getInvalidFields()}}
\item \href{#method-ProjectChangeEvent-print}{\code{ProjectChangeEvent$print()}}
\item \href{#method-ProjectChangeEvent-clone}{\code{ProjectChangeEvent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-new"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ProjectChangeEvent class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$new(
  eventType = NULL,
  projectId = NULL,
  compoundId = NULL,
  featuredId = NULL,
  formulaId = NULL,
  structureInChIKey = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{eventType}}{eventType}

\item{\code{projectId}}{projectId}

\item{\code{compoundId}}{compoundId}

\item{\code{featuredId}}{featuredId}

\item{\code{formulaId}}{formulaId}

\item{\code{structureInChIKey}}{structureInChIKey}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-toList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ProjectChangeEvent as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of ProjectChangeEvent (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert ProjectChangeEvent to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of ProjectChangeEvent
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ProjectChangeEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ProjectChangeEvent in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of ProjectChangeEvent
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ProjectChangeEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to ProjectChangeEvent and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-toString"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of ProjectChangeEvent
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-print"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectChangeEvent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectChangeEvent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectChangeEvent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
