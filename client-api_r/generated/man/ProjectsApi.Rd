% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projects_api.R
\docType{class}
\name{ProjectsApi}
\alias{ProjectsApi}
\title{Projects operations}
\format{
An \code{R6Class} generator object
}
\description{
ProjectsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.1
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  CloseProject  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | unique name/identifier of the  project-space to be closed.

#Close project-space and remove it from application
api_instance <- rsirius_api$new()

api_instance$projects_api$CloseProject(var_project_id)


####################  CreateProject  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | unique name/identifier that shall be used to access the newly created project-space. Must consist only of [a-zA-Z0-9_-].
var_path_to_project <- "path_to_project_example" # character | local file path where the project will be created. If NULL, project will be stored by its projectId in default project location. DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases. (Optional)
var_opt_fields <- c("none") # array[character] |  (Optional)

#Create and open a new project-space at given location and make it accessible via the given projectId.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$CreateProject(var_project_id, path_to_project = var_path_to_project, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$projects_api$CreateProject(var_project_id, path_to_project = var_path_to_project, opt_fields = var_opt_fields)
dput(result)


####################  GetCanopusClassyFireData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | 
var_charge <- 56 # integer | 

#Get CANOPUS prediction vector definition for ClassyFire classes
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCanopusClassyFireData(var_project_id, var_chargedata_file = "result.txt")
result <- api_instance$projects_api$GetCanopusClassyFireData(var_project_id, var_charge)
dput(result)


####################  GetCanopusNpcData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | 
var_charge <- 56 # integer | 

#Get CANOPUS prediction vector definition for NPC classes
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCanopusNpcData(var_project_id, var_chargedata_file = "result.txt")
result <- api_instance$projects_api$GetCanopusNpcData(var_project_id, var_charge)
dput(result)


####################  GetFingerIdData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | 
var_charge <- 56 # integer | 

#Get CSI:FingerID fingerprint (prediction vector) definition
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFingerIdData(var_project_id, var_chargedata_file = "result.txt")
result <- api_instance$projects_api$GetFingerIdData(var_project_id, var_charge)
dput(result)


####################  GetProject  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | unique name/identifier tof the project-space to be accessed.
var_opt_fields <- c("none") # array[character] |  (Optional)

#Get project space info by its projectId.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetProject(var_project_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$projects_api$GetProject(var_project_id, opt_fields = var_opt_fields)
dput(result)


####################  GetProjects  ####################

library(Rsirius)

#List opened project spaces.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetProjects(data_file = "result.txt")
result <- api_instance$projects_api$GetProjects()
dput(result)


####################  ImportMsRunData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | Project-space to import into.
var_input_files <- c(123) # array[data.frame] |  (Optional)
var_parameters <- LcmsSubmissionParameters$new("alignLCMSRuns_example") # LcmsSubmissionParameters |  (Optional)

#Import and Align full MS-Runs from various formats into the specified project  Possible formats (mzML, mzXML)
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportMsRunData(var_project_id, input_files = var_input_files, parameters = var_parametersdata_file = "result.txt")
result <- api_instance$projects_api$ImportMsRunData(var_project_id, input_files = var_input_files, parameters = var_parameters)
dput(result)


####################  ImportMsRunDataAsJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | Project-space to import into.
var_opt_fields <- c("none") # array[character] | Set of optional fields to be included. Use 'none' only to override defaults. (Optional)
var_input_files <- c(123) # array[data.frame] |  (Optional)
var_parameters <- LcmsSubmissionParameters$new("alignLCMSRuns_example") # LcmsSubmissionParameters |  (Optional)

#Import and Align full MS-Runs from various formats into the specified project as background job.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportMsRunDataAsJob(var_project_id, opt_fields = var_opt_fields, input_files = var_input_files, parameters = var_parametersdata_file = "result.txt")
result <- api_instance$projects_api$ImportMsRunDataAsJob(var_project_id, opt_fields = var_opt_fields, input_files = var_input_files, parameters = var_parameters)
dput(result)


####################  ImportPreprocessedData  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_ignore_formulas <- FALSE # character |  (Optional)
var_allow_ms1_only <- TRUE # character |  (Optional)
var_input_files <- c(123) # array[data.frame] |  (Optional)

#Import already preprocessed ms/ms data from various formats into the specified project  Possible formats (ms, mgf, cef, msp)
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportPreprocessedData(var_project_id, ignore_formulas = var_ignore_formulas, allow_ms1_only = var_allow_ms1_only, input_files = var_input_filesdata_file = "result.txt")
result <- api_instance$projects_api$ImportPreprocessedData(var_project_id, ignore_formulas = var_ignore_formulas, allow_ms1_only = var_allow_ms1_only, input_files = var_input_files)
dput(result)


####################  ImportPreprocessedDataAsJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_ignore_formulas <- FALSE # character |  (Optional)
var_allow_ms1_only <- TRUE # character |  (Optional)
var_opt_fields <- c("none") # array[character] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)
var_input_files <- c(123) # array[data.frame] |  (Optional)

#Import ms/ms data from the given format into the specified project-space as background job.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportPreprocessedDataAsJob(var_project_id, ignore_formulas = var_ignore_formulas, allow_ms1_only = var_allow_ms1_only, opt_fields = var_opt_fields, input_files = var_input_filesdata_file = "result.txt")
result <- api_instance$projects_api$ImportPreprocessedDataAsJob(var_project_id, ignore_formulas = var_ignore_formulas, allow_ms1_only = var_allow_ms1_only, opt_fields = var_opt_fields, input_files = var_input_files)
dput(result)


####################  OpenProject  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | unique name/identifier that shall be used to access the opened project-space. Must consist only of [a-zA-Z0-9_-].
var_path_to_project <- "path_to_project_example" # character | local file path to open the project from. If NULL, project will be loaded by it projectId from default project location.  DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases. (Optional)
var_opt_fields <- c("none") # array[character] |  (Optional)

#Open an existing project-space and make it accessible via the given projectId.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$OpenProject(var_project_id, path_to_project = var_path_to_project, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$projects_api$OpenProject(var_project_id, path_to_project = var_path_to_project, opt_fields = var_opt_fields)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ProjectsApi-new}{\code{ProjectsApi$new()}}
\item \href{#method-ProjectsApi-CloseProject}{\code{ProjectsApi$CloseProject()}}
\item \href{#method-ProjectsApi-CloseProjectWithHttpInfo}{\code{ProjectsApi$CloseProjectWithHttpInfo()}}
\item \href{#method-ProjectsApi-CreateProject}{\code{ProjectsApi$CreateProject()}}
\item \href{#method-ProjectsApi-CreateProjectWithHttpInfo}{\code{ProjectsApi$CreateProjectWithHttpInfo()}}
\item \href{#method-ProjectsApi-GetCanopusClassyFireData}{\code{ProjectsApi$GetCanopusClassyFireData()}}
\item \href{#method-ProjectsApi-GetCanopusClassyFireDataWithHttpInfo}{\code{ProjectsApi$GetCanopusClassyFireDataWithHttpInfo()}}
\item \href{#method-ProjectsApi-GetCanopusNpcData}{\code{ProjectsApi$GetCanopusNpcData()}}
\item \href{#method-ProjectsApi-GetCanopusNpcDataWithHttpInfo}{\code{ProjectsApi$GetCanopusNpcDataWithHttpInfo()}}
\item \href{#method-ProjectsApi-GetFingerIdData}{\code{ProjectsApi$GetFingerIdData()}}
\item \href{#method-ProjectsApi-GetFingerIdDataWithHttpInfo}{\code{ProjectsApi$GetFingerIdDataWithHttpInfo()}}
\item \href{#method-ProjectsApi-GetProject}{\code{ProjectsApi$GetProject()}}
\item \href{#method-ProjectsApi-GetProjectWithHttpInfo}{\code{ProjectsApi$GetProjectWithHttpInfo()}}
\item \href{#method-ProjectsApi-GetProjects}{\code{ProjectsApi$GetProjects()}}
\item \href{#method-ProjectsApi-GetProjectsWithHttpInfo}{\code{ProjectsApi$GetProjectsWithHttpInfo()}}
\item \href{#method-ProjectsApi-ImportMsRunData}{\code{ProjectsApi$ImportMsRunData()}}
\item \href{#method-ProjectsApi-ImportMsRunDataWithHttpInfo}{\code{ProjectsApi$ImportMsRunDataWithHttpInfo()}}
\item \href{#method-ProjectsApi-ImportMsRunDataAsJob}{\code{ProjectsApi$ImportMsRunDataAsJob()}}
\item \href{#method-ProjectsApi-ImportMsRunDataAsJobWithHttpInfo}{\code{ProjectsApi$ImportMsRunDataAsJobWithHttpInfo()}}
\item \href{#method-ProjectsApi-ImportPreprocessedData}{\code{ProjectsApi$ImportPreprocessedData()}}
\item \href{#method-ProjectsApi-ImportPreprocessedDataWithHttpInfo}{\code{ProjectsApi$ImportPreprocessedDataWithHttpInfo()}}
\item \href{#method-ProjectsApi-ImportPreprocessedDataAsJob}{\code{ProjectsApi$ImportPreprocessedDataAsJob()}}
\item \href{#method-ProjectsApi-ImportPreprocessedDataAsJobWithHttpInfo}{\code{ProjectsApi$ImportPreprocessedDataAsJobWithHttpInfo()}}
\item \href{#method-ProjectsApi-OpenProject}{\code{ProjectsApi$OpenProject()}}
\item \href{#method-ProjectsApi-OpenProjectWithHttpInfo}{\code{ProjectsApi$OpenProjectWithHttpInfo()}}
\item \href{#method-ProjectsApi-clone}{\code{ProjectsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ProjectsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CloseProject"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CloseProject}{}}}
\subsection{Method \code{CloseProject()}}{
Close project-space and remove it from application
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CloseProject(project_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier of the  project-space to be closed.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CloseProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CloseProjectWithHttpInfo}{}}}
\subsection{Method \code{CloseProjectWithHttpInfo()}}{
Close project-space and remove it from application
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CloseProjectWithHttpInfo(project_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier of the  project-space to be closed.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CreateProject"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CreateProject}{}}}
\subsection{Method \code{CreateProject()}}{
Create and open a new project-space at given location and make it accessible via the given projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CreateProject(
  project_id,
  path_to_project = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier that shall be used to access the newly created project-space. Must consist only of [a-zA-Z0-9_-].}

\item{\code{path_to_project}}{(optional) local file path where the project will be created. If NULL, project will be stored by its projectId in default project location. DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ProjectInfo
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CreateProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CreateProjectWithHttpInfo}{}}}
\subsection{Method \code{CreateProjectWithHttpInfo()}}{
Create and open a new project-space at given location and make it accessible via the given projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CreateProjectWithHttpInfo(
  project_id,
  path_to_project = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier that shall be used to access the newly created project-space. Must consist only of [a-zA-Z0-9_-].}

\item{\code{path_to_project}}{(optional) local file path where the project will be created. If NULL, project will be stored by its projectId in default project location. DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ProjectInfo) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetCanopusClassyFireData"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetCanopusClassyFireData}{}}}
\subsection{Method \code{GetCanopusClassyFireData()}}{
Get CANOPUS prediction vector definition for ClassyFire classes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetCanopusClassyFireData(project_id, charge, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetCanopusClassyFireDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetCanopusClassyFireDataWithHttpInfo}{}}}
\subsection{Method \code{GetCanopusClassyFireDataWithHttpInfo()}}{
Get CANOPUS prediction vector definition for ClassyFire classes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetCanopusClassyFireDataWithHttpInfo(
  project_id,
  charge,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetCanopusNpcData"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetCanopusNpcData}{}}}
\subsection{Method \code{GetCanopusNpcData()}}{
Get CANOPUS prediction vector definition for NPC classes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetCanopusNpcData(project_id, charge, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetCanopusNpcDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetCanopusNpcDataWithHttpInfo}{}}}
\subsection{Method \code{GetCanopusNpcDataWithHttpInfo()}}{
Get CANOPUS prediction vector definition for NPC classes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetCanopusNpcDataWithHttpInfo(
  project_id,
  charge,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetFingerIdData"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetFingerIdData}{}}}
\subsection{Method \code{GetFingerIdData()}}{
Get CSI:FingerID fingerprint (prediction vector) definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetFingerIdData(project_id, charge, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetFingerIdDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetFingerIdDataWithHttpInfo}{}}}
\subsection{Method \code{GetFingerIdDataWithHttpInfo()}}{
Get CSI:FingerID fingerprint (prediction vector) definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetFingerIdDataWithHttpInfo(
  project_id,
  charge,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{}

\item{\code{charge}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetProject"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetProject}{}}}
\subsection{Method \code{GetProject()}}{
Get project space info by its projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetProject(
  project_id,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier tof the project-space to be accessed.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ProjectInfo
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetProjectWithHttpInfo}{}}}
\subsection{Method \code{GetProjectWithHttpInfo()}}{
Get project space info by its projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetProjectWithHttpInfo(
  project_id,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier tof the project-space to be accessed.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ProjectInfo) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetProjects"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetProjects}{}}}
\subsection{Method \code{GetProjects()}}{
List opened project spaces.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetProjects(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[ProjectInfo]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-GetProjectsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-GetProjectsWithHttpInfo}{}}}
\subsection{Method \code{GetProjectsWithHttpInfo()}}{
List opened project spaces.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$GetProjectsWithHttpInfo(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[ProjectInfo]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportMsRunData"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportMsRunData}{}}}
\subsection{Method \code{ImportMsRunData()}}{
Import and Align full MS-Runs from various formats into the specified project  Possible formats (mzML, mzXML)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportMsRunData(
  project_id,
  input_files = NULL,
  parameters = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{Project-space to import into.}

\item{\code{input_files}}{(optional) No description}

\item{\code{parameters}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ImportResult
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportMsRunDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportMsRunDataWithHttpInfo}{}}}
\subsection{Method \code{ImportMsRunDataWithHttpInfo()}}{
Import and Align full MS-Runs from various formats into the specified project  Possible formats (mzML, mzXML)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportMsRunDataWithHttpInfo(
  project_id,
  input_files = NULL,
  parameters = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{Project-space to import into.}

\item{\code{input_files}}{(optional) No description}

\item{\code{parameters}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ImportResult) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportMsRunDataAsJob"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportMsRunDataAsJob}{}}}
\subsection{Method \code{ImportMsRunDataAsJob()}}{
Import and Align full MS-Runs from various formats into the specified project as background job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportMsRunDataAsJob(
  project_id,
  opt_fields = list("progress"),
  input_files = NULL,
  parameters = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{Project-space to import into.}

\item{\code{opt_fields}}{(optional) Set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{input_files}}{(optional) No description}

\item{\code{parameters}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportMsRunDataAsJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportMsRunDataAsJobWithHttpInfo}{}}}
\subsection{Method \code{ImportMsRunDataAsJobWithHttpInfo()}}{
Import and Align full MS-Runs from various formats into the specified project as background job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportMsRunDataAsJobWithHttpInfo(
  project_id,
  opt_fields = list("progress"),
  input_files = NULL,
  parameters = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{Project-space to import into.}

\item{\code{opt_fields}}{(optional) Set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{input_files}}{(optional) No description}

\item{\code{parameters}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportPreprocessedData"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportPreprocessedData}{}}}
\subsection{Method \code{ImportPreprocessedData()}}{
Import already preprocessed ms/ms data from various formats into the specified project  Possible formats (ms, mgf, cef, msp)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportPreprocessedData(
  project_id,
  ignore_formulas = FALSE,
  allow_ms1_only = TRUE,
  input_files = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{allow_ms1_only}}{(optional) No description (default value: TRUE)}

\item{\code{input_files}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ImportResult
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportPreprocessedDataWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportPreprocessedDataWithHttpInfo}{}}}
\subsection{Method \code{ImportPreprocessedDataWithHttpInfo()}}{
Import already preprocessed ms/ms data from various formats into the specified project  Possible formats (ms, mgf, cef, msp)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportPreprocessedDataWithHttpInfo(
  project_id,
  ignore_formulas = FALSE,
  allow_ms1_only = TRUE,
  input_files = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{allow_ms1_only}}{(optional) No description (default value: TRUE)}

\item{\code{input_files}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ImportResult) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportPreprocessedDataAsJob"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportPreprocessedDataAsJob}{}}}
\subsection{Method \code{ImportPreprocessedDataAsJob()}}{
Import ms/ms data from the given format into the specified project-space as background job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportPreprocessedDataAsJob(
  project_id,
  ignore_formulas = FALSE,
  allow_ms1_only = TRUE,
  opt_fields = list("progress"),
  input_files = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{allow_ms1_only}}{(optional) No description (default value: TRUE)}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{input_files}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ImportPreprocessedDataAsJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ImportPreprocessedDataAsJobWithHttpInfo}{}}}
\subsection{Method \code{ImportPreprocessedDataAsJobWithHttpInfo()}}{
Import ms/ms data from the given format into the specified project-space as background job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ImportPreprocessedDataAsJobWithHttpInfo(
  project_id,
  ignore_formulas = FALSE,
  allow_ms1_only = TRUE,
  opt_fields = list("progress"),
  input_files = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{allow_ms1_only}}{(optional) No description (default value: TRUE)}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["progress"])}

\item{\code{input_files}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-OpenProject"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-OpenProject}{}}}
\subsection{Method \code{OpenProject()}}{
Open an existing project-space and make it accessible via the given projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$OpenProject(
  project_id,
  path_to_project = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier that shall be used to access the opened project-space. Must consist only of [a-zA-Z0-9_-].}

\item{\code{path_to_project}}{(optional) local file path to open the project from. If NULL, project will be loaded by it projectId from default project location.  DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ProjectInfo
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-OpenProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-OpenProjectWithHttpInfo}{}}}
\subsection{Method \code{OpenProjectWithHttpInfo()}}{
Open an existing project-space and make it accessible via the given projectId.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$OpenProjectWithHttpInfo(
  project_id,
  path_to_project = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{unique name/identifier that shall be used to access the opened project-space. Must consist only of [a-zA-Z0-9_-].}

\item{\code{path_to_project}}{(optional) local file path to open the project from. If NULL, project will be loaded by it projectId from default project location.  DEPRECATED: This parameter relies on the local filesystem and will likely be removed in later versions of this API to allow for more flexible use cases.}

\item{\code{opt_fields}}{(optional) No description (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ProjectInfo) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
