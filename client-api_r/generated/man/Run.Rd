% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\docType{class}
\name{Run}
\alias{Run}
\title{Run}
\format{
An \code{R6Class} generator object
}
\description{
Run Class

Run Class
}
\details{
Create a new Run
}
\examples{

## ------------------------------------------------
## Method `Run$toList`
## ------------------------------------------------

# convert array of Run (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{runId}}{Identifier character [optional]}

\item{\code{name}}{Informative, human-readable name of this run character [optional]}

\item{\code{source}}{Source location character [optional]}

\item{\code{chromatography}}{character [optional]}

\item{\code{ionization}}{character [optional]}

\item{\code{fragmentation}}{character [optional]}

\item{\code{massAnalyzers}}{list(character) [optional]}

\item{\code{tags}}{Key: tagName, value: tag named list(\link{Tag}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Run-new}{\code{Run$new()}}
\item \href{#method-Run-toJSON}{\code{Run$toJSON()}}
\item \href{#method-Run-toList}{\code{Run$toList()}}
\item \href{#method-Run-toSimpleType}{\code{Run$toSimpleType()}}
\item \href{#method-Run-fromJSON}{\code{Run$fromJSON()}}
\item \href{#method-Run-toJSONString}{\code{Run$toJSONString()}}
\item \href{#method-Run-fromJSONString}{\code{Run$fromJSONString()}}
\item \href{#method-Run-validateJSON}{\code{Run$validateJSON()}}
\item \href{#method-Run-toString}{\code{Run$toString()}}
\item \href{#method-Run-isValid}{\code{Run$isValid()}}
\item \href{#method-Run-getInvalidFields}{\code{Run$getInvalidFields()}}
\item \href{#method-Run-print}{\code{Run$print()}}
\item \href{#method-Run-clone}{\code{Run$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-new"></a>}}
\if{latex}{\out{\hypertarget{method-Run-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Run class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$new(
  runId = NULL,
  name = NULL,
  source = NULL,
  chromatography = NULL,
  ionization = NULL,
  fragmentation = NULL,
  massAnalyzers = NULL,
  tags = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{runId}}{Identifier}

\item{\code{name}}{Informative, human-readable name of this run}

\item{\code{source}}{Source location}

\item{\code{chromatography}}{chromatography}

\item{\code{ionization}}{ionization}

\item{\code{fragmentation}}{fragmentation}

\item{\code{massAnalyzers}}{massAnalyzers}

\item{\code{tags}}{Key: tagName, value: tag}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Run-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Run-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Run as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Run (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Run-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Run to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Run-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Run
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Run-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Run in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Run-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Run
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Run-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Run and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Run-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Run
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Run-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Run-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-print"></a>}}
\if{latex}{\out{\hypertarget{method-Run-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Run-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
