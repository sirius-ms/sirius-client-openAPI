% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runs_api.R
\docType{class}
\name{RunsApi}
\alias{RunsApi}
\title{Runs operations}
\format{
An \code{R6Class} generator object
}
\description{
RunsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.1
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  AddTagsToRunExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to add to.
var_run_id <- "run_id_example" # character | run to add tags to.
var_tag <- c(Tag$new("tagName_example", 123)) # array[Tag] | tags to add.

#[EXPERIMENTAL] Add tags to a run in the project
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$AddTagsToRunExperimental(var_project_id, var_run_id, var_tagdata_file = "result.txt")
result <- api_instance$runs_api$AddTagsToRunExperimental(var_project_id, var_run_id, var_tag)
dput(result)


####################  ComputeFoldChangeForBlankSubtraction  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to compute the fold change in.
var_sample_type_fold_change_request <- SampleTypeFoldChangeRequest$new(c("sampleRunIds_example"), c("blankRunIds_example"), c("controlRunIds_example")) # SampleTypeFoldChangeRequest | request with lists of run IDs that are sample, blank, and control runs
var_opt_fields <- c("none") # array[character] | job opt fields. (Optional)

#**EXPERIMENTAL** Compute the fold changes that are required for the fold change filter
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ComputeFoldChangeForBlankSubtraction(var_project_id, var_sample_type_fold_change_request, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$runs_api$ComputeFoldChangeForBlankSubtraction(var_project_id, var_sample_type_fold_change_request, opt_fields = var_opt_fields)
dput(result)


####################  GetRunExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_run_id <- "run_id_example" # character | identifier of run to access.
var_opt_fields <- c(RunOptField$new()) # array[RunOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#[EXPERIMENTAL] Get run with the given identifier from the specified project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetRunExperimental(var_project_id, var_run_id, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$runs_api$GetRunExperimental(var_project_id, var_run_id, opt_fields = var_opt_fields)
dput(result)


####################  GetRunPageExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c(RunOptField$new()) # array[RunOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#[EXPERIMENTAL] Get all available runs in the given project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetRunPageExperimental(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$runs_api$GetRunPageExperimental(var_project_id, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetRunsByGroupExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_group_name <- "group_name_example" # character | tag group name.
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c(RunOptField$new()) # array[RunOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#[EXPERIMENTAL] Get runs by tag group
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetRunsByGroupExperimental(var_project_id, var_group_name, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$runs_api$GetRunsByGroupExperimental(var_project_id, var_group_name, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetRunsByTagExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project space to get runs from.
var_filter <- "" # character | tag filter. (Optional)
var_page <- 0 # integer | Zero-based page index (0..N) (Optional)
var_size <- 20 # integer | The size of the page to be returned (Optional)
var_sort <- c("inner_example") # array[character] | Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (Optional)
var_opt_fields <- c(RunOptField$new()) # array[RunOptField] | set of optional fields to be included. Use 'none' only to override defaults. (Optional)

#[EXPERIMENTAL] Get runs by tag
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetRunsByTagExperimental(var_project_id, filter = var_filter, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fieldsdata_file = "result.txt")
result <- api_instance$runs_api$GetRunsByTagExperimental(var_project_id, filter = var_filter, page = var_page, size = var_size, sort = var_sort, opt_fields = var_opt_fields)
dput(result)


####################  GetTagsForRunExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to get from.
var_object_id <- "object_id_example" # character | RunId to get tags for.

#[EXPERIMENTAL] Get all tags associated with this Run
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetTagsForRunExperimental(var_project_id, var_object_iddata_file = "result.txt")
result <- api_instance$runs_api$GetTagsForRunExperimental(var_project_id, var_object_id)
dput(result)


####################  RemoveTagFromRunExperimental  ####################

library(RSirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_run_id <- "run_id_example" # character | run to delete tag from.
var_tag_name <- "tag_name_example" # character | name of the tag to delete.

#[EXPERIMENTAL] Delete tag with the given name from the run with the specified ID in the specified project-space
api_instance <- rsirius_api$new()

api_instance$runs_api$RemoveTagFromRunExperimental(var_project_id, var_run_id, var_tag_name)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RunsApi-new}{\code{RunsApi$new()}}
\item \href{#method-RunsApi-AddTagsToRunExperimental}{\code{RunsApi$AddTagsToRunExperimental()}}
\item \href{#method-RunsApi-AddTagsToRunExperimentalWithHttpInfo}{\code{RunsApi$AddTagsToRunExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-ComputeFoldChangeForBlankSubtraction}{\code{RunsApi$ComputeFoldChangeForBlankSubtraction()}}
\item \href{#method-RunsApi-ComputeFoldChangeForBlankSubtractionWithHttpInfo}{\code{RunsApi$ComputeFoldChangeForBlankSubtractionWithHttpInfo()}}
\item \href{#method-RunsApi-GetRunExperimental}{\code{RunsApi$GetRunExperimental()}}
\item \href{#method-RunsApi-GetRunExperimentalWithHttpInfo}{\code{RunsApi$GetRunExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-GetRunPageExperimental}{\code{RunsApi$GetRunPageExperimental()}}
\item \href{#method-RunsApi-GetRunPageExperimentalWithHttpInfo}{\code{RunsApi$GetRunPageExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-GetRunsByGroupExperimental}{\code{RunsApi$GetRunsByGroupExperimental()}}
\item \href{#method-RunsApi-GetRunsByGroupExperimentalWithHttpInfo}{\code{RunsApi$GetRunsByGroupExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-GetRunsByTagExperimental}{\code{RunsApi$GetRunsByTagExperimental()}}
\item \href{#method-RunsApi-GetRunsByTagExperimentalWithHttpInfo}{\code{RunsApi$GetRunsByTagExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-GetTagsForRunExperimental}{\code{RunsApi$GetTagsForRunExperimental()}}
\item \href{#method-RunsApi-GetTagsForRunExperimentalWithHttpInfo}{\code{RunsApi$GetTagsForRunExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-RemoveTagFromRunExperimental}{\code{RunsApi$RemoveTagFromRunExperimental()}}
\item \href{#method-RunsApi-RemoveTagFromRunExperimentalWithHttpInfo}{\code{RunsApi$RemoveTagFromRunExperimentalWithHttpInfo()}}
\item \href{#method-RunsApi-clone}{\code{RunsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new RunsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-AddTagsToRunExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-AddTagsToRunExperimental}{}}}
\subsection{Method \code{AddTagsToRunExperimental()}}{
[EXPERIMENTAL] Add tags to a run in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$AddTagsToRunExperimental(
  project_id,
  run_id,
  tag,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{run_id}}{run to add tags to.}

\item{\code{tag}}{tags to add.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Tag]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-AddTagsToRunExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-AddTagsToRunExperimentalWithHttpInfo}{}}}
\subsection{Method \code{AddTagsToRunExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Add tags to a run in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$AddTagsToRunExperimentalWithHttpInfo(
  project_id,
  run_id,
  tag,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{run_id}}{run to add tags to.}

\item{\code{tag}}{tags to add.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Tag]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-ComputeFoldChangeForBlankSubtraction"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-ComputeFoldChangeForBlankSubtraction}{}}}
\subsection{Method \code{ComputeFoldChangeForBlankSubtraction()}}{
**EXPERIMENTAL** Compute the fold changes that are required for the fold change filter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$ComputeFoldChangeForBlankSubtraction(
  project_id,
  sample_type_fold_change_request,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to compute the fold change in.}

\item{\code{sample_type_fold_change_request}}{request with lists of run IDs that are sample, blank, and control runs}

\item{\code{opt_fields}}{(optional) job opt fields. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-ComputeFoldChangeForBlankSubtractionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-ComputeFoldChangeForBlankSubtractionWithHttpInfo}{}}}
\subsection{Method \code{ComputeFoldChangeForBlankSubtractionWithHttpInfo()}}{
**EXPERIMENTAL** Compute the fold changes that are required for the fold change filter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$ComputeFoldChangeForBlankSubtractionWithHttpInfo(
  project_id,
  sample_type_fold_change_request,
  opt_fields = list("progress"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to compute the fold change in.}

\item{\code{sample_type_fold_change_request}}{request with lists of run IDs that are sample, blank, and control runs}

\item{\code{opt_fields}}{(optional) job opt fields. (default value: ["progress"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Job) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunExperimental}{}}}
\subsection{Method \code{GetRunExperimental()}}{
[EXPERIMENTAL] Get run with the given identifier from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunExperimental(
  project_id,
  run_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{run_id}}{identifier of run to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Run
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetRunExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get run with the given identifier from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunExperimentalWithHttpInfo(
  project_id,
  run_id,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{run_id}}{identifier of run to access.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Run) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunPageExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunPageExperimental}{}}}
\subsection{Method \code{GetRunPageExperimental()}}{
[EXPERIMENTAL] Get all available runs in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunPageExperimental(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelRun
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunPageExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunPageExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetRunPageExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get all available runs in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunPageExperimentalWithHttpInfo(
  project_id,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelRun) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunsByGroupExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunsByGroupExperimental}{}}}
\subsection{Method \code{GetRunsByGroupExperimental()}}{
[EXPERIMENTAL] Get runs by tag group
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunsByGroupExperimental(
  project_id,
  group_name,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{group_name}}{tag group name.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelRun
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunsByGroupExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunsByGroupExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetRunsByGroupExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get runs by tag group
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunsByGroupExperimentalWithHttpInfo(
  project_id,
  group_name,
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list("none"),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{group_name}}{tag group name.}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: ["none"])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelRun) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunsByTagExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunsByTagExperimental}{}}}
\subsection{Method \code{GetRunsByTagExperimental()}}{
[EXPERIMENTAL] Get runs by tag
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunsByTagExperimental(
  project_id,
  filter = "",
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project space to get runs from.}

\item{\code{filter}}{(optional) tag filter. (default value: "")}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PagedModelRun
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetRunsByTagExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetRunsByTagExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetRunsByTagExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get runs by tag
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetRunsByTagExperimentalWithHttpInfo(
  project_id,
  filter = "",
  page = 0,
  size = 20,
  sort = NULL,
  opt_fields = list(),
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project space to get runs from.}

\item{\code{filter}}{(optional) tag filter. (default value: "")}

\item{\code{page}}{(optional) Zero-based page index (0..N) (default value: 0)}

\item{\code{size}}{(optional) The size of the page to be returned (default value: 20)}

\item{\code{sort}}{(optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.}

\item{\code{opt_fields}}{(optional) set of optional fields to be included. Use 'none' only to override defaults. (default value: [])}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PagedModelRun) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetTagsForRunExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetTagsForRunExperimental}{}}}
\subsection{Method \code{GetTagsForRunExperimental()}}{
[EXPERIMENTAL] Get all tags associated with this Run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetTagsForRunExperimental(project_id, object_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to get from.}

\item{\code{object_id}}{RunId to get tags for.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Tag]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-GetTagsForRunExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-GetTagsForRunExperimentalWithHttpInfo}{}}}
\subsection{Method \code{GetTagsForRunExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Get all tags associated with this Run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$GetTagsForRunExperimentalWithHttpInfo(
  project_id,
  object_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to get from.}

\item{\code{object_id}}{RunId to get tags for.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Tag]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-RemoveTagFromRunExperimental"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-RemoveTagFromRunExperimental}{}}}
\subsection{Method \code{RemoveTagFromRunExperimental()}}{
[EXPERIMENTAL] Delete tag with the given name from the run with the specified ID in the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$RemoveTagFromRunExperimental(project_id, run_id, tag_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{run_id}}{run to delete tag from.}

\item{\code{tag_name}}{name of the tag to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-RemoveTagFromRunExperimentalWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-RemoveTagFromRunExperimentalWithHttpInfo}{}}}
\subsection{Method \code{RemoveTagFromRunExperimentalWithHttpInfo()}}{
[EXPERIMENTAL] Delete tag with the given name from the run with the specified ID in the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$RemoveTagFromRunExperimentalWithHttpInfo(
  project_id,
  run_id,
  tag_name,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{run_id}}{run to delete tag from.}

\item{\code{tag_name}}{name of the tag to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RunsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
