% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sirius.R
\docType{class}
\name{Sirius}
\alias{Sirius}
\title{Sirius}
\format{
An \code{R6Class} generator object
}
\description{
User/developer friendly parameter subset for the Formula/SIRIUS tool  Can use results from Spectral library search tool.

Sirius Class
}
\details{
Create a new Sirius
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{enabled}}{tags whether the tool is enabled character [optional]}

\item{\code{profile}}{\link{InstrumentProfile} [optional]}

\item{\code{numberOfCandidates}}{Number of formula candidates to keep as result list (Formula Candidates). integer [optional]}

\item{\code{numberOfCandidatesPerIonization}}{Use this parameter if you want to force SIRIUS to report at least  NumberOfCandidatesPerIonization results per ionization.  if <= 0, this parameter will have no effect and just the top  NumberOfCandidates results will be reported. integer [optional]}

\item{\code{massAccuracyMS2ppm}}{Maximum allowed mass deviation. Only molecular formulas within this mass window are considered. numeric [optional]}

\item{\code{isotopeMs2Settings}}{Specify how isotope patterns in MS/MS should be handled.  <p>  FILTER: When filtering is enabled, molecular formulas are excluded if their  theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score.  <p>  SCORE: Use them for SCORING. To use this the instrument should produce clear MS/MS isotope patterns  <p>  IGNORE: Ignore that there might be isotope patterns in MS/MS character [optional]}

\item{\code{filterByIsotopePattern}}{When filtering is enabled, molecular formulas are excluded if their theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score. character [optional]}

\item{\code{enforceElGordoFormula}}{El Gordo may predict that an MS/MS spectrum is a lipid spectrum. If enabled, the corresponding molecular formula will be enforeced as molecular formula candidate. character [optional]}

\item{\code{performBottomUpSearch}}{If true, molecular formula generation via bottom up search is enabled. character [optional]}

\item{\code{performDenovoBelowMz}}{Specifies the m/z below which de novo molecular formula generation is enabled. Set to 0 to disable de novo molecular formula generation. numeric [optional]}

\item{\code{formulaSearchDBs}}{List Structure database to extract molecular formulas from to reduce formula search space.  SIRIUS is quite good at de novo formula annotation, so only enable if you have a good reason. list(character) [optional]}

\item{\code{applyFormulaConstraintsToDBAndBottomUpSearch}}{By default, the formula (element) constraints are only applied to de novo molecular formula generation.  If true, the constraints are as well applied to database search and bottom up search. character [optional]}

\item{\code{enforcedFormulaConstraints}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Enforced: Enforced elements are always considered character [optional]}

\item{\code{fallbackFormulaConstraints}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Fallback: Fallback elements are used, if the auto-detection fails (e.g. no isotope pattern available) character [optional]}

\item{\code{detectableElements}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Detectable: Detectable elements are added to the chemical alphabet, if there are indications for them (e.g. in isotope pattern) list(character) [optional]}

\item{\code{ilpTimeout}}{\link{Timeout} [optional]}

\item{\code{useHeuristic}}{\link{UseHeuristic} [optional]}

\item{\code{injectSpecLibMatchFormulas}}{If true formula candidates that belong to spectral library matches above a certain threshold will  we inject/preserved for further analyses no matter which score they have or which filter is applied character [optional]}

\item{\code{minScoreToInjectSpecLibMatch}}{Similarity Threshold to inject formula candidates no matter which score/rank they have or which filter settings are applied.  If threshold >= 0 formulas candidates with reference spectrum similarity above the threshold will be injected. numeric [optional]}

\item{\code{minPeaksToInjectSpecLibMatch}}{Matching peaks threshold to inject formula candidates no matter which score they have or which filter is applied. integer [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Sirius-new}{\code{Sirius$new()}}
\item \href{#method-Sirius-toJSON}{\code{Sirius$toJSON()}}
\item \href{#method-Sirius-fromJSON}{\code{Sirius$fromJSON()}}
\item \href{#method-Sirius-toJSONString}{\code{Sirius$toJSONString()}}
\item \href{#method-Sirius-fromJSONString}{\code{Sirius$fromJSONString()}}
\item \href{#method-Sirius-validateJSON}{\code{Sirius$validateJSON()}}
\item \href{#method-Sirius-toString}{\code{Sirius$toString()}}
\item \href{#method-Sirius-isValid}{\code{Sirius$isValid()}}
\item \href{#method-Sirius-getInvalidFields}{\code{Sirius$getInvalidFields()}}
\item \href{#method-Sirius-print}{\code{Sirius$print()}}
\item \href{#method-Sirius-clone}{\code{Sirius$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-new"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Sirius class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$new(
  enabled = NULL,
  profile = NULL,
  numberOfCandidates = NULL,
  numberOfCandidatesPerIonization = NULL,
  massAccuracyMS2ppm = NULL,
  isotopeMs2Settings = NULL,
  filterByIsotopePattern = NULL,
  enforceElGordoFormula = NULL,
  performBottomUpSearch = NULL,
  performDenovoBelowMz = NULL,
  formulaSearchDBs = NULL,
  applyFormulaConstraintsToDBAndBottomUpSearch = NULL,
  enforcedFormulaConstraints = NULL,
  fallbackFormulaConstraints = NULL,
  detectableElements = NULL,
  ilpTimeout = NULL,
  useHeuristic = NULL,
  injectSpecLibMatchFormulas = NULL,
  minScoreToInjectSpecLibMatch = NULL,
  minPeaksToInjectSpecLibMatch = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{enabled}}{tags whether the tool is enabled}

\item{\code{profile}}{profile}

\item{\code{numberOfCandidates}}{Number of formula candidates to keep as result list (Formula Candidates).}

\item{\code{numberOfCandidatesPerIonization}}{Use this parameter if you want to force SIRIUS to report at least  NumberOfCandidatesPerIonization results per ionization.  if <= 0, this parameter will have no effect and just the top  NumberOfCandidates results will be reported.}

\item{\code{massAccuracyMS2ppm}}{Maximum allowed mass deviation. Only molecular formulas within this mass window are considered.}

\item{\code{isotopeMs2Settings}}{Specify how isotope patterns in MS/MS should be handled.  <p>  FILTER: When filtering is enabled, molecular formulas are excluded if their  theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score.  <p>  SCORE: Use them for SCORING. To use this the instrument should produce clear MS/MS isotope patterns  <p>  IGNORE: Ignore that there might be isotope patterns in MS/MS}

\item{\code{filterByIsotopePattern}}{When filtering is enabled, molecular formulas are excluded if their theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score.}

\item{\code{enforceElGordoFormula}}{El Gordo may predict that an MS/MS spectrum is a lipid spectrum. If enabled, the corresponding molecular formula will be enforeced as molecular formula candidate.}

\item{\code{performBottomUpSearch}}{If true, molecular formula generation via bottom up search is enabled.}

\item{\code{performDenovoBelowMz}}{Specifies the m/z below which de novo molecular formula generation is enabled. Set to 0 to disable de novo molecular formula generation.}

\item{\code{formulaSearchDBs}}{List Structure database to extract molecular formulas from to reduce formula search space.  SIRIUS is quite good at de novo formula annotation, so only enable if you have a good reason.}

\item{\code{applyFormulaConstraintsToDBAndBottomUpSearch}}{By default, the formula (element) constraints are only applied to de novo molecular formula generation.  If true, the constraints are as well applied to database search and bottom up search.}

\item{\code{enforcedFormulaConstraints}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Enforced: Enforced elements are always considered}

\item{\code{fallbackFormulaConstraints}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Fallback: Fallback elements are used, if the auto-detection fails (e.g. no isotope pattern available)}

\item{\code{detectableElements}}{These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  <p>  Detectable: Detectable elements are added to the chemical alphabet, if there are indications for them (e.g. in isotope pattern)}

\item{\code{ilpTimeout}}{ilpTimeout}

\item{\code{useHeuristic}}{useHeuristic}

\item{\code{injectSpecLibMatchFormulas}}{If true formula candidates that belong to spectral library matches above a certain threshold will  we inject/preserved for further analyses no matter which score they have or which filter is applied}

\item{\code{minScoreToInjectSpecLibMatch}}{Similarity Threshold to inject formula candidates no matter which score/rank they have or which filter settings are applied.  If threshold >= 0 formulas candidates with reference spectrum similarity above the threshold will be injected.}

\item{\code{minPeaksToInjectSpecLibMatch}}{Matching peaks threshold to inject formula candidates no matter which score they have or which filter is applied.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Sirius in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Sirius
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Sirius
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Sirius in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Sirius
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Sirius
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Sirius and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Sirius
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-print"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Sirius-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Sirius-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sirius$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
