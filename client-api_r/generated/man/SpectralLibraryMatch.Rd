% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectral_library_match.R
\docType{class}
\name{SpectralLibraryMatch}
\alias{SpectralLibraryMatch}
\title{SpectralLibraryMatch}
\format{
An \code{R6Class} generator object
}
\description{
SpectralLibraryMatch Class

SpectralLibraryMatch Class
}
\details{
Create a new SpectralLibraryMatch
}
\examples{

## ------------------------------------------------
## Method `SpectralLibraryMatch$toList`
## ------------------------------------------------

# convert array of SpectralLibraryMatch (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{specMatchId}}{character [optional]}

\item{\code{rank}}{integer [optional]}

\item{\code{similarity}}{Similarity between query and reference spectrum numeric}

\item{\code{sharedPeaks}}{Number of shared/matched peaks integer [optional]}

\item{\code{sharedPeakMapping}}{List of paired/matched peak indices.   Maps indices of peaks from the query spectrum (mass sorted)  to indices of matched peaks in the reference spectrum (mass sorted) list(\link{PeakPair}) [optional]}

\item{\code{querySpectrumIndex}}{integer}

\item{\code{dbName}}{character [optional]}

\item{\code{dbId}}{character [optional]}

\item{\code{uuid}}{integer}

\item{\code{splash}}{character [optional]}

\item{\code{molecularFormula}}{character [optional]}

\item{\code{adduct}}{character [optional]}

\item{\code{exactMass}}{numeric [optional]}

\item{\code{smiles}}{character [optional]}

\item{\code{type}}{character [optional]}

\item{\code{inchiKey}}{character}

\item{\code{referenceSpectrumType}}{character [optional]}

\item{\code{referenceSpectrum}}{\link{BasicSpectrum} [optional]}

\item{\code{querySpectrumType}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SpectralLibraryMatch-new}{\code{SpectralLibraryMatch$new()}}
\item \href{#method-SpectralLibraryMatch-toJSON}{\code{SpectralLibraryMatch$toJSON()}}
\item \href{#method-SpectralLibraryMatch-toList}{\code{SpectralLibraryMatch$toList()}}
\item \href{#method-SpectralLibraryMatch-toSimpleType}{\code{SpectralLibraryMatch$toSimpleType()}}
\item \href{#method-SpectralLibraryMatch-fromJSON}{\code{SpectralLibraryMatch$fromJSON()}}
\item \href{#method-SpectralLibraryMatch-toJSONString}{\code{SpectralLibraryMatch$toJSONString()}}
\item \href{#method-SpectralLibraryMatch-fromJSONString}{\code{SpectralLibraryMatch$fromJSONString()}}
\item \href{#method-SpectralLibraryMatch-validateJSON}{\code{SpectralLibraryMatch$validateJSON()}}
\item \href{#method-SpectralLibraryMatch-toString}{\code{SpectralLibraryMatch$toString()}}
\item \href{#method-SpectralLibraryMatch-isValid}{\code{SpectralLibraryMatch$isValid()}}
\item \href{#method-SpectralLibraryMatch-getInvalidFields}{\code{SpectralLibraryMatch$getInvalidFields()}}
\item \href{#method-SpectralLibraryMatch-print}{\code{SpectralLibraryMatch$print()}}
\item \href{#method-SpectralLibraryMatch-clone}{\code{SpectralLibraryMatch$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-new"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new SpectralLibraryMatch class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$new(
  similarity,
  querySpectrumIndex,
  uuid,
  inchiKey,
  specMatchId = NULL,
  rank = NULL,
  sharedPeaks = NULL,
  sharedPeakMapping = NULL,
  dbName = NULL,
  dbId = NULL,
  splash = NULL,
  molecularFormula = NULL,
  adduct = NULL,
  exactMass = NULL,
  smiles = NULL,
  type = "IDENTITY",
  referenceSpectrumType = "SPECTRUM",
  referenceSpectrum = NULL,
  querySpectrumType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{similarity}}{Similarity between query and reference spectrum}

\item{\code{querySpectrumIndex}}{querySpectrumIndex}

\item{\code{uuid}}{uuid}

\item{\code{inchiKey}}{inchiKey}

\item{\code{specMatchId}}{specMatchId}

\item{\code{rank}}{rank}

\item{\code{sharedPeaks}}{Number of shared/matched peaks}

\item{\code{sharedPeakMapping}}{List of paired/matched peak indices.   Maps indices of peaks from the query spectrum (mass sorted)  to indices of matched peaks in the reference spectrum (mass sorted)}

\item{\code{dbName}}{dbName}

\item{\code{dbId}}{dbId}

\item{\code{splash}}{splash}

\item{\code{molecularFormula}}{molecularFormula}

\item{\code{adduct}}{adduct}

\item{\code{exactMass}}{exactMass}

\item{\code{smiles}}{smiles}

\item{\code{type}}{type. Default to "IDENTITY".}

\item{\code{referenceSpectrumType}}{referenceSpectrumType. Default to "SPECTRUM".}

\item{\code{referenceSpectrum}}{referenceSpectrum}

\item{\code{querySpectrumType}}{querySpectrumType}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-toList"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
SpectralLibraryMatch as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of SpectralLibraryMatch (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert SpectralLibraryMatch to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of SpectralLibraryMatch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of SpectralLibraryMatch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SpectralLibraryMatch in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of SpectralLibraryMatch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of SpectralLibraryMatch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to SpectralLibraryMatch and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-toString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of SpectralLibraryMatch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-print"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibraryMatch-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibraryMatch-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibraryMatch$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
