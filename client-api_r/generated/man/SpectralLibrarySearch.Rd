% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectral_library_search.R
\docType{class}
\name{SpectralLibrarySearch}
\alias{SpectralLibrarySearch}
\title{SpectralLibrarySearch}
\format{
An \code{R6Class} generator object
}
\description{
User/developer friendly parameter subset for the Spectral library search tool.

SpectralLibrarySearch Class
}
\details{
Create a new SpectralLibrarySearch
}
\examples{

## ------------------------------------------------
## Method `SpectralLibrarySearch$toList`
## ------------------------------------------------

# convert array of SpectralLibrarySearch (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{enabled}}{tags whether the tool is enabled character [optional]}

\item{\code{spectraSearchDBs}}{Structure Databases with Reference spectra to search in.  <p>  Defaults to BIO + Custom Databases. Possible values are available to Database API. list(character) [optional]}

\item{\code{peakDeviationPpm}}{Maximum allowed mass deviation in ppm for matching peaks. numeric [optional]}

\item{\code{precursorDeviationPpm}}{Maximum allowed mass deviation in ppm for matching the precursor. If not specified, the same value as for the peaks is used. numeric [optional]}

\item{\code{scoring}}{Specify scoring method to match spectra  INTENSITY: Intensity weighted. Each peak matches at most one peak in the other spectrum.  GAUSSIAN: Treat peaks as (un-normalized) Gaussians and score overlapping areas of PDFs. Each peak might score against multiple peaks in the other spectrum.  MODIFIED_COSINE:  This algorithm requires that there is at most one pair of peaks (u,v) where the m/z of u and v are within the allowed mass tolerance. To be used for analog search with different precursor masses. character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SpectralLibrarySearch-new}{\code{SpectralLibrarySearch$new()}}
\item \href{#method-SpectralLibrarySearch-toJSON}{\code{SpectralLibrarySearch$toJSON()}}
\item \href{#method-SpectralLibrarySearch-toList}{\code{SpectralLibrarySearch$toList()}}
\item \href{#method-SpectralLibrarySearch-toSimpleType}{\code{SpectralLibrarySearch$toSimpleType()}}
\item \href{#method-SpectralLibrarySearch-fromJSON}{\code{SpectralLibrarySearch$fromJSON()}}
\item \href{#method-SpectralLibrarySearch-toJSONString}{\code{SpectralLibrarySearch$toJSONString()}}
\item \href{#method-SpectralLibrarySearch-fromJSONString}{\code{SpectralLibrarySearch$fromJSONString()}}
\item \href{#method-SpectralLibrarySearch-validateJSON}{\code{SpectralLibrarySearch$validateJSON()}}
\item \href{#method-SpectralLibrarySearch-toString}{\code{SpectralLibrarySearch$toString()}}
\item \href{#method-SpectralLibrarySearch-isValid}{\code{SpectralLibrarySearch$isValid()}}
\item \href{#method-SpectralLibrarySearch-getInvalidFields}{\code{SpectralLibrarySearch$getInvalidFields()}}
\item \href{#method-SpectralLibrarySearch-print}{\code{SpectralLibrarySearch$print()}}
\item \href{#method-SpectralLibrarySearch-clone}{\code{SpectralLibrarySearch$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-new"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new SpectralLibrarySearch class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$new(
  enabled = NULL,
  spectraSearchDBs = NULL,
  peakDeviationPpm = NULL,
  precursorDeviationPpm = NULL,
  scoring = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{enabled}}{tags whether the tool is enabled}

\item{\code{spectraSearchDBs}}{Structure Databases with Reference spectra to search in.  <p>  Defaults to BIO + Custom Databases. Possible values are available to Database API.}

\item{\code{peakDeviationPpm}}{Maximum allowed mass deviation in ppm for matching peaks.}

\item{\code{precursorDeviationPpm}}{Maximum allowed mass deviation in ppm for matching the precursor. If not specified, the same value as for the peaks is used.}

\item{\code{scoring}}{Specify scoring method to match spectra  INTENSITY: Intensity weighted. Each peak matches at most one peak in the other spectrum.  GAUSSIAN: Treat peaks as (un-normalized) Gaussians and score overlapping areas of PDFs. Each peak might score against multiple peaks in the other spectrum.  MODIFIED_COSINE:  This algorithm requires that there is at most one pair of peaks (u,v) where the m/z of u and v are within the allowed mass tolerance. To be used for analog search with different precursor masses.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-toList"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
SpectralLibrarySearch as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of SpectralLibrarySearch (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert SpectralLibrarySearch to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of SpectralLibrarySearch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of SpectralLibrarySearch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SpectralLibrarySearch in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of SpectralLibrarySearch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of SpectralLibrarySearch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to SpectralLibrarySearch and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-toString"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of SpectralLibrarySearch
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-print"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpectralLibrarySearch-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SpectralLibrarySearch-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpectralLibrarySearch$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
