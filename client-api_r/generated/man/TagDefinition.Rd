% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tag_definition.R
\docType{class}
\name{TagDefinition}
\alias{TagDefinition}
\title{TagDefinition}
\format{
An \code{R6Class} generator object
}
\description{
TagDefinition Class

TagDefinition Class
}
\details{
Create a new TagDefinition
}
\examples{

## ------------------------------------------------
## Method `TagDefinition$toList`
## ------------------------------------------------

# convert array of TagDefinition (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tagName}}{Name of this tag defined by this definition (key) character}

\item{\code{description}}{A human-readable description about the purpose of this tag. character [optional]}

\item{\code{tagType}}{A simple string based identifier to specify the type/scope/purpose of this tag. character [optional]}

\item{\code{valueType}}{character}

\item{\code{possibleValues}}{list(\link{AnyType}) [optional]}

\item{\code{minValue}}{\link{AnyType} [optional]}

\item{\code{maxValue}}{\link{AnyType} [optional]}

\item{\code{editable}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TagDefinition-new}{\code{TagDefinition$new()}}
\item \href{#method-TagDefinition-toJSON}{\code{TagDefinition$toJSON()}}
\item \href{#method-TagDefinition-toList}{\code{TagDefinition$toList()}}
\item \href{#method-TagDefinition-toSimpleType}{\code{TagDefinition$toSimpleType()}}
\item \href{#method-TagDefinition-fromJSON}{\code{TagDefinition$fromJSON()}}
\item \href{#method-TagDefinition-toJSONString}{\code{TagDefinition$toJSONString()}}
\item \href{#method-TagDefinition-fromJSONString}{\code{TagDefinition$fromJSONString()}}
\item \href{#method-TagDefinition-validateJSON}{\code{TagDefinition$validateJSON()}}
\item \href{#method-TagDefinition-toString}{\code{TagDefinition$toString()}}
\item \href{#method-TagDefinition-isValid}{\code{TagDefinition$isValid()}}
\item \href{#method-TagDefinition-getInvalidFields}{\code{TagDefinition$getInvalidFields()}}
\item \href{#method-TagDefinition-print}{\code{TagDefinition$print()}}
\item \href{#method-TagDefinition-clone}{\code{TagDefinition$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-new"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new TagDefinition class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$new(
  tagName,
  valueType,
  description = NULL,
  tagType = NULL,
  possibleValues = NULL,
  minValue = NULL,
  maxValue = NULL,
  editable = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tagName}}{Name of this tag defined by this definition (key)}

\item{\code{valueType}}{valueType}

\item{\code{description}}{A human-readable description about the purpose of this tag.}

\item{\code{tagType}}{A simple string based identifier to specify the type/scope/purpose of this tag.}

\item{\code{possibleValues}}{possibleValues}

\item{\code{minValue}}{minValue}

\item{\code{maxValue}}{maxValue}

\item{\code{editable}}{editable}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-toList"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TagDefinition as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of TagDefinition (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert TagDefinition to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of TagDefinition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TagDefinition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TagDefinition in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of TagDefinition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TagDefinition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to TagDefinition and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-toString"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of TagDefinition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-print"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagDefinition-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TagDefinition-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagDefinition$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
