% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tags_api.R
\docType{class}
\name{TagsApi}
\alias{TagsApi}
\title{Tags operations}
\format{
An \code{R6Class} generator object
}
\description{
TagsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6

The version of the OpenAPI document: 3.1
Generated by: https://openapi-generator.tech
}
\examples{
\dontrun{
####################  AddGroup  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to add to.
var_group_name <- "group_name_example" # character | name of the new group
var_filter <- "filter_example" # character | filter query to create the group
var_type <- "type_example" # character | type of the group

#[EXPERIMENTAL] Group tags in the project
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$AddGroup(var_project_id, var_group_name, var_filter, var_typedata_file = "result.txt")
result <- api_instance$tags_api$AddGroup(var_project_id, var_group_name, var_filter, var_type)
dput(result)


####################  AddPossibleValuesToTagDefinition  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to add to.
var_tag_name <- "tag_name_example" # character | the tag definition to add the values to
var_request_body <- c(TODO) # array[AnyType] | 

#[EXPERIMENTAL] Add a possible value to the tag definition in the project
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$AddPossibleValuesToTagDefinition(var_project_id, var_tag_name, var_request_bodydata_file = "result.txt")
result <- api_instance$tags_api$AddPossibleValuesToTagDefinition(var_project_id, var_tag_name, var_request_body)
dput(result)


####################  CreateTags  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to add to.
var_tag_definition_import <- c(TagDefinitionImport$new("tagName_example", "NONE", "description_example", "tagType_example", c(TODO), TODO, TODO)) # array[TagDefinitionImport] | the tag definitions to be created

#[EXPERIMENTAL] Add tags to the project
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$CreateTags(var_project_id, var_tag_definition_importdata_file = "result.txt")
result <- api_instance$tags_api$CreateTags(var_project_id, var_tag_definition_import)
dput(result)


####################  DeleteGroup  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_group_name <- "group_name_example" # character | name of group to delete.

#[EXPERIMENTAL] Delete tag groups with the given name from the specified project-space
api_instance <- rsirius_api$new()

api_instance$tags_api$DeleteGroup(var_project_id, var_group_name)


####################  DeleteTag  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_tag_name <- "tag_name_example" # character | name of the tag definition to delete.

#[EXPERIMENTAL] Delete tag definition with the given name from the specified project-space
api_instance <- rsirius_api$new()

api_instance$tags_api$DeleteTag(var_project_id, var_tag_name)


####################  GetGroupByName  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_group_name <- "group_name_example" # character | name of the group

#[EXPERIMENTAL] Get tag group by name in the given project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetGroupByName(var_project_id, var_group_namedata_file = "result.txt")
result <- api_instance$tags_api$GetGroupByName(var_project_id, var_group_name)
dput(result)


####################  GetGroups  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_group_type <- "group_type_example" # character | type of the group (Optional)

#[EXPERIMENTAL] Get all tag based groups in the given project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetGroups(var_project_id, group_type = var_group_typedata_file = "result.txt")
result <- api_instance$tags_api$GetGroups(var_project_id, group_type = var_group_type)
dput(result)


####################  GetTag  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_tag_name <- "tag_name_example" # character | name of the tag

#[EXPERIMENTAL] Get tag definition by its name in the given project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetTag(var_project_id, var_tag_namedata_file = "result.txt")
result <- api_instance$tags_api$GetTag(var_project_id, var_tag_name)
dput(result)


####################  GetTags  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_tag_type <- "tag_type_example" # character | scope of the tag (optional) (Optional)

#[EXPERIMENTAL] Get all tag definitions in the given project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetTags(var_project_id, tag_type = var_tag_typedata_file = "result.txt")
result <- api_instance$tags_api$GetTags(var_project_id, tag_type = var_tag_type)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TagsApi-new}{\code{TagsApi$new()}}
\item \href{#method-TagsApi-AddGroup}{\code{TagsApi$AddGroup()}}
\item \href{#method-TagsApi-AddGroupWithHttpInfo}{\code{TagsApi$AddGroupWithHttpInfo()}}
\item \href{#method-TagsApi-AddPossibleValuesToTagDefinition}{\code{TagsApi$AddPossibleValuesToTagDefinition()}}
\item \href{#method-TagsApi-AddPossibleValuesToTagDefinitionWithHttpInfo}{\code{TagsApi$AddPossibleValuesToTagDefinitionWithHttpInfo()}}
\item \href{#method-TagsApi-CreateTags}{\code{TagsApi$CreateTags()}}
\item \href{#method-TagsApi-CreateTagsWithHttpInfo}{\code{TagsApi$CreateTagsWithHttpInfo()}}
\item \href{#method-TagsApi-DeleteGroup}{\code{TagsApi$DeleteGroup()}}
\item \href{#method-TagsApi-DeleteGroupWithHttpInfo}{\code{TagsApi$DeleteGroupWithHttpInfo()}}
\item \href{#method-TagsApi-DeleteTag}{\code{TagsApi$DeleteTag()}}
\item \href{#method-TagsApi-DeleteTagWithHttpInfo}{\code{TagsApi$DeleteTagWithHttpInfo()}}
\item \href{#method-TagsApi-GetGroupByName}{\code{TagsApi$GetGroupByName()}}
\item \href{#method-TagsApi-GetGroupByNameWithHttpInfo}{\code{TagsApi$GetGroupByNameWithHttpInfo()}}
\item \href{#method-TagsApi-GetGroups}{\code{TagsApi$GetGroups()}}
\item \href{#method-TagsApi-GetGroupsWithHttpInfo}{\code{TagsApi$GetGroupsWithHttpInfo()}}
\item \href{#method-TagsApi-GetTag}{\code{TagsApi$GetTag()}}
\item \href{#method-TagsApi-GetTagWithHttpInfo}{\code{TagsApi$GetTagWithHttpInfo()}}
\item \href{#method-TagsApi-GetTags}{\code{TagsApi$GetTags()}}
\item \href{#method-TagsApi-GetTagsWithHttpInfo}{\code{TagsApi$GetTagsWithHttpInfo()}}
\item \href{#method-TagsApi-clone}{\code{TagsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new TagsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-AddGroup"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-AddGroup}{}}}
\subsection{Method \code{AddGroup()}}{
[EXPERIMENTAL] Group tags in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$AddGroup(project_id, group_name, filter, type, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{group_name}}{name of the new group}

\item{\code{filter}}{filter query to create the group}

\item{\code{type}}{type of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TagGroup
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-AddGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-AddGroupWithHttpInfo}{}}}
\subsection{Method \code{AddGroupWithHttpInfo()}}{
[EXPERIMENTAL] Group tags in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$AddGroupWithHttpInfo(
  project_id,
  group_name,
  filter,
  type,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{group_name}}{name of the new group}

\item{\code{filter}}{filter query to create the group}

\item{\code{type}}{type of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TagGroup) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-AddPossibleValuesToTagDefinition"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-AddPossibleValuesToTagDefinition}{}}}
\subsection{Method \code{AddPossibleValuesToTagDefinition()}}{
[EXPERIMENTAL] Add a possible value to the tag definition in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$AddPossibleValuesToTagDefinition(
  project_id,
  tag_name,
  request_body,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{tag_name}}{the tag definition to add the values to}

\item{\code{request_body}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TagDefinition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-AddPossibleValuesToTagDefinitionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-AddPossibleValuesToTagDefinitionWithHttpInfo}{}}}
\subsection{Method \code{AddPossibleValuesToTagDefinitionWithHttpInfo()}}{
[EXPERIMENTAL] Add a possible value to the tag definition in the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$AddPossibleValuesToTagDefinitionWithHttpInfo(
  project_id,
  tag_name,
  request_body,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{tag_name}}{the tag definition to add the values to}

\item{\code{request_body}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TagDefinition) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-CreateTags"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-CreateTags}{}}}
\subsection{Method \code{CreateTags()}}{
[EXPERIMENTAL] Add tags to the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$CreateTags(project_id, tag_definition_import, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{tag_definition_import}}{the tag definitions to be created}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[TagDefinition]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-CreateTagsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-CreateTagsWithHttpInfo}{}}}
\subsection{Method \code{CreateTagsWithHttpInfo()}}{
[EXPERIMENTAL] Add tags to the project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$CreateTagsWithHttpInfo(
  project_id,
  tag_definition_import,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to add to.}

\item{\code{tag_definition_import}}{the tag definitions to be created}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[TagDefinition]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-DeleteGroup"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-DeleteGroup}{}}}
\subsection{Method \code{DeleteGroup()}}{
[EXPERIMENTAL] Delete tag groups with the given name from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$DeleteGroup(project_id, group_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{group_name}}{name of group to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-DeleteGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-DeleteGroupWithHttpInfo}{}}}
\subsection{Method \code{DeleteGroupWithHttpInfo()}}{
[EXPERIMENTAL] Delete tag groups with the given name from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$DeleteGroupWithHttpInfo(project_id, group_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{group_name}}{name of group to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-DeleteTag"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-DeleteTag}{}}}
\subsection{Method \code{DeleteTag()}}{
[EXPERIMENTAL] Delete tag definition with the given name from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$DeleteTag(project_id, tag_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{tag_name}}{name of the tag definition to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-DeleteTagWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-DeleteTagWithHttpInfo}{}}}
\subsection{Method \code{DeleteTagWithHttpInfo()}}{
[EXPERIMENTAL] Delete tag definition with the given name from the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$DeleteTagWithHttpInfo(project_id, tag_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{tag_name}}{name of the tag definition to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetGroupByName"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetGroupByName}{}}}
\subsection{Method \code{GetGroupByName()}}{
[EXPERIMENTAL] Get tag group by name in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetGroupByName(project_id, group_name, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{group_name}}{name of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TagGroup
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetGroupByNameWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetGroupByNameWithHttpInfo}{}}}
\subsection{Method \code{GetGroupByNameWithHttpInfo()}}{
[EXPERIMENTAL] Get tag group by name in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetGroupByNameWithHttpInfo(
  project_id,
  group_name,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{group_name}}{name of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TagGroup) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetGroups"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetGroups}{}}}
\subsection{Method \code{GetGroups()}}{
[EXPERIMENTAL] Get all tag based groups in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetGroups(project_id, group_type = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{group_type}}{(optional) type of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[TagGroup]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetGroupsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetGroupsWithHttpInfo}{}}}
\subsection{Method \code{GetGroupsWithHttpInfo()}}{
[EXPERIMENTAL] Get all tag based groups in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetGroupsWithHttpInfo(
  project_id,
  group_type = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{group_type}}{(optional) type of the group}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[TagGroup]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetTag"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetTag}{}}}
\subsection{Method \code{GetTag()}}{
[EXPERIMENTAL] Get tag definition by its name in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetTag(project_id, tag_name, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{tag_name}}{name of the tag}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TagDefinition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetTagWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetTagWithHttpInfo}{}}}
\subsection{Method \code{GetTagWithHttpInfo()}}{
[EXPERIMENTAL] Get tag definition by its name in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetTagWithHttpInfo(project_id, tag_name, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{tag_name}}{name of the tag}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TagDefinition) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetTags"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetTags}{}}}
\subsection{Method \code{GetTags()}}{
[EXPERIMENTAL] Get all tag definitions in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetTags(project_id, tag_type = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{tag_type}}{(optional) scope of the tag (optional)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[TagDefinition]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-GetTagsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-GetTagsWithHttpInfo}{}}}
\subsection{Method \code{GetTagsWithHttpInfo()}}{
[EXPERIMENTAL] Get all tag definitions in the given project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$GetTagsWithHttpInfo(project_id, tag_type = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{tag_type}}{(optional) scope of the tag (optional)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[TagDefinition]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TagsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TagsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TagsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
