% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trace_experimental.R
\docType{class}
\name{TraceExperimental}
\alias{TraceExperimental}
\title{TraceExperimental}
\format{
An \code{R6Class} generator object
}
\description{
EXPERIMENTAL: This schema is experimental and may be changed (or even removed) without notice until it is declared stable.

TraceExperimental Class
}
\details{
Create a new TraceExperimental
}
\examples{

## ------------------------------------------------
## Method `TraceExperimental$toList`
## ------------------------------------------------

# convert array of TraceExperimental (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{character [optional]}

\item{\code{sampleId}}{character [optional]}

\item{\code{sampleName}}{character [optional]}

\item{\code{label}}{character [optional]}

\item{\code{intensities}}{list(numeric) [optional]}

\item{\code{annotations}}{list(\link{TraceAnnotationExperimental}) [optional]}

\item{\code{mz}}{numeric [optional]}

\item{\code{merged}}{character [optional]}

\item{\code{normalizationFactor}}{Traces are stored with raw intensity values. The normalization factor maps them to relative intensities,  such that traces from different samples can be compared. numeric [optional]}

\item{\code{noiseLevel}}{The noise level is estimated from the median noise in the surrounding scans. It can be used to  calculate signal-to-noise ratios. numeric [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TraceExperimental-new}{\code{TraceExperimental$new()}}
\item \href{#method-TraceExperimental-toJSON}{\code{TraceExperimental$toJSON()}}
\item \href{#method-TraceExperimental-toList}{\code{TraceExperimental$toList()}}
\item \href{#method-TraceExperimental-toSimpleType}{\code{TraceExperimental$toSimpleType()}}
\item \href{#method-TraceExperimental-fromJSON}{\code{TraceExperimental$fromJSON()}}
\item \href{#method-TraceExperimental-toJSONString}{\code{TraceExperimental$toJSONString()}}
\item \href{#method-TraceExperimental-fromJSONString}{\code{TraceExperimental$fromJSONString()}}
\item \href{#method-TraceExperimental-validateJSON}{\code{TraceExperimental$validateJSON()}}
\item \href{#method-TraceExperimental-toString}{\code{TraceExperimental$toString()}}
\item \href{#method-TraceExperimental-isValid}{\code{TraceExperimental$isValid()}}
\item \href{#method-TraceExperimental-getInvalidFields}{\code{TraceExperimental$getInvalidFields()}}
\item \href{#method-TraceExperimental-print}{\code{TraceExperimental$print()}}
\item \href{#method-TraceExperimental-clone}{\code{TraceExperimental$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-new"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new TraceExperimental class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$new(
  id = NULL,
  sampleId = NULL,
  sampleName = NULL,
  label = NULL,
  intensities = NULL,
  annotations = NULL,
  mz = NULL,
  merged = NULL,
  normalizationFactor = NULL,
  noiseLevel = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{id}

\item{\code{sampleId}}{sampleId}

\item{\code{sampleName}}{sampleName}

\item{\code{label}}{label}

\item{\code{intensities}}{intensities}

\item{\code{annotations}}{annotations}

\item{\code{mz}}{mz}

\item{\code{merged}}{merged}

\item{\code{normalizationFactor}}{Traces are stored with raw intensity values. The normalization factor maps them to relative intensities,  such that traces from different samples can be compared.}

\item{\code{noiseLevel}}{The noise level is estimated from the median noise in the surrounding scans. It can be used to  calculate signal-to-noise ratios.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-toList"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TraceExperimental as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of TraceExperimental (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert TraceExperimental to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of TraceExperimental
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TraceExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TraceExperimental in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of TraceExperimental
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TraceExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to TraceExperimental and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-toString"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of TraceExperimental
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-print"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TraceExperimental-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TraceExperimental-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TraceExperimental$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
