% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_list.R
\docType{class}
\name{WorkerList}
\alias{WorkerList}
\title{WorkerList}
\format{
An \code{R6Class} generator object
}
\description{
WorkerList Class

WorkerList Class
}
\details{
Create a new WorkerList
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{pendingJobs}}{integer}

\item{\code{workerList}}{list(\link{WorkerInfo})}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WorkerList-new}{\code{WorkerList$new()}}
\item \href{#method-WorkerList-toJSON}{\code{WorkerList$toJSON()}}
\item \href{#method-WorkerList-fromJSON}{\code{WorkerList$fromJSON()}}
\item \href{#method-WorkerList-toJSONString}{\code{WorkerList$toJSONString()}}
\item \href{#method-WorkerList-fromJSONString}{\code{WorkerList$fromJSONString()}}
\item \href{#method-WorkerList-validateJSON}{\code{WorkerList$validateJSON()}}
\item \href{#method-WorkerList-toString}{\code{WorkerList$toString()}}
\item \href{#method-WorkerList-isValid}{\code{WorkerList$isValid()}}
\item \href{#method-WorkerList-getInvalidFields}{\code{WorkerList$getInvalidFields()}}
\item \href{#method-WorkerList-print}{\code{WorkerList$print()}}
\item \href{#method-WorkerList-clone}{\code{WorkerList$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-new"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new WorkerList class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$new(pendingJobs, workerList, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pendingJobs}}{pendingJobs}

\item{\code{workerList}}{workerList}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
WorkerList in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of WorkerList
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of WorkerList
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
WorkerList in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of WorkerList
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of WorkerList
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to WorkerList and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-toString"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of WorkerList
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-print"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerList-clone"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerList-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerList$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
